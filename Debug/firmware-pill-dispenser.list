
firmware-pill-dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004678  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  0800480c  0800480c  0001480c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004824  08004824  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08004824  08004824  00014824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800482c  0800482c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800482c  0800482c  0001482c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004830  08004830  00014830  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08004834  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000034  08004868  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08004868  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d355  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002245  00000000  00000000  0002d3b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b30  00000000  00000000  0002f600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00030130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e12  00000000  00000000  00030b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d8ea  00000000  00000000  0004699a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00087b9f  00000000  00000000  00054284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000dbe23  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d00  00000000  00000000  000dbe78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000034 	.word	0x20000034
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080047f4 	.word	0x080047f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000038 	.word	0x20000038
 80001d0:	080047f4 	.word	0x080047f4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80004d2:	2306      	movs	r3, #6
 80004d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80004d6:	2306      	movs	r3, #6
 80004d8:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	83fb      	strh	r3, [r7, #30]
 80004e2:	2300      	movs	r3, #0
 80004e4:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ea:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80004f0:	4ba1      	ldr	r3, [pc, #644]	; (8000778 <EE_Init+0x2ac>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80004f6:	4ba1      	ldr	r3, [pc, #644]	; (800077c <EE_Init+0x2b0>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80004fc:	2300      	movs	r3, #0
 80004fe:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8000500:	2302      	movs	r3, #2
 8000502:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8000504:	2301      	movs	r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000508:	2302      	movs	r3, #2
 800050a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 800050c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800050e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000512:	4293      	cmp	r3, r2
 8000514:	d00b      	beq.n	800052e <EE_Init+0x62>
 8000516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800051a:	f280 8196 	bge.w	800084a <EE_Init+0x37e>
 800051e:	2b00      	cmp	r3, #0
 8000520:	f000 80f8 	beq.w	8000714 <EE_Init+0x248>
 8000524:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000528:	4293      	cmp	r3, r2
 800052a:	d050      	beq.n	80005ce <EE_Init+0x102>
 800052c:	e18d      	b.n	800084a <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800052e:	8c3b      	ldrh	r3, [r7, #32]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d116      	bne.n	8000562 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000534:	4890      	ldr	r0, [pc, #576]	; (8000778 <EE_Init+0x2ac>)
 8000536:	f000 f9a9 	bl	800088c <EE_VerifyPageFullyErased>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 818e 	bne.w	800085e <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000542:	f107 0214 	add.w	r2, r7, #20
 8000546:	463b      	mov	r3, r7
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fc82 	bl	8001e54 <HAL_FLASHEx_Erase>
 8000550:	4603      	mov	r3, r0
 8000552:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000554:	7efb      	ldrb	r3, [r7, #27]
 8000556:	2b00      	cmp	r3, #0
 8000558:	f000 8181 	beq.w	800085e <EE_Init+0x392>
          {
            return FlashStatus;
 800055c:	7efb      	ldrb	r3, [r7, #27]
 800055e:	b29b      	uxth	r3, r3
 8000560:	e185      	b.n	800086e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000562:	8c3b      	ldrh	r3, [r7, #32]
 8000564:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000568:	4293      	cmp	r3, r2
 800056a:	d125      	bne.n	80005b8 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800056c:	4882      	ldr	r0, [pc, #520]	; (8000778 <EE_Init+0x2ac>)
 800056e:	f000 f98d 	bl	800088c <EE_VerifyPageFullyErased>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10e      	bne.n	8000596 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000578:	f107 0214 	add.w	r2, r7, #20
 800057c:	463b      	mov	r3, r7
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fc67 	bl	8001e54 <HAL_FLASHEx_Erase>
 8000586:	4603      	mov	r3, r0
 8000588:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800058a:	7efb      	ldrb	r3, [r7, #27]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d002      	beq.n	8000596 <EE_Init+0xca>
          {
            return FlashStatus;
 8000590:	7efb      	ldrb	r3, [r7, #27]
 8000592:	b29b      	uxth	r3, r3
 8000594:	e16b      	b.n	800086e <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	4977      	ldr	r1, [pc, #476]	; (800077c <EE_Init+0x2b0>)
 80005a0:	2001      	movs	r0, #1
 80005a2:	f001 faa1 	bl	8001ae8 <HAL_FLASH_Program>
 80005a6:	4603      	mov	r3, r0
 80005a8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80005aa:	7efb      	ldrb	r3, [r7, #27]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 8156 	beq.w	800085e <EE_Init+0x392>
        {
          return FlashStatus;
 80005b2:	7efb      	ldrb	r3, [r7, #27]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	e15a      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80005b8:	f000 f9fa 	bl	80009b0 <EE_Format>
 80005bc:	4603      	mov	r3, r0
 80005be:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80005c0:	7efb      	ldrb	r3, [r7, #27]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f000 814b 	beq.w	800085e <EE_Init+0x392>
        {
          return FlashStatus;
 80005c8:	7efb      	ldrb	r3, [r7, #27]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	e14f      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80005ce:	8c3b      	ldrh	r3, [r7, #32]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d163      	bne.n	800069c <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80005d8:	e030      	b.n	800063c <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80005da:	4b69      	ldr	r3, [pc, #420]	; (8000780 <EE_Init+0x2b4>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005e2:	4968      	ldr	r1, [pc, #416]	; (8000784 <EE_Init+0x2b8>)
 80005e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d101      	bne.n	80005f0 <EE_Init+0x124>
          {
            x = VarIdx;
 80005ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005ee:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80005f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d01d      	beq.n	8000636 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80005fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005fc:	4a61      	ldr	r2, [pc, #388]	; (8000784 <EE_Init+0x2b8>)
 80005fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000602:	4961      	ldr	r1, [pc, #388]	; (8000788 <EE_Init+0x2bc>)
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f967 	bl	80008d8 <EE_ReadVariable>
 800060a:	4603      	mov	r3, r0
 800060c:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800060e:	8bbb      	ldrh	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d010      	beq.n	8000636 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000616:	4a5b      	ldr	r2, [pc, #364]	; (8000784 <EE_Init+0x2b8>)
 8000618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061c:	4a5a      	ldr	r2, [pc, #360]	; (8000788 <EE_Init+0x2bc>)
 800061e:	8812      	ldrh	r2, [r2, #0]
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fa5c 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 8000628:	4603      	mov	r3, r0
 800062a:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800062c:	8bfb      	ldrh	r3, [r7, #30]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <EE_Init+0x16a>
              {
                return EepromStatus;
 8000632:	8bfb      	ldrh	r3, [r7, #30]
 8000634:	e11b      	b.n	800086e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000636:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000638:	3301      	adds	r3, #1
 800063a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800063c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800063e:	2b13      	cmp	r3, #19
 8000640:	d9cb      	bls.n	80005da <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000642:	f04f 0200 	mov.w	r2, #0
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	494b      	ldr	r1, [pc, #300]	; (8000778 <EE_Init+0x2ac>)
 800064c:	2001      	movs	r0, #1
 800064e:	f001 fa4b 	bl	8001ae8 <HAL_FLASH_Program>
 8000652:	4603      	mov	r3, r0
 8000654:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000656:	7efb      	ldrb	r3, [r7, #27]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <EE_Init+0x196>
        {
          return FlashStatus;
 800065c:	7efb      	ldrb	r3, [r7, #27]
 800065e:	b29b      	uxth	r3, r3
 8000660:	e105      	b.n	800086e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8000662:	2303      	movs	r3, #3
 8000664:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800066e:	4843      	ldr	r0, [pc, #268]	; (800077c <EE_Init+0x2b0>)
 8000670:	f000 f90c 	bl	800088c <EE_VerifyPageFullyErased>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	f040 80f3 	bne.w	8000862 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800067c:	f107 0214 	add.w	r2, r7, #20
 8000680:	463b      	mov	r3, r7
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fbe5 	bl	8001e54 <HAL_FLASHEx_Erase>
 800068a:	4603      	mov	r3, r0
 800068c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800068e:	7efb      	ldrb	r3, [r7, #27]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 80e6 	beq.w	8000862 <EE_Init+0x396>
          {
            return FlashStatus;
 8000696:	7efb      	ldrb	r3, [r7, #27]
 8000698:	b29b      	uxth	r3, r3
 800069a:	e0e8      	b.n	800086e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800069c:	8c3b      	ldrh	r3, [r7, #32]
 800069e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d12b      	bne.n	80006fe <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 80006a6:	2303      	movs	r3, #3
 80006a8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80006b2:	4832      	ldr	r0, [pc, #200]	; (800077c <EE_Init+0x2b0>)
 80006b4:	f000 f8ea 	bl	800088c <EE_VerifyPageFullyErased>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10e      	bne.n	80006dc <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80006be:	f107 0214 	add.w	r2, r7, #20
 80006c2:	463b      	mov	r3, r7
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fbc4 	bl	8001e54 <HAL_FLASHEx_Erase>
 80006cc:	4603      	mov	r3, r0
 80006ce:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80006d0:	7efb      	ldrb	r3, [r7, #27]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <EE_Init+0x210>
          {
            return FlashStatus;
 80006d6:	7efb      	ldrb	r3, [r7, #27]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	e0c8      	b.n	800086e <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80006dc:	f04f 0200 	mov.w	r2, #0
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	4924      	ldr	r1, [pc, #144]	; (8000778 <EE_Init+0x2ac>)
 80006e6:	2001      	movs	r0, #1
 80006e8:	f001 f9fe 	bl	8001ae8 <HAL_FLASH_Program>
 80006ec:	4603      	mov	r3, r0
 80006ee:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80006f0:	7efb      	ldrb	r3, [r7, #27]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f000 80b5 	beq.w	8000862 <EE_Init+0x396>
        {
          return FlashStatus;
 80006f8:	7efb      	ldrb	r3, [r7, #27]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	e0b7      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80006fe:	f000 f957 	bl	80009b0 <EE_Format>
 8000702:	4603      	mov	r3, r0
 8000704:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000706:	7efb      	ldrb	r3, [r7, #27]
 8000708:	2b00      	cmp	r3, #0
 800070a:	f000 80aa 	beq.w	8000862 <EE_Init+0x396>
        {
          return FlashStatus;
 800070e:	7efb      	ldrb	r3, [r7, #27]
 8000710:	b29b      	uxth	r3, r3
 8000712:	e0ac      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000714:	8c3b      	ldrh	r3, [r7, #32]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10a      	bne.n	8000730 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800071a:	f000 f949 	bl	80009b0 <EE_Format>
 800071e:	4603      	mov	r3, r0
 8000720:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000722:	7efb      	ldrb	r3, [r7, #27]
 8000724:	2b00      	cmp	r3, #0
 8000726:	f000 809e 	beq.w	8000866 <EE_Init+0x39a>
        {
          return FlashStatus;
 800072a:	7efb      	ldrb	r3, [r7, #27]
 800072c:	b29b      	uxth	r3, r3
 800072e:	e09e      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000730:	8c3b      	ldrh	r3, [r7, #32]
 8000732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000736:	4293      	cmp	r3, r2
 8000738:	d11b      	bne.n	8000772 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800073a:	2303      	movs	r3, #3
 800073c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <EE_Init+0x2b0>)
 8000748:	f000 f8a0 	bl	800088c <EE_VerifyPageFullyErased>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	f040 8089 	bne.w	8000866 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000754:	f107 0214 	add.w	r2, r7, #20
 8000758:	463b      	mov	r3, r7
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fb79 	bl	8001e54 <HAL_FLASHEx_Erase>
 8000762:	4603      	mov	r3, r0
 8000764:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000766:	7efb      	ldrb	r3, [r7, #27]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d07c      	beq.n	8000866 <EE_Init+0x39a>
          {
            return FlashStatus;
 800076c:	7efb      	ldrb	r3, [r7, #27]
 800076e:	b29b      	uxth	r3, r3
 8000770:	e07d      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000772:	2300      	movs	r3, #0
 8000774:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000776:	e03a      	b.n	80007ee <EE_Init+0x322>
 8000778:	08008000 	.word	0x08008000
 800077c:	0800c000 	.word	0x0800c000
 8000780:	08008006 	.word	0x08008006
 8000784:	20000000 	.word	0x20000000
 8000788:	20000050 	.word	0x20000050
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <EE_Init+0x3ac>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	b29a      	uxth	r2, r3
 8000792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000794:	4939      	ldr	r1, [pc, #228]	; (800087c <EE_Init+0x3b0>)
 8000796:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800079a:	429a      	cmp	r2, r3
 800079c:	d101      	bne.n	80007a2 <EE_Init+0x2d6>
          {
            x = VarIdx;
 800079e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007a0:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80007a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d01d      	beq.n	80007e8 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ae:	4a33      	ldr	r2, [pc, #204]	; (800087c <EE_Init+0x3b0>)
 80007b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b4:	4932      	ldr	r1, [pc, #200]	; (8000880 <EE_Init+0x3b4>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f88e 	bl	80008d8 <EE_ReadVariable>
 80007bc:	4603      	mov	r3, r0
 80007be:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80007c0:	8bbb      	ldrh	r3, [r7, #28]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d010      	beq.n	80007e8 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80007c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007c8:	4a2c      	ldr	r2, [pc, #176]	; (800087c <EE_Init+0x3b0>)
 80007ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <EE_Init+0x3b4>)
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f983 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 80007da:	4603      	mov	r3, r0
 80007dc:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80007de:	8bfb      	ldrh	r3, [r7, #30]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <EE_Init+0x31c>
              {
                return EepromStatus;
 80007e4:	8bfb      	ldrh	r3, [r7, #30]
 80007e6:	e042      	b.n	800086e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80007e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ea:	3301      	adds	r3, #1
 80007ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80007ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007f0:	2b13      	cmp	r3, #19
 80007f2:	d9cb      	bls.n	800078c <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	4921      	ldr	r1, [pc, #132]	; (8000884 <EE_Init+0x3b8>)
 80007fe:	2001      	movs	r0, #1
 8000800:	f001 f972 	bl	8001ae8 <HAL_FLASH_Program>
 8000804:	4603      	mov	r3, r0
 8000806:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000808:	7efb      	ldrb	r3, [r7, #27]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <EE_Init+0x348>
        {
          return FlashStatus;
 800080e:	7efb      	ldrb	r3, [r7, #27]
 8000810:	b29b      	uxth	r3, r3
 8000812:	e02c      	b.n	800086e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8000814:	2302      	movs	r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000820:	4819      	ldr	r0, [pc, #100]	; (8000888 <EE_Init+0x3bc>)
 8000822:	f000 f833 	bl	800088c <EE_VerifyPageFullyErased>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d11c      	bne.n	8000866 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800082c:	f107 0214 	add.w	r2, r7, #20
 8000830:	463b      	mov	r3, r7
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fb0d 	bl	8001e54 <HAL_FLASHEx_Erase>
 800083a:	4603      	mov	r3, r0
 800083c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800083e:	7efb      	ldrb	r3, [r7, #27]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d010      	beq.n	8000866 <EE_Init+0x39a>
          {
            return FlashStatus;
 8000844:	7efb      	ldrb	r3, [r7, #27]
 8000846:	b29b      	uxth	r3, r3
 8000848:	e011      	b.n	800086e <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800084a:	f000 f8b1 	bl	80009b0 <EE_Format>
 800084e:	4603      	mov	r3, r0
 8000850:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000852:	7efb      	ldrb	r3, [r7, #27]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d008      	beq.n	800086a <EE_Init+0x39e>
      {
        return FlashStatus;
 8000858:	7efb      	ldrb	r3, [r7, #27]
 800085a:	b29b      	uxth	r3, r3
 800085c:	e007      	b.n	800086e <EE_Init+0x3a2>
      break;
 800085e:	bf00      	nop
 8000860:	e004      	b.n	800086c <EE_Init+0x3a0>
      break;
 8000862:	bf00      	nop
 8000864:	e002      	b.n	800086c <EE_Init+0x3a0>
      break;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <EE_Init+0x3a0>
      }
      break;
 800086a:	bf00      	nop
  }

  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	0800c006 	.word	0x0800c006
 800087c:	20000000 	.word	0x20000000
 8000880:	20000050 	.word	0x20000050
 8000884:	0800c000 	.word	0x0800c000
 8000888:	08008000 	.word	0x08008000

0800088c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8000898:	f245 5355 	movw	r3, #21845	; 0x5555
 800089c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800089e:	e00d      	b.n	80008bc <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80008a6:	897b      	ldrh	r3, [r7, #10]
 80008a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d002      	beq.n	80008b6 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]

      break;
 80008b4:	e006      	b.n	80008c4 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3304      	adds	r3, #4
 80008ba:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <EE_VerifyPageFullyErased+0x48>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d3ed      	bcc.n	80008a0 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	b29b      	uxth	r3, r3
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	0800c000 	.word	0x0800c000

080008d8 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80008e8:	f245 5355 	movw	r3, #21845	; 0x5555
 80008ec:	81bb      	strh	r3, [r7, #12]
 80008ee:	2301      	movs	r3, #1
 80008f0:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <EE_ReadVariable+0x8c>)
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <EE_ReadVariable+0x8c>)
 80008f8:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 f8aa 	bl	8000a54 <EE_FindValidPage>
 8000900:	4603      	mov	r3, r0
 8000902:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000904:	89fb      	ldrh	r3, [r7, #14]
 8000906:	2bab      	cmp	r3, #171	; 0xab
 8000908:	d101      	bne.n	800090e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800090a:	23ab      	movs	r3, #171	; 0xab
 800090c:	e025      	b.n	800095a <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000914:	3302      	adds	r3, #2
 8000916:	039b      	lsls	r3, r3, #14
 8000918:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800091a:	89fb      	ldrh	r3, [r7, #14]
 800091c:	3301      	adds	r3, #1
 800091e:	039a      	lsls	r2, r3, #14
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <EE_ReadVariable+0x90>)
 8000922:	4413      	add	r3, r2
 8000924:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8000926:	e012      	b.n	800094e <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800092e:	89ba      	ldrh	r2, [r7, #12]
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	429a      	cmp	r2, r3
 8000934:	d108      	bne.n	8000948 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	3b02      	subs	r3, #2
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	b29a      	uxth	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	82fb      	strh	r3, [r7, #22]

      break;
 8000946:	e007      	b.n	8000958 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	3b04      	subs	r3, #4
 800094c:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3302      	adds	r3, #2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8e7      	bhi.n	8000928 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000958:	8afb      	ldrh	r3, [r7, #22]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08008000 	.word	0x08008000
 8000968:	08007ffe 	.word	0x08007ffe

0800096c <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	80fb      	strh	r3, [r7, #6]
 8000978:	4613      	mov	r3, r2
 800097a:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000980:	88ba      	ldrh	r2, [r7, #4]
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f8aa 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 800098c:	4603      	mov	r3, r0
 800098e:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000990:	89fb      	ldrh	r3, [r7, #14]
 8000992:	2b80      	cmp	r3, #128	; 0x80
 8000994:	d107      	bne.n	80009a6 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000996:	88ba      	ldrh	r2, [r7, #4]
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f8f9 	bl	8000b94 <EE_PageTransfer>
 80009a2:	4603      	mov	r3, r0
 80009a4:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80009a6:	89fb      	ldrh	r3, [r7, #14]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 80009c2:	2302      	movs	r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80009ce:	481f      	ldr	r0, [pc, #124]	; (8000a4c <EE_Format+0x9c>)
 80009d0:	f7ff ff5c 	bl	800088c <EE_VerifyPageFullyErased>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10d      	bne.n	80009f6 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80009da:	f107 0218 	add.w	r2, r7, #24
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fa36 	bl	8001e54 <HAL_FLASHEx_Erase>
 80009e8:	4603      	mov	r3, r0
 80009ea:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80009ec:	7ffb      	ldrb	r3, [r7, #31]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <EE_Format+0x46>
    {
      return FlashStatus;
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	e025      	b.n	8000a42 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	4913      	ldr	r1, [pc, #76]	; (8000a4c <EE_Format+0x9c>)
 8000a00:	2001      	movs	r0, #1
 8000a02:	f001 f871 	bl	8001ae8 <HAL_FLASH_Program>
 8000a06:	4603      	mov	r3, r0
 8000a08:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000a0a:	7ffb      	ldrb	r3, [r7, #31]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <EE_Format+0x64>
  {
    return FlashStatus;
 8000a10:	7ffb      	ldrb	r3, [r7, #31]
 8000a12:	e016      	b.n	8000a42 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000a14:	2303      	movs	r3, #3
 8000a16:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <EE_Format+0xa0>)
 8000a1a:	f7ff ff37 	bl	800088c <EE_VerifyPageFullyErased>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10d      	bne.n	8000a40 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000a24:	f107 0218 	add.w	r2, r7, #24
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fa11 	bl	8001e54 <HAL_FLASHEx_Erase>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <EE_Format+0x90>
    {
      return FlashStatus;
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	e000      	b.n	8000a42 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08008000 	.word	0x08008000
 8000a50:	0800c000 	.word	0x0800c000

08000a54 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000a5e:	2306      	movs	r3, #6
 8000a60:	81fb      	strh	r3, [r7, #14]
 8000a62:	2306      	movs	r3, #6
 8000a64:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <EE_FindValidPage+0x84>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <EE_FindValidPage+0x88>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d01b      	beq.n	8000ab0 <EE_FindValidPage+0x5c>
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d125      	bne.n	8000ac8 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000a7c:	89bb      	ldrh	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d108      	bne.n	8000a94 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000a82:	89fb      	ldrh	r3, [r7, #14]
 8000a84:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d101      	bne.n	8000a90 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e01c      	b.n	8000aca <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000a90:	2301      	movs	r3, #1
 8000a92:	e01a      	b.n	8000aca <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d108      	bne.n	8000aac <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000a9a:	89bb      	ldrh	r3, [r7, #12]
 8000a9c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d101      	bne.n	8000aa8 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e010      	b.n	8000aca <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e00e      	b.n	8000aca <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000aac:	23ab      	movs	r3, #171	; 0xab
 8000aae:	e00c      	b.n	8000aca <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e007      	b.n	8000aca <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000aba:	89bb      	ldrh	r3, [r7, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e002      	b.n	8000aca <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000ac4:	23ab      	movs	r3, #171	; 0xab
 8000ac6:	e000      	b.n	8000aca <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000ac8:	2300      	movs	r3, #0
  }
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	08008000 	.word	0x08008000
 8000adc:	0800c000 	.word	0x0800c000

08000ae0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	460a      	mov	r2, r1
 8000aea:	80fb      	strh	r3, [r7, #6]
 8000aec:	4613      	mov	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <EE_VerifyPageFullWriteVariable+0xa8>)
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <EE_VerifyPageFullWriteVariable+0xac>)
 8000afe:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff ffa7 	bl	8000a54 <EE_FindValidPage>
 8000b06:	4603      	mov	r3, r0
 8000b08:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000b0a:	8a3b      	ldrh	r3, [r7, #16]
 8000b0c:	2bab      	cmp	r3, #171	; 0xab
 8000b0e:	d101      	bne.n	8000b14 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8000b10:	23ab      	movs	r3, #171	; 0xab
 8000b12:	e035      	b.n	8000b80 <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000b14:	8a3b      	ldrh	r3, [r7, #16]
 8000b16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	039b      	lsls	r3, r3, #14
 8000b1e:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000b20:	8a3b      	ldrh	r3, [r7, #16]
 8000b22:	3301      	adds	r3, #1
 8000b24:	039a      	lsls	r2, r3, #14
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <EE_VerifyPageFullWriteVariable+0xb0>)
 8000b28:	4413      	add	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000b2c:	e023      	b.n	8000b76 <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b36:	d11b      	bne.n	8000b70 <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000b38:	88ba      	ldrh	r2, [r7, #4]
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	6979      	ldr	r1, [r7, #20]
 8000b40:	2001      	movs	r0, #1
 8000b42:	f000 ffd1 	bl	8001ae8 <HAL_FLASH_Program>
 8000b46:	4603      	mov	r3, r0
 8000b48:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000b4a:	7cfb      	ldrb	r3, [r7, #19]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	e014      	b.n	8000b80 <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	1c99      	adds	r1, r3, #2
 8000b5a:	88fa      	ldrh	r2, [r7, #6]
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	2001      	movs	r0, #1
 8000b62:	f000 ffc1 	bl	8001ae8 <HAL_FLASH_Program>
 8000b66:	4603      	mov	r3, r0
 8000b68:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000b6a:	7cfb      	ldrb	r3, [r7, #19]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	e007      	b.n	8000b80 <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3304      	adds	r3, #4
 8000b74:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3d7      	bcc.n	8000b2e <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000b7e:	2380      	movs	r3, #128	; 0x80
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	08008000 	.word	0x08008000
 8000b8c:	0800c000 	.word	0x0800c000
 8000b90:	08007fff 	.word	0x08007fff

08000b94 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	80fb      	strh	r3, [r7, #6]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000baa:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <EE_PageTransfer+0x168>)
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff ff44 	bl	8000a54 <EE_FindValidPage>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000bd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d104      	bne.n	8000be0 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000bd6:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <EE_PageTransfer+0x168>)
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000bde:	e009      	b.n	8000bf4 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000be6:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <EE_PageTransfer+0x16c>)
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000bea:	2302      	movs	r3, #2
 8000bec:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000bee:	e001      	b.n	8000bf4 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000bf0:	23ab      	movs	r3, #171	; 0xab
 8000bf2:	e07e      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000bf4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 ff72 	bl	8001ae8 <HAL_FLASH_Program>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8000c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	e06b      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000c1a:	88ba      	ldrh	r2, [r7, #4]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 8000c26:	4603      	mov	r3, r0
 8000c28:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000c2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8000c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c32:	e05e      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c38:	e027      	b.n	8000c8a <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000c3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c3c:	4a31      	ldr	r2, [pc, #196]	; (8000d04 <EE_PageTransfer+0x170>)
 8000c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c42:	88fa      	ldrh	r2, [r7, #6]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d01d      	beq.n	8000c84 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000c48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <EE_PageTransfer+0x170>)
 8000c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c50:	492d      	ldr	r1, [pc, #180]	; (8000d08 <EE_PageTransfer+0x174>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe40 	bl	80008d8 <EE_ReadVariable>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000c5c:	8c3b      	ldrh	r3, [r7, #32]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d010      	beq.n	8000c84 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <EE_PageTransfer+0x170>)
 8000c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6a:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <EE_PageTransfer+0x174>)
 8000c6c:	8812      	ldrh	r2, [r2, #0]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff35 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 8000c76:	4603      	mov	r3, r0
 8000c78:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c82:	e036      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000c84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c86:	3301      	adds	r3, #1
 8000c88:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	2b13      	cmp	r3, #19
 8000c8e:	d9d4      	bls.n	8000c3a <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000c94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c96:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000ca0:	f107 021c 	add.w	r2, r7, #28
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 f8d2 	bl	8001e54 <HAL_FLASHEx_Erase>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8000cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	e015      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	f04f 0300 	mov.w	r3, #0
 8000cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f000 ff09 	bl	8001ae8 <HAL_FLASH_Program>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8000ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	e002      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cf0:	b29b      	uxth	r3, r3
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3730      	adds	r7, #48	; 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	08008000 	.word	0x08008000
 8000d00:	0800c000 	.word	0x0800c000
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000050 	.word	0x20000050

08000d0c <Send_Bluettoh_Data>:
{
	HAL_UART_Transmit(&huart2,ch,numElements,10);
}

void Send_Bluettoh_Data(uint8_t *ch, size_t numElements)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1,ch,numElements,10);
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	230a      	movs	r3, #10
 8000d1c:	6879      	ldr	r1, [r7, #4]
 8000d1e:	4803      	ldr	r0, [pc, #12]	; (8000d2c <Send_Bluettoh_Data+0x20>)
 8000d20:	f002 fdc1 	bl	80038a6 <HAL_UART_Transmit>
}
 8000d24:	bf00      	nop
 8000d26:	3708      	adds	r7, #8
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	bd80      	pop	{r7, pc}
 8000d2c:	20000090 	.word	0x20000090

08000d30 <IsAlive>:

void IsAlive()
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
  uint8_t data[] = {0};
 8000d36:	2300      	movs	r3, #0
 8000d38:	713b      	strb	r3, [r7, #4]
  Send_Bluettoh_Data(&data,sizeof(data));
 8000d3a:	1d3b      	adds	r3, r7, #4
 8000d3c:	2101      	movs	r1, #1
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff ffe4 	bl	8000d0c <Send_Bluettoh_Data>
}
 8000d44:	bf00      	nop
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}

08000d4c <SetConfigDispenserTime>:

void SetConfigDispenserTime()
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000d52:	2300      	movs	r3, #0
 8000d54:	71fb      	strb	r3, [r7, #7]
 8000d56:	e018      	b.n	8000d8a <SetConfigDispenserTime+0x3e>
  {
    if((EE_WriteVariable(VirtAddVarTab[i],  (uint16_t)bluetooth_rxBuffer[i])) != HAL_OK)
 8000d58:	79fb      	ldrb	r3, [r7, #7]
 8000d5a:	4a10      	ldr	r2, [pc, #64]	; (8000d9c <SetConfigDispenserTime+0x50>)
 8000d5c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000d60:	79fb      	ldrb	r3, [r7, #7]
 8000d62:	490f      	ldr	r1, [pc, #60]	; (8000da0 <SetConfigDispenserTime+0x54>)
 8000d64:	5ccb      	ldrb	r3, [r1, r3]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4619      	mov	r1, r3
 8000d6a:	4610      	mov	r0, r2
 8000d6c:	f7ff fdfe 	bl	800096c <EE_WriteVariable>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d006      	beq.n	8000d84 <SetConfigDispenserTime+0x38>
      {
        uint8_t error[] = {9};
 8000d76:	2309      	movs	r3, #9
 8000d78:	713b      	strb	r3, [r7, #4]
        Send_Bluettoh_Data(&error,sizeof(error));
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	2101      	movs	r1, #1
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff ffc4 	bl	8000d0c <Send_Bluettoh_Data>
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	3301      	adds	r3, #1
 8000d88:	71fb      	strb	r3, [r7, #7]
 8000d8a:	79fb      	ldrb	r3, [r7, #7]
 8000d8c:	2b05      	cmp	r3, #5
 8000d8e:	d9e3      	bls.n	8000d58 <SetConfigDispenserTime+0xc>
      }
  } 
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000000 	.word	0x20000000
 8000da0:	2000005c 	.word	0x2000005c

08000da4 <GetConfigDispenserTime>:

void GetConfigDispenserTime(uint8_t* data)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b084      	sub	sp, #16
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000dac:	2300      	movs	r3, #0
 8000dae:	73fb      	strb	r3, [r7, #15]
 8000db0:	e01c      	b.n	8000dec <GetConfigDispenserTime+0x48>
  {
	  if((EE_ReadVariable(VirtAddVarTab[i],  &VarDataTab[i])) != HAL_OK)
 8000db2:	7bfb      	ldrb	r3, [r7, #15]
 8000db4:	4a11      	ldr	r2, [pc, #68]	; (8000dfc <GetConfigDispenserTime+0x58>)
 8000db6:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000dba:	7bfb      	ldrb	r3, [r7, #15]
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4910      	ldr	r1, [pc, #64]	; (8000e00 <GetConfigDispenserTime+0x5c>)
 8000dc0:	440b      	add	r3, r1
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4610      	mov	r0, r2
 8000dc6:	f7ff fd87 	bl	80008d8 <EE_ReadVariable>
 8000dca:	4603      	mov	r3, r0
 8000dcc:	2b00      	cmp	r3, #0
 8000dce:	d001      	beq.n	8000dd4 <GetConfigDispenserTime+0x30>
	    {
	      uint8_t error[] = {9};
 8000dd0:	2309      	movs	r3, #9
 8000dd2:	733b      	strb	r3, [r7, #12]
	}
    data[i] = (uint8_t) VarDataTab[i];
 8000dd4:	7bfb      	ldrb	r3, [r7, #15]
 8000dd6:	4a0a      	ldr	r2, [pc, #40]	; (8000e00 <GetConfigDispenserTime+0x5c>)
 8000dd8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000ddc:	7bfb      	ldrb	r3, [r7, #15]
 8000dde:	687a      	ldr	r2, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	b2ca      	uxtb	r2, r1
 8000de4:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000de6:	7bfb      	ldrb	r3, [r7, #15]
 8000de8:	3301      	adds	r3, #1
 8000dea:	73fb      	strb	r3, [r7, #15]
 8000dec:	7bfb      	ldrb	r3, [r7, #15]
 8000dee:	2b05      	cmp	r3, #5
 8000df0:	d9df      	bls.n	8000db2 <GetConfigDispenserTime+0xe>
  }

}
 8000df2:	bf00      	nop
 8000df4:	bf00      	nop
 8000df6:	3710      	adds	r7, #16
 8000df8:	46bd      	mov	sp, r7
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	20000064 	.word	0x20000064

08000e04 <UpdateRTC>:

void UpdateRTC()
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
	sDate1.Date = bluetooth_rxBuffer[0];
 8000e08:	4b11      	ldr	r3, [pc, #68]	; (8000e50 <UpdateRTC+0x4c>)
 8000e0a:	781a      	ldrb	r2, [r3, #0]
 8000e0c:	4b11      	ldr	r3, [pc, #68]	; (8000e54 <UpdateRTC+0x50>)
 8000e0e:	709a      	strb	r2, [r3, #2]
	sDate1.Month = bluetooth_rxBuffer[1];
 8000e10:	4b0f      	ldr	r3, [pc, #60]	; (8000e50 <UpdateRTC+0x4c>)
 8000e12:	785a      	ldrb	r2, [r3, #1]
 8000e14:	4b0f      	ldr	r3, [pc, #60]	; (8000e54 <UpdateRTC+0x50>)
 8000e16:	705a      	strb	r2, [r3, #1]
	sDate1.Year = bluetooth_rxBuffer[2];
 8000e18:	4b0d      	ldr	r3, [pc, #52]	; (8000e50 <UpdateRTC+0x4c>)
 8000e1a:	789a      	ldrb	r2, [r3, #2]
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <UpdateRTC+0x50>)
 8000e1e:	70da      	strb	r2, [r3, #3]
	sTime1.Hours = bluetooth_rxBuffer[3];
 8000e20:	4b0b      	ldr	r3, [pc, #44]	; (8000e50 <UpdateRTC+0x4c>)
 8000e22:	78da      	ldrb	r2, [r3, #3]
 8000e24:	4b0c      	ldr	r3, [pc, #48]	; (8000e58 <UpdateRTC+0x54>)
 8000e26:	701a      	strb	r2, [r3, #0]
	sTime1.Minutes = bluetooth_rxBuffer[4];
 8000e28:	4b09      	ldr	r3, [pc, #36]	; (8000e50 <UpdateRTC+0x4c>)
 8000e2a:	791a      	ldrb	r2, [r3, #4]
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	; (8000e58 <UpdateRTC+0x54>)
 8000e2e:	705a      	strb	r2, [r3, #1]
	sTime1.Seconds = 0x00;
 8000e30:	4b09      	ldr	r3, [pc, #36]	; (8000e58 <UpdateRTC+0x54>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	709a      	strb	r2, [r3, #2]
	HAL_RTC_SetTime(&hrtc, &sTime1, RTC_FORMAT_BCD);
 8000e36:	2201      	movs	r2, #1
 8000e38:	4907      	ldr	r1, [pc, #28]	; (8000e58 <UpdateRTC+0x54>)
 8000e3a:	4808      	ldr	r0, [pc, #32]	; (8000e5c <UpdateRTC+0x58>)
 8000e3c:	f002 f8bd 	bl	8002fba <HAL_RTC_SetTime>
	HAL_RTC_SetDate(&hrtc, &sDate1, RTC_FORMAT_BCD);
 8000e40:	2201      	movs	r2, #1
 8000e42:	4904      	ldr	r1, [pc, #16]	; (8000e54 <UpdateRTC+0x50>)
 8000e44:	4805      	ldr	r0, [pc, #20]	; (8000e5c <UpdateRTC+0x58>)
 8000e46:	f002 f9d3 	bl	80031f0 <HAL_RTC_SetDate>
}
 8000e4a:	bf00      	nop
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	2000005c 	.word	0x2000005c
 8000e54:	2000008c 	.word	0x2000008c
 8000e58:	20000138 	.word	0x20000138
 8000e5c:	200000d4 	.word	0x200000d4

08000e60 <GetRTC>:

void GetRTC(uint8_t* data)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]

  HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BCD);
 8000e68:	2201      	movs	r2, #1
 8000e6a:	4915      	ldr	r1, [pc, #84]	; (8000ec0 <GetRTC+0x60>)
 8000e6c:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <GetRTC+0x64>)
 8000e6e:	f002 f961 	bl	8003134 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BCD);
 8000e72:	2201      	movs	r2, #1
 8000e74:	4914      	ldr	r1, [pc, #80]	; (8000ec8 <GetRTC+0x68>)
 8000e76:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <GetRTC+0x64>)
 8000e78:	f002 fa61 	bl	800333e <HAL_RTC_GetDate>

  data[0] = sDate1.Date;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	; (8000ec8 <GetRTC+0x68>)
 8000e7e:	789a      	ldrb	r2, [r3, #2]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	701a      	strb	r2, [r3, #0]
  data[1] = sDate1.Month;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	3301      	adds	r3, #1
 8000e88:	4a0f      	ldr	r2, [pc, #60]	; (8000ec8 <GetRTC+0x68>)
 8000e8a:	7852      	ldrb	r2, [r2, #1]
 8000e8c:	701a      	strb	r2, [r3, #0]
  data[2] = sDate1.Year;
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	3302      	adds	r3, #2
 8000e92:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <GetRTC+0x68>)
 8000e94:	78d2      	ldrb	r2, [r2, #3]
 8000e96:	701a      	strb	r2, [r3, #0]
  data[3] = sTime1.Hours;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	3303      	adds	r3, #3
 8000e9c:	4a08      	ldr	r2, [pc, #32]	; (8000ec0 <GetRTC+0x60>)
 8000e9e:	7812      	ldrb	r2, [r2, #0]
 8000ea0:	701a      	strb	r2, [r3, #0]
  data[4] = sTime1.Minutes;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3304      	adds	r3, #4
 8000ea6:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <GetRTC+0x60>)
 8000ea8:	7852      	ldrb	r2, [r2, #1]
 8000eaa:	701a      	strb	r2, [r3, #0]
  data[5] = sTime1.Seconds;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	3305      	adds	r3, #5
 8000eb0:	4a03      	ldr	r2, [pc, #12]	; (8000ec0 <GetRTC+0x60>)
 8000eb2:	7892      	ldrb	r2, [r2, #2]
 8000eb4:	701a      	strb	r2, [r3, #0]

}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	20000138 	.word	0x20000138
 8000ec4:	200000d4 	.word	0x200000d4
 8000ec8:	2000008c 	.word	0x2000008c

08000ecc <Command>:

void Command()
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
	uint8_t data[RXBUFFERSIZE] = {0};
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	603b      	str	r3, [r7, #0]
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	80bb      	strh	r3, [r7, #4]
  switch (bluetooth_rxBuffer[5])
 8000eda:	4b18      	ldr	r3, [pc, #96]	; (8000f3c <Command+0x70>)
 8000edc:	795b      	ldrb	r3, [r3, #5]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	2b04      	cmp	r3, #4
 8000ee2:	d820      	bhi.n	8000f26 <Command+0x5a>
 8000ee4:	a201      	add	r2, pc, #4	; (adr r2, 8000eec <Command+0x20>)
 8000ee6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000eea:	bf00      	nop
 8000eec:	08000f01 	.word	0x08000f01
 8000ef0:	08000f07 	.word	0x08000f07
 8000ef4:	08000f0d 	.word	0x08000f0d
 8000ef8:	08000f17 	.word	0x08000f17
 8000efc:	08000f1d 	.word	0x08000f1d
  {
  case 0x01:
    IsAlive();
 8000f00:	f7ff ff16 	bl	8000d30 <IsAlive>
    break;
 8000f04:	e010      	b.n	8000f28 <Command+0x5c>
  case 0x02:
    SetConfigDispenserTime();
 8000f06:	f7ff ff21 	bl	8000d4c <SetConfigDispenserTime>
    break;
 8000f0a:	e00d      	b.n	8000f28 <Command+0x5c>
  case 0x03:
    GetConfigDispenserTime(data);
 8000f0c:	463b      	mov	r3, r7
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ff48 	bl	8000da4 <GetConfigDispenserTime>
    break;
 8000f14:	e008      	b.n	8000f28 <Command+0x5c>
  case 0x04:
    UpdateRTC();
 8000f16:	f7ff ff75 	bl	8000e04 <UpdateRTC>
    break;
 8000f1a:	e005      	b.n	8000f28 <Command+0x5c>
  case 0x05:
    GetRTC(data);
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff9e 	bl	8000e60 <GetRTC>
    break;
 8000f24:	e000      	b.n	8000f28 <Command+0x5c>
  default:
    break;
 8000f26:	bf00      	nop
  }

  Send_Bluettoh_Data(&data,sizeof(data));
 8000f28:	463b      	mov	r3, r7
 8000f2a:	2106      	movs	r1, #6
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f7ff feed 	bl	8000d0c <Send_Bluettoh_Data>

}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	2000005c 	.word	0x2000005c

08000f40 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1){
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a0a      	ldr	r2, [pc, #40]	; (8000f78 <HAL_UART_RxCpltCallback+0x38>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d10d      	bne.n	8000f6e <HAL_UART_RxCpltCallback+0x2e>
    memcpy(bluetooth_rxBuffer, UART1_rxBuffer, RXBUFFERSIZE * sizeof(uint8_t));
 8000f52:	4b0a      	ldr	r3, [pc, #40]	; (8000f7c <HAL_UART_RxCpltCallback+0x3c>)
 8000f54:	4a0a      	ldr	r2, [pc, #40]	; (8000f80 <HAL_UART_RxCpltCallback+0x40>)
 8000f56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000f5a:	6018      	str	r0, [r3, #0]
 8000f5c:	3304      	adds	r3, #4
 8000f5e:	8019      	strh	r1, [r3, #0]
    Command();
 8000f60:	f7ff ffb4 	bl	8000ecc <Command>
    HAL_UART_Receive_IT(&huart1,UART1_rxBuffer,RXBUFFERSIZE);
 8000f64:	2206      	movs	r2, #6
 8000f66:	4906      	ldr	r1, [pc, #24]	; (8000f80 <HAL_UART_RxCpltCallback+0x40>)
 8000f68:	4806      	ldr	r0, [pc, #24]	; (8000f84 <HAL_UART_RxCpltCallback+0x44>)
 8000f6a:	f002 fd2e 	bl	80039ca <HAL_UART_Receive_IT>
  }
}
 8000f6e:	bf00      	nop
 8000f70:	3708      	adds	r7, #8
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	40011000 	.word	0x40011000
 8000f7c:	2000005c 	.word	0x2000005c
 8000f80:	20000054 	.word	0x20000054
 8000f84:	20000090 	.word	0x20000090

08000f88 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b08a      	sub	sp, #40	; 0x28
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]

	uint8_t dispenserTime[RXBUFFERSIZE] = {0};
 8000f90:	2300      	movs	r3, #0
 8000f92:	61fb      	str	r3, [r7, #28]
 8000f94:	2300      	movs	r3, #0
 8000f96:	843b      	strh	r3, [r7, #32]
	GetConfigDispenserTime(dispenserTime);
 8000f98:	f107 031c 	add.w	r3, r7, #28
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	f7ff ff01 	bl	8000da4 <GetConfigDispenserTime>

	uint8_t rtcTime[RXBUFFERSIZE] = {0};
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	617b      	str	r3, [r7, #20]
 8000fa6:	2300      	movs	r3, #0
 8000fa8:	833b      	strh	r3, [r7, #24]
	GetRTC(rtcTime);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f7ff ff56 	bl	8000e60 <GetRTC>

	bool arrayEqual = true;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000fba:	2300      	movs	r3, #0
 8000fbc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8000fc0:	e01f      	b.n	8001002 <HAL_RTC_AlarmAEventCallback+0x7a>
	{
		uint8_t aux1 = dispenserTime[i];
 8000fc2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fc6:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fca:	4413      	add	r3, r2
 8000fcc:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000fd0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
		uint8_t aux2 = rtcTime[i];
 8000fd4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000fd8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8000fdc:	4413      	add	r3, r2
 8000fde:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000fe2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		if(aux1 != aux2)
 8000fe6:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8000fea:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8000fee:	429a      	cmp	r2, r3
 8000ff0:	d002      	beq.n	8000ff8 <HAL_RTC_AlarmAEventCallback+0x70>
		{
			arrayEqual = false;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000ff8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001002:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001006:	2b05      	cmp	r3, #5
 8001008:	d9db      	bls.n	8000fc2 <HAL_RTC_AlarmAEventCallback+0x3a>
		}
	}

	if(arrayEqual)
 800100a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800100e:	2b00      	cmp	r3, #0
 8001010:	d009      	beq.n	8001026 <HAL_RTC_AlarmAEventCallback+0x9e>
	{
		uint8_t initDispenserRotation[RXBUFFERSIZE]	= {0};
 8001012:	2300      	movs	r3, #0
 8001014:	60fb      	str	r3, [r7, #12]
 8001016:	2300      	movs	r3, #0
 8001018:	823b      	strh	r3, [r7, #16]
		Send_Bluettoh_Data(&initDispenserRotation,sizeof(initDispenserRotation));
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2106      	movs	r1, #6
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fe73 	bl	8000d0c <Send_Bluettoh_Data>
	}



}
 8001026:	bf00      	nop
 8001028:	3728      	adds	r7, #40	; 0x28
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
	...

08001030 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001036:	f000 fb41 	bl	80016bc <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_FLASH_Unlock();
 800103a:	f000 fda9 	bl	8001b90 <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 800103e:	f7ff fa45 	bl	80004cc <EE_Init>
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	d006      	beq.n	8001056 <main+0x26>
  {
    uint8_t data[] = {9};
 8001048:	2309      	movs	r3, #9
 800104a:	713b      	strb	r3, [r7, #4]
    Send_Bluettoh_Data(&data,sizeof(data));
 800104c:	1d3b      	adds	r3, r7, #4
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f7ff fe5b 	bl	8000d0c <Send_Bluettoh_Data>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001056:	f000 f813 	bl	8001080 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800105a:	f000 f961 	bl	8001320 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800105e:	f000 f935 	bl	80012cc <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8001062:	f000 f909 	bl	8001278 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8001066:	f000 f879 	bl	800115c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,UART1_rxBuffer,RXBUFFERSIZE);
 800106a:	2206      	movs	r2, #6
 800106c:	4902      	ldr	r1, [pc, #8]	; (8001078 <main+0x48>)
 800106e:	4803      	ldr	r0, [pc, #12]	; (800107c <main+0x4c>)
 8001070:	f002 fcab 	bl	80039ca <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001074:	e7fe      	b.n	8001074 <main+0x44>
 8001076:	bf00      	nop
 8001078:	20000054 	.word	0x20000054
 800107c:	20000090 	.word	0x20000090

08001080 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	b094      	sub	sp, #80	; 0x50
 8001084:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001086:	f107 0320 	add.w	r3, r7, #32
 800108a:	2230      	movs	r2, #48	; 0x30
 800108c:	2100      	movs	r1, #0
 800108e:	4618      	mov	r0, r3
 8001090:	f003 fba8 	bl	80047e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2200      	movs	r2, #0
 800109a:	601a      	str	r2, [r3, #0]
 800109c:	605a      	str	r2, [r3, #4]
 800109e:	609a      	str	r2, [r3, #8]
 80010a0:	60da      	str	r2, [r3, #12]
 80010a2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010a4:	2300      	movs	r3, #0
 80010a6:	60bb      	str	r3, [r7, #8]
 80010a8:	4b2a      	ldr	r3, [pc, #168]	; (8001154 <SystemClock_Config+0xd4>)
 80010aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ac:	4a29      	ldr	r2, [pc, #164]	; (8001154 <SystemClock_Config+0xd4>)
 80010ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010b2:	6413      	str	r3, [r2, #64]	; 0x40
 80010b4:	4b27      	ldr	r3, [pc, #156]	; (8001154 <SystemClock_Config+0xd4>)
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010bc:	60bb      	str	r3, [r7, #8]
 80010be:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010c0:	2300      	movs	r3, #0
 80010c2:	607b      	str	r3, [r7, #4]
 80010c4:	4b24      	ldr	r3, [pc, #144]	; (8001158 <SystemClock_Config+0xd8>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010cc:	4a22      	ldr	r2, [pc, #136]	; (8001158 <SystemClock_Config+0xd8>)
 80010ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010d2:	6013      	str	r3, [r2, #0]
 80010d4:	4b20      	ldr	r3, [pc, #128]	; (8001158 <SystemClock_Config+0xd8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010dc:	607b      	str	r3, [r7, #4]
 80010de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80010e0:	230a      	movs	r3, #10
 80010e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010e4:	2301      	movs	r3, #1
 80010e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010e8:	2310      	movs	r3, #16
 80010ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010ec:	2301      	movs	r3, #1
 80010ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f0:	2302      	movs	r3, #2
 80010f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010f4:	2300      	movs	r3, #0
 80010f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010f8:	2310      	movs	r3, #16
 80010fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001100:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001102:	2304      	movs	r3, #4
 8001104:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001106:	2307      	movs	r3, #7
 8001108:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800110a:	f107 0320 	add.w	r3, r7, #32
 800110e:	4618      	mov	r0, r3
 8001110:	f001 f960 	bl	80023d4 <HAL_RCC_OscConfig>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800111a:	f000 f96f 	bl	80013fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800111e:	230f      	movs	r3, #15
 8001120:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001122:	2302      	movs	r3, #2
 8001124:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001126:	2300      	movs	r3, #0
 8001128:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800112a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001134:	f107 030c 	add.w	r3, r7, #12
 8001138:	2102      	movs	r1, #2
 800113a:	4618      	mov	r0, r3
 800113c:	f001 fbc2 	bl	80028c4 <HAL_RCC_ClockConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001146:	f000 f959 	bl	80013fc <Error_Handler>
  }
}
 800114a:	bf00      	nop
 800114c:	3750      	adds	r7, #80	; 0x50
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	40007000 	.word	0x40007000

0800115c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b090      	sub	sp, #64	; 0x40
 8001160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001162:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001166:	2200      	movs	r2, #0
 8001168:	601a      	str	r2, [r3, #0]
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	609a      	str	r2, [r3, #8]
 800116e:	60da      	str	r2, [r3, #12]
 8001170:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001172:	2300      	movs	r3, #0
 8001174:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8001176:	463b      	mov	r3, r7
 8001178:	2228      	movs	r2, #40	; 0x28
 800117a:	2100      	movs	r1, #0
 800117c:	4618      	mov	r0, r3
 800117e:	f003 fb31 	bl	80047e4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001182:	4b3b      	ldr	r3, [pc, #236]	; (8001270 <MX_RTC_Init+0x114>)
 8001184:	4a3b      	ldr	r2, [pc, #236]	; (8001274 <MX_RTC_Init+0x118>)
 8001186:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001188:	4b39      	ldr	r3, [pc, #228]	; (8001270 <MX_RTC_Init+0x114>)
 800118a:	2200      	movs	r2, #0
 800118c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800118e:	4b38      	ldr	r3, [pc, #224]	; (8001270 <MX_RTC_Init+0x114>)
 8001190:	227f      	movs	r2, #127	; 0x7f
 8001192:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001194:	4b36      	ldr	r3, [pc, #216]	; (8001270 <MX_RTC_Init+0x114>)
 8001196:	22ff      	movs	r2, #255	; 0xff
 8001198:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800119a:	4b35      	ldr	r3, [pc, #212]	; (8001270 <MX_RTC_Init+0x114>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011a0:	4b33      	ldr	r3, [pc, #204]	; (8001270 <MX_RTC_Init+0x114>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011a6:	4b32      	ldr	r3, [pc, #200]	; (8001270 <MX_RTC_Init+0x114>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011ac:	4830      	ldr	r0, [pc, #192]	; (8001270 <MX_RTC_Init+0x114>)
 80011ae:	f001 fe73 	bl	8002e98 <HAL_RTC_Init>
 80011b2:	4603      	mov	r3, r0
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d001      	beq.n	80011bc <MX_RTC_Init+0x60>
  {
    Error_Handler();
 80011b8:	f000 f920 	bl	80013fc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 80011bc:	2313      	movs	r3, #19
 80011be:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x10;
 80011c2:	2310      	movs	r3, #16
 80011c4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011d2:	2300      	movs	r3, #0
 80011d4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011da:	2201      	movs	r2, #1
 80011dc:	4619      	mov	r1, r3
 80011de:	4824      	ldr	r0, [pc, #144]	; (8001270 <MX_RTC_Init+0x114>)
 80011e0:	f001 feeb 	bl	8002fba <HAL_RTC_SetTime>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80011ea:	f000 f907 	bl	80013fc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80011ee:	2306      	movs	r3, #6
 80011f0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_APRIL;
 80011f4:	2304      	movs	r3, #4
 80011f6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x23;
 80011fa:	2323      	movs	r3, #35	; 0x23
 80011fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8001200:	2300      	movs	r3, #0
 8001202:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001206:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800120a:	2201      	movs	r2, #1
 800120c:	4619      	mov	r1, r3
 800120e:	4818      	ldr	r0, [pc, #96]	; (8001270 <MX_RTC_Init+0x114>)
 8001210:	f001 ffee 	bl	80031f0 <HAL_RTC_SetDate>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 800121a:	f000 f8ef 	bl	80013fc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800121e:	2300      	movs	r3, #0
 8001220:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001222:	2300      	movs	r3, #0
 8001224:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8001226:	2301      	movs	r3, #1
 8001228:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800122a:	2300      	movs	r3, #0
 800122c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800122e:	2300      	movs	r3, #0
 8001230:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001232:	2300      	movs	r3, #0
 8001234:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8001236:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800123a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800123c:	2300      	movs	r3, #0
 800123e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001240:	2300      	movs	r3, #0
 8001242:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001244:	2301      	movs	r3, #1
 8001246:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800124a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800124e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	4806      	ldr	r0, [pc, #24]	; (8001270 <MX_RTC_Init+0x114>)
 8001258:	f002 f8c0 	bl	80033dc <HAL_RTC_SetAlarm_IT>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001262:	f000 f8cb 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001266:	bf00      	nop
 8001268:	3740      	adds	r7, #64	; 0x40
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	200000d4 	.word	0x200000d4
 8001274:	40002800 	.word	0x40002800

08001278 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800127c:	4b11      	ldr	r3, [pc, #68]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 800127e:	4a12      	ldr	r2, [pc, #72]	; (80012c8 <MX_USART1_UART_Init+0x50>)
 8001280:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001282:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 8001284:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001288:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128a:	4b0e      	ldr	r3, [pc, #56]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001290:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 8001292:	2200      	movs	r2, #0
 8001294:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800129c:	4b09      	ldr	r3, [pc, #36]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 800129e:	220c      	movs	r2, #12
 80012a0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a2:	4b08      	ldr	r3, [pc, #32]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012a8:	4b06      	ldr	r3, [pc, #24]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012ae:	4805      	ldr	r0, [pc, #20]	; (80012c4 <MX_USART1_UART_Init+0x4c>)
 80012b0:	f002 faac 	bl	800380c <HAL_UART_Init>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012ba:	f000 f89f 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000090 	.word	0x20000090
 80012c8:	40011000 	.word	0x40011000

080012cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012d0:	4b11      	ldr	r3, [pc, #68]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d2:	4a12      	ldr	r2, [pc, #72]	; (800131c <MX_USART2_UART_Init+0x50>)
 80012d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012d6:	4b10      	ldr	r3, [pc, #64]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80012de:	4b0e      	ldr	r3, [pc, #56]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80012ea:	4b0b      	ldr	r3, [pc, #44]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f2:	220c      	movs	r2, #12
 80012f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012f6:	4b08      	ldr	r3, [pc, #32]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80012fc:	4b06      	ldr	r3, [pc, #24]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 80012fe:	2200      	movs	r2, #0
 8001300:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001302:	4805      	ldr	r0, [pc, #20]	; (8001318 <MX_USART2_UART_Init+0x4c>)
 8001304:	f002 fa82 	bl	800380c <HAL_UART_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800130e:	f000 f875 	bl	80013fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	200000f4 	.word	0x200000f4
 800131c:	40004400 	.word	0x40004400

08001320 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b08a      	sub	sp, #40	; 0x28
 8001324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]
 8001334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	613b      	str	r3, [r7, #16]
 800133a:	4b2d      	ldr	r3, [pc, #180]	; (80013f0 <MX_GPIO_Init+0xd0>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	4a2c      	ldr	r2, [pc, #176]	; (80013f0 <MX_GPIO_Init+0xd0>)
 8001340:	f043 0304 	orr.w	r3, r3, #4
 8001344:	6313      	str	r3, [r2, #48]	; 0x30
 8001346:	4b2a      	ldr	r3, [pc, #168]	; (80013f0 <MX_GPIO_Init+0xd0>)
 8001348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134a:	f003 0304 	and.w	r3, r3, #4
 800134e:	613b      	str	r3, [r7, #16]
 8001350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <MX_GPIO_Init+0xd0>)
 8001358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135a:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <MX_GPIO_Init+0xd0>)
 800135c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001360:	6313      	str	r3, [r2, #48]	; 0x30
 8001362:	4b23      	ldr	r3, [pc, #140]	; (80013f0 <MX_GPIO_Init+0xd0>)
 8001364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800136a:	60fb      	str	r3, [r7, #12]
 800136c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	4b1f      	ldr	r3, [pc, #124]	; (80013f0 <MX_GPIO_Init+0xd0>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a1e      	ldr	r2, [pc, #120]	; (80013f0 <MX_GPIO_Init+0xd0>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b1c      	ldr	r3, [pc, #112]	; (80013f0 <MX_GPIO_Init+0xd0>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	60bb      	str	r3, [r7, #8]
 8001388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	607b      	str	r3, [r7, #4]
 800138e:	4b18      	ldr	r3, [pc, #96]	; (80013f0 <MX_GPIO_Init+0xd0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001392:	4a17      	ldr	r2, [pc, #92]	; (80013f0 <MX_GPIO_Init+0xd0>)
 8001394:	f043 0302 	orr.w	r3, r3, #2
 8001398:	6313      	str	r3, [r2, #48]	; 0x30
 800139a:	4b15      	ldr	r3, [pc, #84]	; (80013f0 <MX_GPIO_Init+0xd0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	607b      	str	r3, [r7, #4]
 80013a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013a6:	2200      	movs	r2, #0
 80013a8:	2120      	movs	r1, #32
 80013aa:	4812      	ldr	r0, [pc, #72]	; (80013f4 <MX_GPIO_Init+0xd4>)
 80013ac:	f000 fff8 	bl	80023a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80013b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80013b6:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80013ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 0314 	add.w	r3, r7, #20
 80013c4:	4619      	mov	r1, r3
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MX_GPIO_Init+0xd8>)
 80013c8:	f000 fe66 	bl	8002098 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013cc:	2320      	movs	r3, #32
 80013ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d0:	2301      	movs	r3, #1
 80013d2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4804      	ldr	r0, [pc, #16]	; (80013f4 <MX_GPIO_Init+0xd4>)
 80013e4:	f000 fe58 	bl	8002098 <HAL_GPIO_Init>

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	; 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40023800 	.word	0x40023800
 80013f4:	40020000 	.word	0x40020000
 80013f8:	40020800 	.word	0x40020800

080013fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001400:	b672      	cpsid	i
}
 8001402:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001404:	e7fe      	b.n	8001404 <Error_Handler+0x8>
	...

08001408 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	4b10      	ldr	r3, [pc, #64]	; (8001454 <HAL_MspInit+0x4c>)
 8001414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001416:	4a0f      	ldr	r2, [pc, #60]	; (8001454 <HAL_MspInit+0x4c>)
 8001418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800141c:	6453      	str	r3, [r2, #68]	; 0x44
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <HAL_MspInit+0x4c>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	603b      	str	r3, [r7, #0]
 800142e:	4b09      	ldr	r3, [pc, #36]	; (8001454 <HAL_MspInit+0x4c>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a08      	ldr	r2, [pc, #32]	; (8001454 <HAL_MspInit+0x4c>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <HAL_MspInit+0x4c>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	603b      	str	r3, [r7, #0]
 8001444:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001446:	2007      	movs	r0, #7
 8001448:	f000 fa7a 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40023800 	.word	0x40023800

08001458 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a10      	ldr	r2, [pc, #64]	; (80014b8 <HAL_RTC_MspInit+0x60>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d119      	bne.n	80014ae <HAL_RTC_MspInit+0x56>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800147a:	2302      	movs	r3, #2
 800147c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800147e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001482:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001484:	f107 030c 	add.w	r3, r7, #12
 8001488:	4618      	mov	r0, r3
 800148a:	f001 fc17 	bl	8002cbc <HAL_RCCEx_PeriphCLKConfig>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001494:	f7ff ffb2 	bl	80013fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001498:	4b08      	ldr	r3, [pc, #32]	; (80014bc <HAL_RTC_MspInit+0x64>)
 800149a:	2201      	movs	r2, #1
 800149c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800149e:	2200      	movs	r2, #0
 80014a0:	2100      	movs	r1, #0
 80014a2:	2029      	movs	r0, #41	; 0x29
 80014a4:	f000 fa57 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80014a8:	2029      	movs	r0, #41	; 0x29
 80014aa:	f000 fa70 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014ae:	bf00      	nop
 80014b0:	3720      	adds	r7, #32
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40002800 	.word	0x40002800
 80014bc:	42470e3c 	.word	0x42470e3c

080014c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b08c      	sub	sp, #48	; 0x30
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c8:	f107 031c 	add.w	r3, r7, #28
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
 80014d0:	605a      	str	r2, [r3, #4]
 80014d2:	609a      	str	r2, [r3, #8]
 80014d4:	60da      	str	r2, [r3, #12]
 80014d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a36      	ldr	r2, [pc, #216]	; (80015b8 <HAL_UART_MspInit+0xf8>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d135      	bne.n	800154e <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	61bb      	str	r3, [r7, #24]
 80014e6:	4b35      	ldr	r3, [pc, #212]	; (80015bc <HAL_UART_MspInit+0xfc>)
 80014e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ea:	4a34      	ldr	r2, [pc, #208]	; (80015bc <HAL_UART_MspInit+0xfc>)
 80014ec:	f043 0310 	orr.w	r3, r3, #16
 80014f0:	6453      	str	r3, [r2, #68]	; 0x44
 80014f2:	4b32      	ldr	r3, [pc, #200]	; (80015bc <HAL_UART_MspInit+0xfc>)
 80014f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f6:	f003 0310 	and.w	r3, r3, #16
 80014fa:	61bb      	str	r3, [r7, #24]
 80014fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014fe:	2300      	movs	r3, #0
 8001500:	617b      	str	r3, [r7, #20]
 8001502:	4b2e      	ldr	r3, [pc, #184]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a2d      	ldr	r2, [pc, #180]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001508:	f043 0301 	orr.w	r3, r3, #1
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800151a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800151e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001524:	2300      	movs	r3, #0
 8001526:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001528:	2303      	movs	r3, #3
 800152a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800152c:	2307      	movs	r3, #7
 800152e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	f107 031c 	add.w	r3, r7, #28
 8001534:	4619      	mov	r1, r3
 8001536:	4822      	ldr	r0, [pc, #136]	; (80015c0 <HAL_UART_MspInit+0x100>)
 8001538:	f000 fdae 	bl	8002098 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800153c:	2200      	movs	r2, #0
 800153e:	2100      	movs	r1, #0
 8001540:	2025      	movs	r0, #37	; 0x25
 8001542:	f000 fa08 	bl	8001956 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001546:	2025      	movs	r0, #37	; 0x25
 8001548:	f000 fa21 	bl	800198e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800154c:	e030      	b.n	80015b0 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4a1c      	ldr	r2, [pc, #112]	; (80015c4 <HAL_UART_MspInit+0x104>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d12b      	bne.n	80015b0 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	613b      	str	r3, [r7, #16]
 800155c:	4b17      	ldr	r3, [pc, #92]	; (80015bc <HAL_UART_MspInit+0xfc>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001560:	4a16      	ldr	r2, [pc, #88]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001562:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001566:	6413      	str	r3, [r2, #64]	; 0x40
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_UART_MspInit+0xfc>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001570:	613b      	str	r3, [r7, #16]
 8001572:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
 8001578:	4b10      	ldr	r3, [pc, #64]	; (80015bc <HAL_UART_MspInit+0xfc>)
 800157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157c:	4a0f      	ldr	r2, [pc, #60]	; (80015bc <HAL_UART_MspInit+0xfc>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	6313      	str	r3, [r2, #48]	; 0x30
 8001584:	4b0d      	ldr	r3, [pc, #52]	; (80015bc <HAL_UART_MspInit+0xfc>)
 8001586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60fb      	str	r3, [r7, #12]
 800158e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001590:	230c      	movs	r3, #12
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a0:	2307      	movs	r3, #7
 80015a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 031c 	add.w	r3, r7, #28
 80015a8:	4619      	mov	r1, r3
 80015aa:	4805      	ldr	r0, [pc, #20]	; (80015c0 <HAL_UART_MspInit+0x100>)
 80015ac:	f000 fd74 	bl	8002098 <HAL_GPIO_Init>
}
 80015b0:	bf00      	nop
 80015b2:	3730      	adds	r7, #48	; 0x30
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}
 80015b8:	40011000 	.word	0x40011000
 80015bc:	40023800 	.word	0x40023800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40004400 	.word	0x40004400

080015c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015cc:	e7fe      	b.n	80015cc <NMI_Handler+0x4>

080015ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015d2:	e7fe      	b.n	80015d2 <HardFault_Handler+0x4>

080015d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015d8:	e7fe      	b.n	80015d8 <MemManage_Handler+0x4>

080015da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015de:	e7fe      	b.n	80015de <BusFault_Handler+0x4>

080015e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015e4:	e7fe      	b.n	80015e4 <UsageFault_Handler+0x4>

080015e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015e6:	b480      	push	{r7}
 80015e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015ea:	bf00      	nop
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015f8:	bf00      	nop
 80015fa:	46bd      	mov	sp, r7
 80015fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001600:	4770      	bx	lr

08001602 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160e:	4770      	bx	lr

08001610 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001614:	f000 f8a4 	bl	8001760 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	bd80      	pop	{r7, pc}

0800161c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001620:	4802      	ldr	r0, [pc, #8]	; (800162c <USART1_IRQHandler+0x10>)
 8001622:	f002 fa03 	bl	8003a2c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}
 800162a:	bf00      	nop
 800162c:	20000090 	.word	0x20000090

08001630 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001634:	4802      	ldr	r0, [pc, #8]	; (8001640 <RTC_Alarm_IRQHandler+0x10>)
 8001636:	f002 f809 	bl	800364c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	bd80      	pop	{r7, pc}
 800163e:	bf00      	nop
 8001640:	200000d4 	.word	0x200000d4

08001644 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001648:	4b06      	ldr	r3, [pc, #24]	; (8001664 <SystemInit+0x20>)
 800164a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800164e:	4a05      	ldr	r2, [pc, #20]	; (8001664 <SystemInit+0x20>)
 8001650:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001654:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	e000ed00 	.word	0xe000ed00

08001668 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001668:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016a0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800166c:	480d      	ldr	r0, [pc, #52]	; (80016a4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800166e:	490e      	ldr	r1, [pc, #56]	; (80016a8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001670:	4a0e      	ldr	r2, [pc, #56]	; (80016ac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001672:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001674:	e002      	b.n	800167c <LoopCopyDataInit>

08001676 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001676:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001678:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800167a:	3304      	adds	r3, #4

0800167c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800167c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800167e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001680:	d3f9      	bcc.n	8001676 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001682:	4a0b      	ldr	r2, [pc, #44]	; (80016b0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001684:	4c0b      	ldr	r4, [pc, #44]	; (80016b4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001686:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001688:	e001      	b.n	800168e <LoopFillZerobss>

0800168a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800168a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800168c:	3204      	adds	r2, #4

0800168e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800168e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001690:	d3fb      	bcc.n	800168a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001692:	f7ff ffd7 	bl	8001644 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001696:	f003 f881 	bl	800479c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800169a:	f7ff fcc9 	bl	8001030 <main>
  bx  lr    
 800169e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80016a0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80016a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016a8:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 80016ac:	08004834 	.word	0x08004834
  ldr r2, =_sbss
 80016b0:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 80016b4:	20000170 	.word	0x20000170

080016b8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016b8:	e7fe      	b.n	80016b8 <ADC_IRQHandler>
	...

080016bc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016c0:	4b0e      	ldr	r3, [pc, #56]	; (80016fc <HAL_Init+0x40>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a0d      	ldr	r2, [pc, #52]	; (80016fc <HAL_Init+0x40>)
 80016c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016cc:	4b0b      	ldr	r3, [pc, #44]	; (80016fc <HAL_Init+0x40>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a0a      	ldr	r2, [pc, #40]	; (80016fc <HAL_Init+0x40>)
 80016d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80016d6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016d8:	4b08      	ldr	r3, [pc, #32]	; (80016fc <HAL_Init+0x40>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a07      	ldr	r2, [pc, #28]	; (80016fc <HAL_Init+0x40>)
 80016de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e4:	2003      	movs	r0, #3
 80016e6:	f000 f92b 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016ea:	2000      	movs	r0, #0
 80016ec:	f000 f808 	bl	8001700 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016f0:	f7ff fe8a 	bl	8001408 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	bd80      	pop	{r7, pc}
 80016fa:	bf00      	nop
 80016fc:	40023c00 	.word	0x40023c00

08001700 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001708:	4b12      	ldr	r3, [pc, #72]	; (8001754 <HAL_InitTick+0x54>)
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	4b12      	ldr	r3, [pc, #72]	; (8001758 <HAL_InitTick+0x58>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	4619      	mov	r1, r3
 8001712:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001716:	fbb3 f3f1 	udiv	r3, r3, r1
 800171a:	fbb2 f3f3 	udiv	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f000 f943 	bl	80019aa <HAL_SYSTICK_Config>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e00e      	b.n	800174c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2b0f      	cmp	r3, #15
 8001732:	d80a      	bhi.n	800174a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001734:	2200      	movs	r2, #0
 8001736:	6879      	ldr	r1, [r7, #4]
 8001738:	f04f 30ff 	mov.w	r0, #4294967295
 800173c:	f000 f90b 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001740:	4a06      	ldr	r2, [pc, #24]	; (800175c <HAL_InitTick+0x5c>)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001746:	2300      	movs	r3, #0
 8001748:	e000      	b.n	800174c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800174a:	2301      	movs	r3, #1
}
 800174c:	4618      	mov	r0, r3
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000028 	.word	0x20000028
 8001758:	20000030 	.word	0x20000030
 800175c:	2000002c 	.word	0x2000002c

08001760 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001764:	4b06      	ldr	r3, [pc, #24]	; (8001780 <HAL_IncTick+0x20>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	4b06      	ldr	r3, [pc, #24]	; (8001784 <HAL_IncTick+0x24>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4413      	add	r3, r2
 8001770:	4a04      	ldr	r2, [pc, #16]	; (8001784 <HAL_IncTick+0x24>)
 8001772:	6013      	str	r3, [r2, #0]
}
 8001774:	bf00      	nop
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	20000030 	.word	0x20000030
 8001784:	2000014c 	.word	0x2000014c

08001788 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001788:	b480      	push	{r7}
 800178a:	af00      	add	r7, sp, #0
  return uwTick;
 800178c:	4b03      	ldr	r3, [pc, #12]	; (800179c <HAL_GetTick+0x14>)
 800178e:	681b      	ldr	r3, [r3, #0]
}
 8001790:	4618      	mov	r0, r3
 8001792:	46bd      	mov	sp, r7
 8001794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001798:	4770      	bx	lr
 800179a:	bf00      	nop
 800179c:	2000014c 	.word	0x2000014c

080017a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017a0:	b480      	push	{r7}
 80017a2:	b085      	sub	sp, #20
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017b0:	4b0c      	ldr	r3, [pc, #48]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017b2:	68db      	ldr	r3, [r3, #12]
 80017b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017b6:	68ba      	ldr	r2, [r7, #8]
 80017b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017bc:	4013      	ands	r3, r2
 80017be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017d2:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <__NVIC_SetPriorityGrouping+0x44>)
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	60d3      	str	r3, [r2, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	e000ed00 	.word	0xe000ed00

080017e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <__NVIC_GetPriorityGrouping+0x18>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	0a1b      	lsrs	r3, r3, #8
 80017f2:	f003 0307 	and.w	r3, r3, #7
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	e000ed00 	.word	0xe000ed00

08001804 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800180e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001812:	2b00      	cmp	r3, #0
 8001814:	db0b      	blt.n	800182e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001816:	79fb      	ldrb	r3, [r7, #7]
 8001818:	f003 021f 	and.w	r2, r3, #31
 800181c:	4907      	ldr	r1, [pc, #28]	; (800183c <__NVIC_EnableIRQ+0x38>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	095b      	lsrs	r3, r3, #5
 8001824:	2001      	movs	r0, #1
 8001826:	fa00 f202 	lsl.w	r2, r0, r2
 800182a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800182e:	bf00      	nop
 8001830:	370c      	adds	r7, #12
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	e000e100 	.word	0xe000e100

08001840 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
         );
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff29 	bl	80017a0 <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff3e 	bl	80017e8 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	4603      	mov	r3, r0
 8001996:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff ff31 	bl	8001804 <__NVIC_EnableIRQ>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019aa:	b580      	push	{r7, lr}
 80019ac:	b082      	sub	sp, #8
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f7ff ffa2 	bl	80018fc <SysTick_Config>
 80019b8:	4603      	mov	r3, r0
}
 80019ba:	4618      	mov	r0, r3
 80019bc:	3708      	adds	r7, #8
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b084      	sub	sp, #16
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019d0:	f7ff feda 	bl	8001788 <HAL_GetTick>
 80019d4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b02      	cmp	r3, #2
 80019e0:	d008      	beq.n	80019f4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2280      	movs	r2, #128	; 0x80
 80019e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019f0:	2301      	movs	r3, #1
 80019f2:	e052      	b.n	8001a9a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	681a      	ldr	r2, [r3, #0]
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f022 0216 	bic.w	r2, r2, #22
 8001a02:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a12:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d103      	bne.n	8001a24 <HAL_DMA_Abort+0x62>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d007      	beq.n	8001a34 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	681a      	ldr	r2, [r3, #0]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f022 0208 	bic.w	r2, r2, #8
 8001a32:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f022 0201 	bic.w	r2, r2, #1
 8001a42:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a44:	e013      	b.n	8001a6e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a46:	f7ff fe9f 	bl	8001788 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b05      	cmp	r3, #5
 8001a52:	d90c      	bls.n	8001a6e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2220      	movs	r2, #32
 8001a58:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	2200      	movs	r2, #0
 8001a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	e015      	b.n	8001a9a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f003 0301 	and.w	r3, r3, #1
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1e4      	bne.n	8001a46 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a80:	223f      	movs	r2, #63	; 0x3f
 8001a82:	409a      	lsls	r2, r3
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2200      	movs	r2, #0
 8001a94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3710      	adds	r7, #16
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	b083      	sub	sp, #12
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	2b02      	cmp	r3, #2
 8001ab4:	d004      	beq.n	8001ac0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2280      	movs	r2, #128	; 0x80
 8001aba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e00c      	b.n	8001ada <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2205      	movs	r2, #5
 8001ac4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0201 	bic.w	r2, r2, #1
 8001ad6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ad8:	2300      	movs	r3, #0
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	370c      	adds	r7, #12
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
	...

08001ae8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	60f8      	str	r0, [r7, #12]
 8001af0:	60b9      	str	r1, [r7, #8]
 8001af2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001afa:	4b23      	ldr	r3, [pc, #140]	; (8001b88 <HAL_FLASH_Program+0xa0>)
 8001afc:	7e1b      	ldrb	r3, [r3, #24]
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_FLASH_Program+0x1e>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e03b      	b.n	8001b7e <HAL_FLASH_Program+0x96>
 8001b06:	4b20      	ldr	r3, [pc, #128]	; (8001b88 <HAL_FLASH_Program+0xa0>)
 8001b08:	2201      	movs	r2, #1
 8001b0a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b0c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b10:	f000 f860 	bl	8001bd4 <FLASH_WaitForLastOperation>
 8001b14:	4603      	mov	r3, r0
 8001b16:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d12b      	bne.n	8001b76 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d105      	bne.n	8001b30 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001b24:	783b      	ldrb	r3, [r7, #0]
 8001b26:	4619      	mov	r1, r3
 8001b28:	68b8      	ldr	r0, [r7, #8]
 8001b2a:	f000 f90b 	bl	8001d44 <FLASH_Program_Byte>
 8001b2e:	e016      	b.n	8001b5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2b01      	cmp	r3, #1
 8001b34:	d105      	bne.n	8001b42 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001b36:	883b      	ldrh	r3, [r7, #0]
 8001b38:	4619      	mov	r1, r3
 8001b3a:	68b8      	ldr	r0, [r7, #8]
 8001b3c:	f000 f8de 	bl	8001cfc <FLASH_Program_HalfWord>
 8001b40:	e00d      	b.n	8001b5e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d105      	bne.n	8001b54 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	68b8      	ldr	r0, [r7, #8]
 8001b4e:	f000 f8b3 	bl	8001cb8 <FLASH_Program_Word>
 8001b52:	e004      	b.n	8001b5e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001b54:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001b58:	68b8      	ldr	r0, [r7, #8]
 8001b5a:	f000 f87b 	bl	8001c54 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001b5e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001b62:	f000 f837 	bl	8001bd4 <FLASH_WaitForLastOperation>
 8001b66:	4603      	mov	r3, r0
 8001b68:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001b6a:	4b08      	ldr	r3, [pc, #32]	; (8001b8c <HAL_FLASH_Program+0xa4>)
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	4a07      	ldr	r2, [pc, #28]	; (8001b8c <HAL_FLASH_Program+0xa4>)
 8001b70:	f023 0301 	bic.w	r3, r3, #1
 8001b74:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001b76:	4b04      	ldr	r3, [pc, #16]	; (8001b88 <HAL_FLASH_Program+0xa0>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001b7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3718      	adds	r7, #24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	20000150 	.word	0x20000150
 8001b8c:	40023c00 	.word	0x40023c00

08001b90 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b083      	sub	sp, #12
 8001b94:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001b96:	2300      	movs	r3, #0
 8001b98:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001b9a:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <HAL_FLASH_Unlock+0x38>)
 8001b9c:	691b      	ldr	r3, [r3, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	da0b      	bge.n	8001bba <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ba2:	4b09      	ldr	r3, [pc, #36]	; (8001bc8 <HAL_FLASH_Unlock+0x38>)
 8001ba4:	4a09      	ldr	r2, [pc, #36]	; (8001bcc <HAL_FLASH_Unlock+0x3c>)
 8001ba6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ba8:	4b07      	ldr	r3, [pc, #28]	; (8001bc8 <HAL_FLASH_Unlock+0x38>)
 8001baa:	4a09      	ldr	r2, [pc, #36]	; (8001bd0 <HAL_FLASH_Unlock+0x40>)
 8001bac:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001bae:	4b06      	ldr	r3, [pc, #24]	; (8001bc8 <HAL_FLASH_Unlock+0x38>)
 8001bb0:	691b      	ldr	r3, [r3, #16]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	da01      	bge.n	8001bba <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001bba:	79fb      	ldrb	r3, [r7, #7]
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	40023c00 	.word	0x40023c00
 8001bcc:	45670123 	.word	0x45670123
 8001bd0:	cdef89ab 	.word	0xcdef89ab

08001bd4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001be0:	4b1a      	ldr	r3, [pc, #104]	; (8001c4c <FLASH_WaitForLastOperation+0x78>)
 8001be2:	2200      	movs	r2, #0
 8001be4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001be6:	f7ff fdcf 	bl	8001788 <HAL_GetTick>
 8001bea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001bec:	e010      	b.n	8001c10 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bf4:	d00c      	beq.n	8001c10 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d007      	beq.n	8001c0c <FLASH_WaitForLastOperation+0x38>
 8001bfc:	f7ff fdc4 	bl	8001788 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	687a      	ldr	r2, [r7, #4]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d201      	bcs.n	8001c10 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001c0c:	2303      	movs	r3, #3
 8001c0e:	e019      	b.n	8001c44 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001c10:	4b0f      	ldr	r3, [pc, #60]	; (8001c50 <FLASH_WaitForLastOperation+0x7c>)
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1e8      	bne.n	8001bee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001c1c:	4b0c      	ldr	r3, [pc, #48]	; (8001c50 <FLASH_WaitForLastOperation+0x7c>)
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d002      	beq.n	8001c2e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001c28:	4b09      	ldr	r3, [pc, #36]	; (8001c50 <FLASH_WaitForLastOperation+0x7c>)
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001c2e:	4b08      	ldr	r3, [pc, #32]	; (8001c50 <FLASH_WaitForLastOperation+0x7c>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d003      	beq.n	8001c42 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001c3a:	f000 f8a5 	bl	8001d88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001c42:	2300      	movs	r3, #0
  
}  
 8001c44:	4618      	mov	r0, r3
 8001c46:	3710      	adds	r7, #16
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}
 8001c4c:	20000150 	.word	0x20000150
 8001c50:	40023c00 	.word	0x40023c00

08001c54 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001c54:	b480      	push	{r7}
 8001c56:	b085      	sub	sp, #20
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	60f8      	str	r0, [r7, #12]
 8001c5c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <FLASH_Program_DoubleWord+0x60>)
 8001c62:	691b      	ldr	r3, [r3, #16]
 8001c64:	4a13      	ldr	r2, [pc, #76]	; (8001cb4 <FLASH_Program_DoubleWord+0x60>)
 8001c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001c6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <FLASH_Program_DoubleWord+0x60>)
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <FLASH_Program_DoubleWord+0x60>)
 8001c72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001c76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001c78:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <FLASH_Program_DoubleWord+0x60>)
 8001c7a:	691b      	ldr	r3, [r3, #16]
 8001c7c:	4a0d      	ldr	r2, [pc, #52]	; (8001cb4 <FLASH_Program_DoubleWord+0x60>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001c8a:	f3bf 8f6f 	isb	sy
}
 8001c8e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001c90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	000a      	movs	r2, r1
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	68f9      	ldr	r1, [r7, #12]
 8001ca2:	3104      	adds	r1, #4
 8001ca4:	4613      	mov	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	40023c00 	.word	0x40023c00

08001cb8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001cc2:	4b0d      	ldr	r3, [pc, #52]	; (8001cf8 <FLASH_Program_Word+0x40>)
 8001cc4:	691b      	ldr	r3, [r3, #16]
 8001cc6:	4a0c      	ldr	r2, [pc, #48]	; (8001cf8 <FLASH_Program_Word+0x40>)
 8001cc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ccc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001cce:	4b0a      	ldr	r3, [pc, #40]	; (8001cf8 <FLASH_Program_Word+0x40>)
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	4a09      	ldr	r2, [pc, #36]	; (8001cf8 <FLASH_Program_Word+0x40>)
 8001cd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001cd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001cda:	4b07      	ldr	r3, [pc, #28]	; (8001cf8 <FLASH_Program_Word+0x40>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	4a06      	ldr	r2, [pc, #24]	; (8001cf8 <FLASH_Program_Word+0x40>)
 8001ce0:	f043 0301 	orr.w	r3, r3, #1
 8001ce4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	601a      	str	r2, [r3, #0]
}
 8001cec:	bf00      	nop
 8001cee:	370c      	adds	r7, #12
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf6:	4770      	bx	lr
 8001cf8:	40023c00 	.word	0x40023c00

08001cfc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d08:	4b0d      	ldr	r3, [pc, #52]	; (8001d40 <FLASH_Program_HalfWord+0x44>)
 8001d0a:	691b      	ldr	r3, [r3, #16]
 8001d0c:	4a0c      	ldr	r2, [pc, #48]	; (8001d40 <FLASH_Program_HalfWord+0x44>)
 8001d0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001d14:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <FLASH_Program_HalfWord+0x44>)
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	4a09      	ldr	r2, [pc, #36]	; (8001d40 <FLASH_Program_HalfWord+0x44>)
 8001d1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d1e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d20:	4b07      	ldr	r3, [pc, #28]	; (8001d40 <FLASH_Program_HalfWord+0x44>)
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	4a06      	ldr	r2, [pc, #24]	; (8001d40 <FLASH_Program_HalfWord+0x44>)
 8001d26:	f043 0301 	orr.w	r3, r3, #1
 8001d2a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	801a      	strh	r2, [r3, #0]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40023c00 	.word	0x40023c00

08001d44 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d50:	4b0c      	ldr	r3, [pc, #48]	; (8001d84 <FLASH_Program_Byte+0x40>)
 8001d52:	691b      	ldr	r3, [r3, #16]
 8001d54:	4a0b      	ldr	r2, [pc, #44]	; (8001d84 <FLASH_Program_Byte+0x40>)
 8001d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001d5c:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <FLASH_Program_Byte+0x40>)
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <FLASH_Program_Byte+0x40>)
 8001d60:	691b      	ldr	r3, [r3, #16]
 8001d62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d64:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <FLASH_Program_Byte+0x40>)
 8001d66:	691b      	ldr	r3, [r3, #16]
 8001d68:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <FLASH_Program_Byte+0x40>)
 8001d6a:	f043 0301 	orr.w	r3, r3, #1
 8001d6e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	78fa      	ldrb	r2, [r7, #3]
 8001d74:	701a      	strb	r2, [r3, #0]
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr
 8001d82:	bf00      	nop
 8001d84:	40023c00 	.word	0x40023c00

08001d88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001d8c:	4b2f      	ldr	r3, [pc, #188]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	f003 0310 	and.w	r3, r3, #16
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d008      	beq.n	8001daa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001d98:	4b2d      	ldr	r3, [pc, #180]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001d9a:	69db      	ldr	r3, [r3, #28]
 8001d9c:	f043 0310 	orr.w	r3, r3, #16
 8001da0:	4a2b      	ldr	r2, [pc, #172]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001da2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001da4:	4b29      	ldr	r3, [pc, #164]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001da6:	2210      	movs	r2, #16
 8001da8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001daa:	4b28      	ldr	r3, [pc, #160]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	f003 0320 	and.w	r3, r3, #32
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d008      	beq.n	8001dc8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001db6:	4b26      	ldr	r3, [pc, #152]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001db8:	69db      	ldr	r3, [r3, #28]
 8001dba:	f043 0308 	orr.w	r3, r3, #8
 8001dbe:	4a24      	ldr	r2, [pc, #144]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001dc0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001dc2:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001dc8:	4b20      	ldr	r3, [pc, #128]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d008      	beq.n	8001de6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001dd4:	4b1e      	ldr	r3, [pc, #120]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001dd6:	69db      	ldr	r3, [r3, #28]
 8001dd8:	f043 0304 	orr.w	r3, r3, #4
 8001ddc:	4a1c      	ldr	r2, [pc, #112]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001dde:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001de0:	4b1a      	ldr	r3, [pc, #104]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001de2:	2240      	movs	r2, #64	; 0x40
 8001de4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001de6:	4b19      	ldr	r3, [pc, #100]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001de8:	68db      	ldr	r3, [r3, #12]
 8001dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d008      	beq.n	8001e04 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001df2:	4b17      	ldr	r3, [pc, #92]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	f043 0302 	orr.w	r3, r3, #2
 8001dfa:	4a15      	ldr	r2, [pc, #84]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001dfc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001dfe:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001e00:	2280      	movs	r2, #128	; 0x80
 8001e02:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d009      	beq.n	8001e24 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001e10:	4b0f      	ldr	r3, [pc, #60]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001e12:	69db      	ldr	r3, [r3, #28]
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	4a0d      	ldr	r2, [pc, #52]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001e1a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001e1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001e22:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001e24:	4b09      	ldr	r3, [pc, #36]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d008      	beq.n	8001e42 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001e32:	69db      	ldr	r3, [r3, #28]
 8001e34:	f043 0320 	orr.w	r3, r3, #32
 8001e38:	4a05      	ldr	r2, [pc, #20]	; (8001e50 <FLASH_SetErrorCode+0xc8>)
 8001e3a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <FLASH_SetErrorCode+0xc4>)
 8001e3e:	2202      	movs	r2, #2
 8001e40:	60da      	str	r2, [r3, #12]
  }
}
 8001e42:	bf00      	nop
 8001e44:	46bd      	mov	sp, r7
 8001e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4a:	4770      	bx	lr
 8001e4c:	40023c00 	.word	0x40023c00
 8001e50:	20000150 	.word	0x20000150

08001e54 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b084      	sub	sp, #16
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e66:	4b31      	ldr	r3, [pc, #196]	; (8001f2c <HAL_FLASHEx_Erase+0xd8>)
 8001e68:	7e1b      	ldrb	r3, [r3, #24]
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d101      	bne.n	8001e72 <HAL_FLASHEx_Erase+0x1e>
 8001e6e:	2302      	movs	r3, #2
 8001e70:	e058      	b.n	8001f24 <HAL_FLASHEx_Erase+0xd0>
 8001e72:	4b2e      	ldr	r3, [pc, #184]	; (8001f2c <HAL_FLASHEx_Erase+0xd8>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001e78:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e7c:	f7ff feaa 	bl	8001bd4 <FLASH_WaitForLastOperation>
 8001e80:	4603      	mov	r3, r0
 8001e82:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001e84:	7bfb      	ldrb	r3, [r7, #15]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d148      	bne.n	8001f1c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d115      	bne.n	8001ec6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4619      	mov	r1, r3
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	f000 f844 	bl	8001f34 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001eac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001eb0:	f7ff fe90 	bl	8001bd4 <FLASH_WaitForLastOperation>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001eb8:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <HAL_FLASHEx_Erase+0xdc>)
 8001eba:	691b      	ldr	r3, [r3, #16]
 8001ebc:	4a1c      	ldr	r2, [pc, #112]	; (8001f30 <HAL_FLASHEx_Erase+0xdc>)
 8001ebe:	f023 0304 	bic.w	r3, r3, #4
 8001ec2:	6113      	str	r3, [r2, #16]
 8001ec4:	e028      	b.n	8001f18 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	60bb      	str	r3, [r7, #8]
 8001ecc:	e01c      	b.n	8001f08 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	b2db      	uxtb	r3, r3
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	68b8      	ldr	r0, [r7, #8]
 8001ed8:	f000 f850 	bl	8001f7c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001edc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ee0:	f7ff fe78 	bl	8001bd4 <FLASH_WaitForLastOperation>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001ee8:	4b11      	ldr	r3, [pc, #68]	; (8001f30 <HAL_FLASHEx_Erase+0xdc>)
 8001eea:	691b      	ldr	r3, [r3, #16]
 8001eec:	4a10      	ldr	r2, [pc, #64]	; (8001f30 <HAL_FLASHEx_Erase+0xdc>)
 8001eee:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001ef2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d003      	beq.n	8001f02 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	68ba      	ldr	r2, [r7, #8]
 8001efe:	601a      	str	r2, [r3, #0]
          break;
 8001f00:	e00a      	b.n	8001f18 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	3301      	adds	r3, #1
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	68da      	ldr	r2, [r3, #12]
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	4413      	add	r3, r2
 8001f12:	68ba      	ldr	r2, [r7, #8]
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d3da      	bcc.n	8001ece <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001f18:	f000 f878 	bl	800200c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001f1c:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_FLASHEx_Erase+0xd8>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	761a      	strb	r2, [r3, #24]

  return status;
 8001f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3710      	adds	r7, #16
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}
 8001f2c:	20000150 	.word	0x20000150
 8001f30:	40023c00 	.word	0x40023c00

08001f34 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	6039      	str	r1, [r7, #0]
 8001f3e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001f40:	4b0d      	ldr	r3, [pc, #52]	; (8001f78 <FLASH_MassErase+0x44>)
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	4a0c      	ldr	r2, [pc, #48]	; (8001f78 <FLASH_MassErase+0x44>)
 8001f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f4a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <FLASH_MassErase+0x44>)
 8001f4e:	691b      	ldr	r3, [r3, #16]
 8001f50:	4a09      	ldr	r2, [pc, #36]	; (8001f78 <FLASH_MassErase+0x44>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8001f58:	4b07      	ldr	r3, [pc, #28]	; (8001f78 <FLASH_MassErase+0x44>)
 8001f5a:	691a      	ldr	r2, [r3, #16]
 8001f5c:	79fb      	ldrb	r3, [r7, #7]
 8001f5e:	021b      	lsls	r3, r3, #8
 8001f60:	4313      	orrs	r3, r2
 8001f62:	4a05      	ldr	r2, [pc, #20]	; (8001f78 <FLASH_MassErase+0x44>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f68:	6113      	str	r3, [r2, #16]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
 8001f76:	bf00      	nop
 8001f78:	40023c00 	.word	0x40023c00

08001f7c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	460b      	mov	r3, r1
 8001f86:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8001f8c:	78fb      	ldrb	r3, [r7, #3]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d102      	bne.n	8001f98 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8001f92:	2300      	movs	r3, #0
 8001f94:	60fb      	str	r3, [r7, #12]
 8001f96:	e010      	b.n	8001fba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8001f98:	78fb      	ldrb	r3, [r7, #3]
 8001f9a:	2b01      	cmp	r3, #1
 8001f9c:	d103      	bne.n	8001fa6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8001f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	e009      	b.n	8001fba <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d103      	bne.n	8001fb4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8001fac:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	e002      	b.n	8001fba <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8001fb4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001fb8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001fba:	4b13      	ldr	r3, [pc, #76]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001fbc:	691b      	ldr	r3, [r3, #16]
 8001fbe:	4a12      	ldr	r2, [pc, #72]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001fc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	490f      	ldr	r1, [pc, #60]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8001fd2:	4b0d      	ldr	r3, [pc, #52]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001fd4:	691b      	ldr	r3, [r3, #16]
 8001fd6:	4a0c      	ldr	r2, [pc, #48]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001fd8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8001fdc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001fe0:	691a      	ldr	r2, [r3, #16]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	00db      	lsls	r3, r3, #3
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	4a07      	ldr	r2, [pc, #28]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001fea:	f043 0302 	orr.w	r3, r3, #2
 8001fee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001ff2:	691b      	ldr	r3, [r3, #16]
 8001ff4:	4a04      	ldr	r2, [pc, #16]	; (8002008 <FLASH_Erase_Sector+0x8c>)
 8001ff6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ffa:	6113      	str	r3, [r2, #16]
}
 8001ffc:	bf00      	nop
 8001ffe:	3714      	adds	r7, #20
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr
 8002008:	40023c00 	.word	0x40023c00

0800200c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8002010:	4b20      	ldr	r3, [pc, #128]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002018:	2b00      	cmp	r3, #0
 800201a:	d017      	beq.n	800204c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 800201c:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <FLASH_FlushCaches+0x88>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a1c      	ldr	r2, [pc, #112]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002022:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002026:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8002028:	4b1a      	ldr	r3, [pc, #104]	; (8002094 <FLASH_FlushCaches+0x88>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a19      	ldr	r2, [pc, #100]	; (8002094 <FLASH_FlushCaches+0x88>)
 800202e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002032:	6013      	str	r3, [r2, #0]
 8002034:	4b17      	ldr	r3, [pc, #92]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a16      	ldr	r2, [pc, #88]	; (8002094 <FLASH_FlushCaches+0x88>)
 800203a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800203e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002040:	4b14      	ldr	r3, [pc, #80]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a13      	ldr	r2, [pc, #76]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002046:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800204a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800204c:	4b11      	ldr	r3, [pc, #68]	; (8002094 <FLASH_FlushCaches+0x88>)
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002054:	2b00      	cmp	r3, #0
 8002056:	d017      	beq.n	8002088 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002058:	4b0e      	ldr	r3, [pc, #56]	; (8002094 <FLASH_FlushCaches+0x88>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a0d      	ldr	r2, [pc, #52]	; (8002094 <FLASH_FlushCaches+0x88>)
 800205e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002062:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002064:	4b0b      	ldr	r3, [pc, #44]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a0a      	ldr	r2, [pc, #40]	; (8002094 <FLASH_FlushCaches+0x88>)
 800206a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b08      	ldr	r3, [pc, #32]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a07      	ldr	r2, [pc, #28]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800207a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <FLASH_FlushCaches+0x88>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	4a04      	ldr	r2, [pc, #16]	; (8002094 <FLASH_FlushCaches+0x88>)
 8002082:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002086:	6013      	str	r3, [r2, #0]
  }
}
 8002088:	bf00      	nop
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	40023c00 	.word	0x40023c00

08002098 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002098:	b480      	push	{r7}
 800209a:	b089      	sub	sp, #36	; 0x24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
 80020a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020a2:	2300      	movs	r3, #0
 80020a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020a6:	2300      	movs	r3, #0
 80020a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020aa:	2300      	movs	r3, #0
 80020ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020ae:	2300      	movs	r3, #0
 80020b0:	61fb      	str	r3, [r7, #28]
 80020b2:	e159      	b.n	8002368 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020b4:	2201      	movs	r2, #1
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	4013      	ands	r3, r2
 80020c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020c8:	693a      	ldr	r2, [r7, #16]
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	429a      	cmp	r2, r3
 80020ce:	f040 8148 	bne.w	8002362 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d2:	683b      	ldr	r3, [r7, #0]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	2b01      	cmp	r3, #1
 80020dc:	d005      	beq.n	80020ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020e6:	2b02      	cmp	r3, #2
 80020e8:	d130      	bne.n	800214c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	005b      	lsls	r3, r3, #1
 80020f4:	2203      	movs	r2, #3
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	005b      	lsls	r3, r3, #1
 800210a:	fa02 f303 	lsl.w	r3, r2, r3
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	4313      	orrs	r3, r2
 8002112:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002120:	2201      	movs	r2, #1
 8002122:	69fb      	ldr	r3, [r7, #28]
 8002124:	fa02 f303 	lsl.w	r3, r2, r3
 8002128:	43db      	mvns	r3, r3
 800212a:	69ba      	ldr	r2, [r7, #24]
 800212c:	4013      	ands	r3, r2
 800212e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	091b      	lsrs	r3, r3, #4
 8002136:	f003 0201 	and.w	r2, r3, #1
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	fa02 f303 	lsl.w	r3, r2, r3
 8002140:	69ba      	ldr	r2, [r7, #24]
 8002142:	4313      	orrs	r3, r2
 8002144:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f003 0303 	and.w	r3, r3, #3
 8002154:	2b03      	cmp	r3, #3
 8002156:	d017      	beq.n	8002188 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	68db      	ldr	r3, [r3, #12]
 800215c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2203      	movs	r2, #3
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	4013      	ands	r3, r2
 800216e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	689a      	ldr	r2, [r3, #8]
 8002174:	69fb      	ldr	r3, [r7, #28]
 8002176:	005b      	lsls	r3, r3, #1
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	69ba      	ldr	r2, [r7, #24]
 800217e:	4313      	orrs	r3, r2
 8002180:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	69ba      	ldr	r2, [r7, #24]
 8002186:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	f003 0303 	and.w	r3, r3, #3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d123      	bne.n	80021dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002194:	69fb      	ldr	r3, [r7, #28]
 8002196:	08da      	lsrs	r2, r3, #3
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	3208      	adds	r2, #8
 800219c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	220f      	movs	r2, #15
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	f003 0307 	and.w	r3, r3, #7
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	69ba      	ldr	r2, [r7, #24]
 80021ca:	4313      	orrs	r3, r2
 80021cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	08da      	lsrs	r2, r3, #3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	3208      	adds	r2, #8
 80021d6:	69b9      	ldr	r1, [r7, #24]
 80021d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	005b      	lsls	r3, r3, #1
 80021e6:	2203      	movs	r2, #3
 80021e8:	fa02 f303 	lsl.w	r3, r2, r3
 80021ec:	43db      	mvns	r3, r3
 80021ee:	69ba      	ldr	r2, [r7, #24]
 80021f0:	4013      	ands	r3, r2
 80021f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f003 0203 	and.w	r2, r3, #3
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	005b      	lsls	r3, r3, #1
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	69ba      	ldr	r2, [r7, #24]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002218:	2b00      	cmp	r3, #0
 800221a:	f000 80a2 	beq.w	8002362 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	60fb      	str	r3, [r7, #12]
 8002222:	4b57      	ldr	r3, [pc, #348]	; (8002380 <HAL_GPIO_Init+0x2e8>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002226:	4a56      	ldr	r2, [pc, #344]	; (8002380 <HAL_GPIO_Init+0x2e8>)
 8002228:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800222c:	6453      	str	r3, [r2, #68]	; 0x44
 800222e:	4b54      	ldr	r3, [pc, #336]	; (8002380 <HAL_GPIO_Init+0x2e8>)
 8002230:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002232:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800223a:	4a52      	ldr	r2, [pc, #328]	; (8002384 <HAL_GPIO_Init+0x2ec>)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	3302      	adds	r3, #2
 8002242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002246:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002248:	69fb      	ldr	r3, [r7, #28]
 800224a:	f003 0303 	and.w	r3, r3, #3
 800224e:	009b      	lsls	r3, r3, #2
 8002250:	220f      	movs	r2, #15
 8002252:	fa02 f303 	lsl.w	r3, r2, r3
 8002256:	43db      	mvns	r3, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4013      	ands	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a49      	ldr	r2, [pc, #292]	; (8002388 <HAL_GPIO_Init+0x2f0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d019      	beq.n	800229a <HAL_GPIO_Init+0x202>
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	4a48      	ldr	r2, [pc, #288]	; (800238c <HAL_GPIO_Init+0x2f4>)
 800226a:	4293      	cmp	r3, r2
 800226c:	d013      	beq.n	8002296 <HAL_GPIO_Init+0x1fe>
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	4a47      	ldr	r2, [pc, #284]	; (8002390 <HAL_GPIO_Init+0x2f8>)
 8002272:	4293      	cmp	r3, r2
 8002274:	d00d      	beq.n	8002292 <HAL_GPIO_Init+0x1fa>
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a46      	ldr	r2, [pc, #280]	; (8002394 <HAL_GPIO_Init+0x2fc>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d007      	beq.n	800228e <HAL_GPIO_Init+0x1f6>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a45      	ldr	r2, [pc, #276]	; (8002398 <HAL_GPIO_Init+0x300>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d101      	bne.n	800228a <HAL_GPIO_Init+0x1f2>
 8002286:	2304      	movs	r3, #4
 8002288:	e008      	b.n	800229c <HAL_GPIO_Init+0x204>
 800228a:	2307      	movs	r3, #7
 800228c:	e006      	b.n	800229c <HAL_GPIO_Init+0x204>
 800228e:	2303      	movs	r3, #3
 8002290:	e004      	b.n	800229c <HAL_GPIO_Init+0x204>
 8002292:	2302      	movs	r3, #2
 8002294:	e002      	b.n	800229c <HAL_GPIO_Init+0x204>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_GPIO_Init+0x204>
 800229a:	2300      	movs	r3, #0
 800229c:	69fa      	ldr	r2, [r7, #28]
 800229e:	f002 0203 	and.w	r2, r2, #3
 80022a2:	0092      	lsls	r2, r2, #2
 80022a4:	4093      	lsls	r3, r2
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	4313      	orrs	r3, r2
 80022aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80022ac:	4935      	ldr	r1, [pc, #212]	; (8002384 <HAL_GPIO_Init+0x2ec>)
 80022ae:	69fb      	ldr	r3, [r7, #28]
 80022b0:	089b      	lsrs	r3, r3, #2
 80022b2:	3302      	adds	r3, #2
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022ba:	4b38      	ldr	r3, [pc, #224]	; (800239c <HAL_GPIO_Init+0x304>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	43db      	mvns	r3, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4013      	ands	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022d6:	69ba      	ldr	r2, [r7, #24]
 80022d8:	693b      	ldr	r3, [r7, #16]
 80022da:	4313      	orrs	r3, r2
 80022dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022de:	4a2f      	ldr	r2, [pc, #188]	; (800239c <HAL_GPIO_Init+0x304>)
 80022e0:	69bb      	ldr	r3, [r7, #24]
 80022e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80022e4:	4b2d      	ldr	r3, [pc, #180]	; (800239c <HAL_GPIO_Init+0x304>)
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ea:	693b      	ldr	r3, [r7, #16]
 80022ec:	43db      	mvns	r3, r3
 80022ee:	69ba      	ldr	r2, [r7, #24]
 80022f0:	4013      	ands	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d003      	beq.n	8002308 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002308:	4a24      	ldr	r2, [pc, #144]	; (800239c <HAL_GPIO_Init+0x304>)
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b23      	ldr	r3, [pc, #140]	; (800239c <HAL_GPIO_Init+0x304>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_GPIO_Init+0x304>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b18      	ldr	r3, [pc, #96]	; (800239c <HAL_GPIO_Init+0x304>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a0f      	ldr	r2, [pc, #60]	; (800239c <HAL_GPIO_Init+0x304>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	3301      	adds	r3, #1
 8002366:	61fb      	str	r3, [r7, #28]
 8002368:	69fb      	ldr	r3, [r7, #28]
 800236a:	2b0f      	cmp	r3, #15
 800236c:	f67f aea2 	bls.w	80020b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002370:	bf00      	nop
 8002372:	bf00      	nop
 8002374:	3724      	adds	r7, #36	; 0x24
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40023800 	.word	0x40023800
 8002384:	40013800 	.word	0x40013800
 8002388:	40020000 	.word	0x40020000
 800238c:	40020400 	.word	0x40020400
 8002390:	40020800 	.word	0x40020800
 8002394:	40020c00 	.word	0x40020c00
 8002398:	40021000 	.word	0x40021000
 800239c:	40013c00 	.word	0x40013c00

080023a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	460b      	mov	r3, r1
 80023aa:	807b      	strh	r3, [r7, #2]
 80023ac:	4613      	mov	r3, r2
 80023ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023b0:	787b      	ldrb	r3, [r7, #1]
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023b6:	887a      	ldrh	r2, [r7, #2]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023bc:	e003      	b.n	80023c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023be:	887b      	ldrh	r3, [r7, #2]
 80023c0:	041a      	lsls	r2, r3, #16
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	619a      	str	r2, [r3, #24]
}
 80023c6:	bf00      	nop
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
	...

080023d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e264      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0301 	and.w	r3, r3, #1
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d075      	beq.n	80024de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80023f2:	4ba3      	ldr	r3, [pc, #652]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	f003 030c 	and.w	r3, r3, #12
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d00c      	beq.n	8002418 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80023fe:	4ba0      	ldr	r3, [pc, #640]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002406:	2b08      	cmp	r3, #8
 8002408:	d112      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800240a:	4b9d      	ldr	r3, [pc, #628]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002412:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002416:	d10b      	bne.n	8002430 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002418:	4b99      	ldr	r3, [pc, #612]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d05b      	beq.n	80024dc <HAL_RCC_OscConfig+0x108>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d157      	bne.n	80024dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e23f      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002438:	d106      	bne.n	8002448 <HAL_RCC_OscConfig+0x74>
 800243a:	4b91      	ldr	r3, [pc, #580]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a90      	ldr	r2, [pc, #576]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002440:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002444:	6013      	str	r3, [r2, #0]
 8002446:	e01d      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002450:	d10c      	bne.n	800246c <HAL_RCC_OscConfig+0x98>
 8002452:	4b8b      	ldr	r3, [pc, #556]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a8a      	ldr	r2, [pc, #552]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002458:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800245c:	6013      	str	r3, [r2, #0]
 800245e:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e00b      	b.n	8002484 <HAL_RCC_OscConfig+0xb0>
 800246c:	4b84      	ldr	r3, [pc, #528]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	4a83      	ldr	r2, [pc, #524]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002472:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002476:	6013      	str	r3, [r2, #0]
 8002478:	4b81      	ldr	r3, [pc, #516]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a80      	ldr	r2, [pc, #512]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 800247e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d013      	beq.n	80024b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800248c:	f7ff f97c 	bl	8001788 <HAL_GetTick>
 8002490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	e008      	b.n	80024a6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002494:	f7ff f978 	bl	8001788 <HAL_GetTick>
 8002498:	4602      	mov	r2, r0
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	1ad3      	subs	r3, r2, r3
 800249e:	2b64      	cmp	r3, #100	; 0x64
 80024a0:	d901      	bls.n	80024a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024a2:	2303      	movs	r3, #3
 80024a4:	e204      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a6:	4b76      	ldr	r3, [pc, #472]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d0f0      	beq.n	8002494 <HAL_RCC_OscConfig+0xc0>
 80024b2:	e014      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7ff f968 	bl	8001788 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024bc:	f7ff f964 	bl	8001788 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1f0      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024ce:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d1f0      	bne.n	80024bc <HAL_RCC_OscConfig+0xe8>
 80024da:	e000      	b.n	80024de <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d063      	beq.n	80025b2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024ea:	4b65      	ldr	r3, [pc, #404]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	f003 030c 	and.w	r3, r3, #12
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d00b      	beq.n	800250e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80024f6:	4b62      	ldr	r3, [pc, #392]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80024fe:	2b08      	cmp	r3, #8
 8002500:	d11c      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002502:	4b5f      	ldr	r3, [pc, #380]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002504:	685b      	ldr	r3, [r3, #4]
 8002506:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800250a:	2b00      	cmp	r3, #0
 800250c:	d116      	bne.n	800253c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250e:	4b5c      	ldr	r3, [pc, #368]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0302 	and.w	r3, r3, #2
 8002516:	2b00      	cmp	r3, #0
 8002518:	d005      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	68db      	ldr	r3, [r3, #12]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d001      	beq.n	8002526 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e1c4      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002526:	4b56      	ldr	r3, [pc, #344]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	00db      	lsls	r3, r3, #3
 8002534:	4952      	ldr	r1, [pc, #328]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800253a:	e03a      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d020      	beq.n	8002586 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002544:	4b4f      	ldr	r3, [pc, #316]	; (8002684 <HAL_RCC_OscConfig+0x2b0>)
 8002546:	2201      	movs	r2, #1
 8002548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800254a:	f7ff f91d 	bl	8001788 <HAL_GetTick>
 800254e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002550:	e008      	b.n	8002564 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002552:	f7ff f919 	bl	8001788 <HAL_GetTick>
 8002556:	4602      	mov	r2, r0
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	1ad3      	subs	r3, r2, r3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d901      	bls.n	8002564 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002560:	2303      	movs	r3, #3
 8002562:	e1a5      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d0f0      	beq.n	8002552 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002570:	4b43      	ldr	r3, [pc, #268]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	691b      	ldr	r3, [r3, #16]
 800257c:	00db      	lsls	r3, r3, #3
 800257e:	4940      	ldr	r1, [pc, #256]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002580:	4313      	orrs	r3, r2
 8002582:	600b      	str	r3, [r1, #0]
 8002584:	e015      	b.n	80025b2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002586:	4b3f      	ldr	r3, [pc, #252]	; (8002684 <HAL_RCC_OscConfig+0x2b0>)
 8002588:	2200      	movs	r2, #0
 800258a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800258c:	f7ff f8fc 	bl	8001788 <HAL_GetTick>
 8002590:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002592:	e008      	b.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002594:	f7ff f8f8 	bl	8001788 <HAL_GetTick>
 8002598:	4602      	mov	r2, r0
 800259a:	693b      	ldr	r3, [r7, #16]
 800259c:	1ad3      	subs	r3, r2, r3
 800259e:	2b02      	cmp	r3, #2
 80025a0:	d901      	bls.n	80025a6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025a2:	2303      	movs	r3, #3
 80025a4:	e184      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025a6:	4b36      	ldr	r3, [pc, #216]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f003 0302 	and.w	r3, r3, #2
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d1f0      	bne.n	8002594 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0308 	and.w	r3, r3, #8
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d030      	beq.n	8002620 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d016      	beq.n	80025f4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025c6:	4b30      	ldr	r3, [pc, #192]	; (8002688 <HAL_RCC_OscConfig+0x2b4>)
 80025c8:	2201      	movs	r2, #1
 80025ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025cc:	f7ff f8dc 	bl	8001788 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025d4:	f7ff f8d8 	bl	8001788 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e164      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e6:	4b26      	ldr	r3, [pc, #152]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80025ea:	f003 0302 	and.w	r3, r3, #2
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d0f0      	beq.n	80025d4 <HAL_RCC_OscConfig+0x200>
 80025f2:	e015      	b.n	8002620 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025f4:	4b24      	ldr	r3, [pc, #144]	; (8002688 <HAL_RCC_OscConfig+0x2b4>)
 80025f6:	2200      	movs	r2, #0
 80025f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7ff f8c5 	bl	8001788 <HAL_GetTick>
 80025fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002600:	e008      	b.n	8002614 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002602:	f7ff f8c1 	bl	8001788 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b02      	cmp	r3, #2
 800260e:	d901      	bls.n	8002614 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e14d      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002614:	4b1a      	ldr	r3, [pc, #104]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002616:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002618:	f003 0302 	and.w	r3, r3, #2
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1f0      	bne.n	8002602 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 80a0 	beq.w	800276e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800262e:	2300      	movs	r3, #0
 8002630:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002632:	4b13      	ldr	r3, [pc, #76]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002636:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d10f      	bne.n	800265e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800263e:	2300      	movs	r3, #0
 8002640:	60bb      	str	r3, [r7, #8]
 8002642:	4b0f      	ldr	r3, [pc, #60]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002646:	4a0e      	ldr	r2, [pc, #56]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002648:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800264c:	6413      	str	r3, [r2, #64]	; 0x40
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x2ac>)
 8002650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002652:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002656:	60bb      	str	r3, [r7, #8]
 8002658:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800265a:	2301      	movs	r3, #1
 800265c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265e:	4b0b      	ldr	r3, [pc, #44]	; (800268c <HAL_RCC_OscConfig+0x2b8>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d121      	bne.n	80026ae <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800266a:	4b08      	ldr	r3, [pc, #32]	; (800268c <HAL_RCC_OscConfig+0x2b8>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	4a07      	ldr	r2, [pc, #28]	; (800268c <HAL_RCC_OscConfig+0x2b8>)
 8002670:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002674:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002676:	f7ff f887 	bl	8001788 <HAL_GetTick>
 800267a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800267c:	e011      	b.n	80026a2 <HAL_RCC_OscConfig+0x2ce>
 800267e:	bf00      	nop
 8002680:	40023800 	.word	0x40023800
 8002684:	42470000 	.word	0x42470000
 8002688:	42470e80 	.word	0x42470e80
 800268c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002690:	f7ff f87a 	bl	8001788 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	693b      	ldr	r3, [r7, #16]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	2b02      	cmp	r3, #2
 800269c:	d901      	bls.n	80026a2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800269e:	2303      	movs	r3, #3
 80026a0:	e106      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a2:	4b85      	ldr	r3, [pc, #532]	; (80028b8 <HAL_RCC_OscConfig+0x4e4>)
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d0f0      	beq.n	8002690 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	2b01      	cmp	r3, #1
 80026b4:	d106      	bne.n	80026c4 <HAL_RCC_OscConfig+0x2f0>
 80026b6:	4b81      	ldr	r3, [pc, #516]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ba:	4a80      	ldr	r2, [pc, #512]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026bc:	f043 0301 	orr.w	r3, r3, #1
 80026c0:	6713      	str	r3, [r2, #112]	; 0x70
 80026c2:	e01c      	b.n	80026fe <HAL_RCC_OscConfig+0x32a>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	689b      	ldr	r3, [r3, #8]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d10c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x312>
 80026cc:	4b7b      	ldr	r3, [pc, #492]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026d0:	4a7a      	ldr	r2, [pc, #488]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026d2:	f043 0304 	orr.w	r3, r3, #4
 80026d6:	6713      	str	r3, [r2, #112]	; 0x70
 80026d8:	4b78      	ldr	r3, [pc, #480]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a77      	ldr	r2, [pc, #476]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	e00b      	b.n	80026fe <HAL_RCC_OscConfig+0x32a>
 80026e6:	4b75      	ldr	r3, [pc, #468]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026ea:	4a74      	ldr	r2, [pc, #464]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026ec:	f023 0301 	bic.w	r3, r3, #1
 80026f0:	6713      	str	r3, [r2, #112]	; 0x70
 80026f2:	4b72      	ldr	r3, [pc, #456]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f6:	4a71      	ldr	r2, [pc, #452]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80026f8:	f023 0304 	bic.w	r3, r3, #4
 80026fc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d015      	beq.n	8002732 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002706:	f7ff f83f 	bl	8001788 <HAL_GetTick>
 800270a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800270c:	e00a      	b.n	8002724 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800270e:	f7ff f83b 	bl	8001788 <HAL_GetTick>
 8002712:	4602      	mov	r2, r0
 8002714:	693b      	ldr	r3, [r7, #16]
 8002716:	1ad3      	subs	r3, r2, r3
 8002718:	f241 3288 	movw	r2, #5000	; 0x1388
 800271c:	4293      	cmp	r3, r2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e0c5      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002724:	4b65      	ldr	r3, [pc, #404]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002726:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002728:	f003 0302 	and.w	r3, r3, #2
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0ee      	beq.n	800270e <HAL_RCC_OscConfig+0x33a>
 8002730:	e014      	b.n	800275c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002732:	f7ff f829 	bl	8001788 <HAL_GetTick>
 8002736:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800273a:	f7ff f825 	bl	8001788 <HAL_GetTick>
 800273e:	4602      	mov	r2, r0
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	1ad3      	subs	r3, r2, r3
 8002744:	f241 3288 	movw	r2, #5000	; 0x1388
 8002748:	4293      	cmp	r3, r2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e0af      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002750:	4b5a      	ldr	r3, [pc, #360]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002752:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1ee      	bne.n	800273a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800275c:	7dfb      	ldrb	r3, [r7, #23]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d105      	bne.n	800276e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002762:	4b56      	ldr	r3, [pc, #344]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	4a55      	ldr	r2, [pc, #340]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002768:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800276c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	f000 809b 	beq.w	80028ae <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002778:	4b50      	ldr	r3, [pc, #320]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 030c 	and.w	r3, r3, #12
 8002780:	2b08      	cmp	r3, #8
 8002782:	d05c      	beq.n	800283e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	699b      	ldr	r3, [r3, #24]
 8002788:	2b02      	cmp	r3, #2
 800278a:	d141      	bne.n	8002810 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800278c:	4b4c      	ldr	r3, [pc, #304]	; (80028c0 <HAL_RCC_OscConfig+0x4ec>)
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002792:	f7fe fff9 	bl	8001788 <HAL_GetTick>
 8002796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002798:	e008      	b.n	80027ac <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800279a:	f7fe fff5 	bl	8001788 <HAL_GetTick>
 800279e:	4602      	mov	r2, r0
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	1ad3      	subs	r3, r2, r3
 80027a4:	2b02      	cmp	r3, #2
 80027a6:	d901      	bls.n	80027ac <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80027a8:	2303      	movs	r3, #3
 80027aa:	e081      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ac:	4b43      	ldr	r3, [pc, #268]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d1f0      	bne.n	800279a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	69da      	ldr	r2, [r3, #28]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	6a1b      	ldr	r3, [r3, #32]
 80027c0:	431a      	orrs	r2, r3
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027c6:	019b      	lsls	r3, r3, #6
 80027c8:	431a      	orrs	r2, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ce:	085b      	lsrs	r3, r3, #1
 80027d0:	3b01      	subs	r3, #1
 80027d2:	041b      	lsls	r3, r3, #16
 80027d4:	431a      	orrs	r2, r3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027da:	061b      	lsls	r3, r3, #24
 80027dc:	4937      	ldr	r1, [pc, #220]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 80027de:	4313      	orrs	r3, r2
 80027e0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027e2:	4b37      	ldr	r3, [pc, #220]	; (80028c0 <HAL_RCC_OscConfig+0x4ec>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e8:	f7fe ffce 	bl	8001788 <HAL_GetTick>
 80027ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027ee:	e008      	b.n	8002802 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027f0:	f7fe ffca 	bl	8001788 <HAL_GetTick>
 80027f4:	4602      	mov	r2, r0
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	1ad3      	subs	r3, r2, r3
 80027fa:	2b02      	cmp	r3, #2
 80027fc:	d901      	bls.n	8002802 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80027fe:	2303      	movs	r3, #3
 8002800:	e056      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002802:	4b2e      	ldr	r3, [pc, #184]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d0f0      	beq.n	80027f0 <HAL_RCC_OscConfig+0x41c>
 800280e:	e04e      	b.n	80028ae <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002810:	4b2b      	ldr	r3, [pc, #172]	; (80028c0 <HAL_RCC_OscConfig+0x4ec>)
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002816:	f7fe ffb7 	bl	8001788 <HAL_GetTick>
 800281a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281c:	e008      	b.n	8002830 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800281e:	f7fe ffb3 	bl	8001788 <HAL_GetTick>
 8002822:	4602      	mov	r2, r0
 8002824:	693b      	ldr	r3, [r7, #16]
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d901      	bls.n	8002830 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	e03f      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002830:	4b22      	ldr	r3, [pc, #136]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f0      	bne.n	800281e <HAL_RCC_OscConfig+0x44a>
 800283c:	e037      	b.n	80028ae <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	699b      	ldr	r3, [r3, #24]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d101      	bne.n	800284a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e032      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800284a:	4b1c      	ldr	r3, [pc, #112]	; (80028bc <HAL_RCC_OscConfig+0x4e8>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	2b01      	cmp	r3, #1
 8002856:	d028      	beq.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002862:	429a      	cmp	r2, r3
 8002864:	d121      	bne.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002870:	429a      	cmp	r2, r3
 8002872:	d11a      	bne.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002874:	68fa      	ldr	r2, [r7, #12]
 8002876:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800287a:	4013      	ands	r3, r2
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002880:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002882:	4293      	cmp	r3, r2
 8002884:	d111      	bne.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	3b01      	subs	r3, #1
 8002894:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002896:	429a      	cmp	r2, r3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028a4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d001      	beq.n	80028ae <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80028aa:	2301      	movs	r3, #1
 80028ac:	e000      	b.n	80028b0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3718      	adds	r7, #24
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40007000 	.word	0x40007000
 80028bc:	40023800 	.word	0x40023800
 80028c0:	42470060 	.word	0x42470060

080028c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e0cc      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028d8:	4b68      	ldr	r3, [pc, #416]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 0307 	and.w	r3, r3, #7
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d90c      	bls.n	8002900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028e6:	4b65      	ldr	r3, [pc, #404]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	b2d2      	uxtb	r2, r2
 80028ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028ee:	4b63      	ldr	r3, [pc, #396]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d001      	beq.n	8002900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0b8      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d020      	beq.n	800294e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0304 	and.w	r3, r3, #4
 8002914:	2b00      	cmp	r3, #0
 8002916:	d005      	beq.n	8002924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002918:	4b59      	ldr	r3, [pc, #356]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291a:	689b      	ldr	r3, [r3, #8]
 800291c:	4a58      	ldr	r2, [pc, #352]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800291e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0308 	and.w	r3, r3, #8
 800292c:	2b00      	cmp	r3, #0
 800292e:	d005      	beq.n	800293c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002930:	4b53      	ldr	r3, [pc, #332]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	4a52      	ldr	r2, [pc, #328]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800293a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800293c:	4b50      	ldr	r3, [pc, #320]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	494d      	ldr	r1, [pc, #308]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 800294a:	4313      	orrs	r3, r2
 800294c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0301 	and.w	r3, r3, #1
 8002956:	2b00      	cmp	r3, #0
 8002958:	d044      	beq.n	80029e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d107      	bne.n	8002972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002962:	4b47      	ldr	r3, [pc, #284]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d119      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e07f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	2b02      	cmp	r3, #2
 8002978:	d003      	beq.n	8002982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800297e:	2b03      	cmp	r3, #3
 8002980:	d107      	bne.n	8002992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002982:	4b3f      	ldr	r3, [pc, #252]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d109      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e06f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002992:	4b3b      	ldr	r3, [pc, #236]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b00      	cmp	r3, #0
 800299c:	d101      	bne.n	80029a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800299e:	2301      	movs	r3, #1
 80029a0:	e067      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029a2:	4b37      	ldr	r3, [pc, #220]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f023 0203 	bic.w	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	4934      	ldr	r1, [pc, #208]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029b0:	4313      	orrs	r3, r2
 80029b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029b4:	f7fe fee8 	bl	8001788 <HAL_GetTick>
 80029b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029ba:	e00a      	b.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029bc:	f7fe fee4 	bl	8001788 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e04f      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029d2:	4b2b      	ldr	r3, [pc, #172]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	689b      	ldr	r3, [r3, #8]
 80029d6:	f003 020c 	and.w	r2, r3, #12
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	009b      	lsls	r3, r3, #2
 80029e0:	429a      	cmp	r2, r3
 80029e2:	d1eb      	bne.n	80029bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80029e4:	4b25      	ldr	r3, [pc, #148]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f003 0307 	and.w	r3, r3, #7
 80029ec:	683a      	ldr	r2, [r7, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	d20c      	bcs.n	8002a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029f2:	4b22      	ldr	r3, [pc, #136]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029fa:	4b20      	ldr	r3, [pc, #128]	; (8002a7c <HAL_RCC_ClockConfig+0x1b8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f003 0307 	and.w	r3, r3, #7
 8002a02:	683a      	ldr	r2, [r7, #0]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d001      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e032      	b.n	8002a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 0304 	and.w	r3, r3, #4
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d008      	beq.n	8002a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a18:	4b19      	ldr	r3, [pc, #100]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	68db      	ldr	r3, [r3, #12]
 8002a24:	4916      	ldr	r1, [pc, #88]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	4313      	orrs	r3, r2
 8002a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f003 0308 	and.w	r3, r3, #8
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d009      	beq.n	8002a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a36:	4b12      	ldr	r3, [pc, #72]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a38:	689b      	ldr	r3, [r3, #8]
 8002a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	691b      	ldr	r3, [r3, #16]
 8002a42:	00db      	lsls	r3, r3, #3
 8002a44:	490e      	ldr	r1, [pc, #56]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a46:	4313      	orrs	r3, r2
 8002a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a4a:	f000 f821 	bl	8002a90 <HAL_RCC_GetSysClockFreq>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	4b0b      	ldr	r3, [pc, #44]	; (8002a80 <HAL_RCC_ClockConfig+0x1bc>)
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	091b      	lsrs	r3, r3, #4
 8002a56:	f003 030f 	and.w	r3, r3, #15
 8002a5a:	490a      	ldr	r1, [pc, #40]	; (8002a84 <HAL_RCC_ClockConfig+0x1c0>)
 8002a5c:	5ccb      	ldrb	r3, [r1, r3]
 8002a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8002a62:	4a09      	ldr	r2, [pc, #36]	; (8002a88 <HAL_RCC_ClockConfig+0x1c4>)
 8002a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_RCC_ClockConfig+0x1c8>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fe fe48 	bl	8001700 <HAL_InitTick>

  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	bf00      	nop
 8002a7c:	40023c00 	.word	0x40023c00
 8002a80:	40023800 	.word	0x40023800
 8002a84:	0800480c 	.word	0x0800480c
 8002a88:	20000028 	.word	0x20000028
 8002a8c:	2000002c 	.word	0x2000002c

08002a90 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a90:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	607b      	str	r3, [r7, #4]
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002aa8:	4b67      	ldr	r3, [pc, #412]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 030c 	and.w	r3, r3, #12
 8002ab0:	2b08      	cmp	r3, #8
 8002ab2:	d00d      	beq.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ab4:	2b08      	cmp	r3, #8
 8002ab6:	f200 80bd 	bhi.w	8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d002      	beq.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x34>
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d003      	beq.n	8002aca <HAL_RCC_GetSysClockFreq+0x3a>
 8002ac2:	e0b7      	b.n	8002c34 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ac4:	4b61      	ldr	r3, [pc, #388]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ac6:	60bb      	str	r3, [r7, #8]
       break;
 8002ac8:	e0b7      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aca:	4b61      	ldr	r3, [pc, #388]	; (8002c50 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002acc:	60bb      	str	r3, [r7, #8]
      break;
 8002ace:	e0b4      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ad0:	4b5d      	ldr	r3, [pc, #372]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ad8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ada:	4b5b      	ldr	r3, [pc, #364]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d04d      	beq.n	8002b82 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae6:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	099b      	lsrs	r3, r3, #6
 8002aec:	461a      	mov	r2, r3
 8002aee:	f04f 0300 	mov.w	r3, #0
 8002af2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002af6:	f04f 0100 	mov.w	r1, #0
 8002afa:	ea02 0800 	and.w	r8, r2, r0
 8002afe:	ea03 0901 	and.w	r9, r3, r1
 8002b02:	4640      	mov	r0, r8
 8002b04:	4649      	mov	r1, r9
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	f04f 0300 	mov.w	r3, #0
 8002b0e:	014b      	lsls	r3, r1, #5
 8002b10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002b14:	0142      	lsls	r2, r0, #5
 8002b16:	4610      	mov	r0, r2
 8002b18:	4619      	mov	r1, r3
 8002b1a:	ebb0 0008 	subs.w	r0, r0, r8
 8002b1e:	eb61 0109 	sbc.w	r1, r1, r9
 8002b22:	f04f 0200 	mov.w	r2, #0
 8002b26:	f04f 0300 	mov.w	r3, #0
 8002b2a:	018b      	lsls	r3, r1, #6
 8002b2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002b30:	0182      	lsls	r2, r0, #6
 8002b32:	1a12      	subs	r2, r2, r0
 8002b34:	eb63 0301 	sbc.w	r3, r3, r1
 8002b38:	f04f 0000 	mov.w	r0, #0
 8002b3c:	f04f 0100 	mov.w	r1, #0
 8002b40:	00d9      	lsls	r1, r3, #3
 8002b42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002b46:	00d0      	lsls	r0, r2, #3
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	eb12 0208 	adds.w	r2, r2, r8
 8002b50:	eb43 0309 	adc.w	r3, r3, r9
 8002b54:	f04f 0000 	mov.w	r0, #0
 8002b58:	f04f 0100 	mov.w	r1, #0
 8002b5c:	0259      	lsls	r1, r3, #9
 8002b5e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002b62:	0250      	lsls	r0, r2, #9
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	f04f 0300 	mov.w	r3, #0
 8002b74:	f7fd fb2e 	bl	80001d4 <__aeabi_uldivmod>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	460b      	mov	r3, r1
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	60fb      	str	r3, [r7, #12]
 8002b80:	e04a      	b.n	8002c18 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b82:	4b31      	ldr	r3, [pc, #196]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	099b      	lsrs	r3, r3, #6
 8002b88:	461a      	mov	r2, r3
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002b92:	f04f 0100 	mov.w	r1, #0
 8002b96:	ea02 0400 	and.w	r4, r2, r0
 8002b9a:	ea03 0501 	and.w	r5, r3, r1
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f04f 0200 	mov.w	r2, #0
 8002ba6:	f04f 0300 	mov.w	r3, #0
 8002baa:	014b      	lsls	r3, r1, #5
 8002bac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002bb0:	0142      	lsls	r2, r0, #5
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	1b00      	subs	r0, r0, r4
 8002bb8:	eb61 0105 	sbc.w	r1, r1, r5
 8002bbc:	f04f 0200 	mov.w	r2, #0
 8002bc0:	f04f 0300 	mov.w	r3, #0
 8002bc4:	018b      	lsls	r3, r1, #6
 8002bc6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002bca:	0182      	lsls	r2, r0, #6
 8002bcc:	1a12      	subs	r2, r2, r0
 8002bce:	eb63 0301 	sbc.w	r3, r3, r1
 8002bd2:	f04f 0000 	mov.w	r0, #0
 8002bd6:	f04f 0100 	mov.w	r1, #0
 8002bda:	00d9      	lsls	r1, r3, #3
 8002bdc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002be0:	00d0      	lsls	r0, r2, #3
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	1912      	adds	r2, r2, r4
 8002be8:	eb45 0303 	adc.w	r3, r5, r3
 8002bec:	f04f 0000 	mov.w	r0, #0
 8002bf0:	f04f 0100 	mov.w	r1, #0
 8002bf4:	0299      	lsls	r1, r3, #10
 8002bf6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002bfa:	0290      	lsls	r0, r2, #10
 8002bfc:	4602      	mov	r2, r0
 8002bfe:	460b      	mov	r3, r1
 8002c00:	4610      	mov	r0, r2
 8002c02:	4619      	mov	r1, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	461a      	mov	r2, r3
 8002c08:	f04f 0300 	mov.w	r3, #0
 8002c0c:	f7fd fae2 	bl	80001d4 <__aeabi_uldivmod>
 8002c10:	4602      	mov	r2, r0
 8002c12:	460b      	mov	r3, r1
 8002c14:	4613      	mov	r3, r2
 8002c16:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c18:	4b0b      	ldr	r3, [pc, #44]	; (8002c48 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	0c1b      	lsrs	r3, r3, #16
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	3301      	adds	r3, #1
 8002c24:	005b      	lsls	r3, r3, #1
 8002c26:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002c28:	68fa      	ldr	r2, [r7, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c30:	60bb      	str	r3, [r7, #8]
      break;
 8002c32:	e002      	b.n	8002c3a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002c34:	4b05      	ldr	r3, [pc, #20]	; (8002c4c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002c36:	60bb      	str	r3, [r7, #8]
      break;
 8002c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c3a:	68bb      	ldr	r3, [r7, #8]
}
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	3710      	adds	r7, #16
 8002c40:	46bd      	mov	sp, r7
 8002c42:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002c46:	bf00      	nop
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	00f42400 	.word	0x00f42400
 8002c50:	007a1200 	.word	0x007a1200

08002c54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002c58:	4b03      	ldr	r3, [pc, #12]	; (8002c68 <HAL_RCC_GetHCLKFreq+0x14>)
 8002c5a:	681b      	ldr	r3, [r3, #0]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr
 8002c66:	bf00      	nop
 8002c68:	20000028 	.word	0x20000028

08002c6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002c70:	f7ff fff0 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c74:	4602      	mov	r2, r0
 8002c76:	4b05      	ldr	r3, [pc, #20]	; (8002c8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	0a9b      	lsrs	r3, r3, #10
 8002c7c:	f003 0307 	and.w	r3, r3, #7
 8002c80:	4903      	ldr	r1, [pc, #12]	; (8002c90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002c82:	5ccb      	ldrb	r3, [r1, r3]
 8002c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	0800481c 	.word	0x0800481c

08002c94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002c98:	f7ff ffdc 	bl	8002c54 <HAL_RCC_GetHCLKFreq>
 8002c9c:	4602      	mov	r2, r0
 8002c9e:	4b05      	ldr	r3, [pc, #20]	; (8002cb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	0b5b      	lsrs	r3, r3, #13
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	4903      	ldr	r1, [pc, #12]	; (8002cb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002caa:	5ccb      	ldrb	r3, [r1, r3]
 8002cac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	0800481c 	.word	0x0800481c

08002cbc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d105      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d035      	beq.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002ce4:	4b67      	ldr	r3, [pc, #412]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002cea:	f7fe fd4d 	bl	8001788 <HAL_GetTick>
 8002cee:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002cf0:	e008      	b.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002cf2:	f7fe fd49 	bl	8001788 <HAL_GetTick>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d901      	bls.n	8002d04 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e0ba      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002d04:	4b60      	ldr	r3, [pc, #384]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d1f0      	bne.n	8002cf2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	019a      	lsls	r2, r3, #6
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	071b      	lsls	r3, r3, #28
 8002d1c:	495a      	ldr	r1, [pc, #360]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002d24:	4b57      	ldr	r3, [pc, #348]	; (8002e84 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002d26:	2201      	movs	r2, #1
 8002d28:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002d2a:	f7fe fd2d 	bl	8001788 <HAL_GetTick>
 8002d2e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d30:	e008      	b.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002d32:	f7fe fd29 	bl	8001788 <HAL_GetTick>
 8002d36:	4602      	mov	r2, r0
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	1ad3      	subs	r3, r2, r3
 8002d3c:	2b02      	cmp	r3, #2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e09a      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002d44:	4b50      	ldr	r3, [pc, #320]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d0f0      	beq.n	8002d32 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 0302 	and.w	r3, r3, #2
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	f000 8083 	beq.w	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60fb      	str	r3, [r7, #12]
 8002d62:	4b49      	ldr	r3, [pc, #292]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d66:	4a48      	ldr	r2, [pc, #288]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d6e:	4b46      	ldr	r3, [pc, #280]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d76:	60fb      	str	r3, [r7, #12]
 8002d78:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002d7a:	4b44      	ldr	r3, [pc, #272]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a43      	ldr	r2, [pc, #268]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d84:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002d86:	f7fe fcff 	bl	8001788 <HAL_GetTick>
 8002d8a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002d8e:	f7fe fcfb 	bl	8001788 <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e06c      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002da0:	4b3a      	ldr	r3, [pc, #232]	; (8002e8c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d0f0      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002dac:	4b36      	ldr	r3, [pc, #216]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002db4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d02f      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002dc4:	693a      	ldr	r2, [r7, #16]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d028      	beq.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002dca:	4b2f      	ldr	r3, [pc, #188]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002dcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002dd4:	4b2e      	ldr	r3, [pc, #184]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002dda:	4b2d      	ldr	r3, [pc, #180]	; (8002e90 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002de0:	4a29      	ldr	r2, [pc, #164]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002de6:	4b28      	ldr	r3, [pc, #160]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	f003 0301 	and.w	r3, r3, #1
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d114      	bne.n	8002e1c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002df2:	f7fe fcc9 	bl	8001788 <HAL_GetTick>
 8002df6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df8:	e00a      	b.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002dfa:	f7fe fcc5 	bl	8001788 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d901      	bls.n	8002e10 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e034      	b.n	8002e7a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e10:	4b1d      	ldr	r3, [pc, #116]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d0ee      	beq.n	8002dfa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e24:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002e28:	d10d      	bne.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002e2a:	4b17      	ldr	r3, [pc, #92]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e2c:	689b      	ldr	r3, [r3, #8]
 8002e2e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	68db      	ldr	r3, [r3, #12]
 8002e36:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002e3a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e3e:	4912      	ldr	r1, [pc, #72]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e40:	4313      	orrs	r3, r2
 8002e42:	608b      	str	r3, [r1, #8]
 8002e44:	e005      	b.n	8002e52 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	4a0f      	ldr	r2, [pc, #60]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e4c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002e50:	6093      	str	r3, [r2, #8]
 8002e52:	4b0d      	ldr	r3, [pc, #52]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e54:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e60:	4313      	orrs	r3, r2
 8002e62:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0308 	and.w	r3, r3, #8
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d003      	beq.n	8002e78 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	7c1a      	ldrb	r2, [r3, #16]
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002e76:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002e78:	2300      	movs	r3, #0
}
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	3718      	adds	r7, #24
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	42470068 	.word	0x42470068
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	40007000 	.word	0x40007000
 8002e90:	42470e40 	.word	0x42470e40
 8002e94:	424711e0 	.word	0x424711e0

08002e98 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e083      	b.n	8002fb2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	7f5b      	ldrb	r3, [r3, #29]
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002eba:	6878      	ldr	r0, [r7, #4]
 8002ebc:	f7fe facc 	bl	8001458 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2202      	movs	r2, #2
 8002ec4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	22ca      	movs	r2, #202	; 0xca
 8002ecc:	625a      	str	r2, [r3, #36]	; 0x24
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2253      	movs	r2, #83	; 0x53
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 fc26 	bl	8003728 <RTC_EnterInitMode>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d008      	beq.n	8002ef4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	22ff      	movs	r2, #255	; 0xff
 8002ee8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2204      	movs	r2, #4
 8002eee:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e05e      	b.n	8002fb2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	689b      	ldr	r3, [r3, #8]
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002f02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f06:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	6899      	ldr	r1, [r3, #8]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	691b      	ldr	r3, [r3, #16]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	695b      	ldr	r3, [r3, #20]
 8002f1c:	431a      	orrs	r2, r3
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	430a      	orrs	r2, r1
 8002f24:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	687a      	ldr	r2, [r7, #4]
 8002f2c:	68d2      	ldr	r2, [r2, #12]
 8002f2e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6919      	ldr	r1, [r3, #16]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	041a      	lsls	r2, r3, #16
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	430a      	orrs	r2, r1
 8002f42:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68da      	ldr	r2, [r3, #12]
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f52:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689b      	ldr	r3, [r3, #8]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d10e      	bne.n	8002f80 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002f62:	6878      	ldr	r0, [r7, #4]
 8002f64:	f000 fbb8 	bl	80036d8 <HAL_RTC_WaitForSynchro>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d008      	beq.n	8002f80 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	22ff      	movs	r2, #255	; 0xff
 8002f74:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2204      	movs	r2, #4
 8002f7a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e018      	b.n	8002fb2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002f8e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	22ff      	movs	r2, #255	; 0xff
 8002fa8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8002fb0:	2300      	movs	r3, #0
  }
}
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	3708      	adds	r7, #8
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}

08002fba <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002fba:	b590      	push	{r4, r7, lr}
 8002fbc:	b087      	sub	sp, #28
 8002fbe:	af00      	add	r7, sp, #0
 8002fc0:	60f8      	str	r0, [r7, #12]
 8002fc2:	60b9      	str	r1, [r7, #8]
 8002fc4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	7f1b      	ldrb	r3, [r3, #28]
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d101      	bne.n	8002fd6 <HAL_RTC_SetTime+0x1c>
 8002fd2:	2302      	movs	r3, #2
 8002fd4:	e0aa      	b.n	800312c <HAL_RTC_SetTime+0x172>
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2202      	movs	r2, #2
 8002fe0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d126      	bne.n	8003036 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	689b      	ldr	r3, [r3, #8]
 8002fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f000 fbbd 	bl	8003780 <RTC_ByteToBcd2>
 8003006:	4603      	mov	r3, r0
 8003008:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	785b      	ldrb	r3, [r3, #1]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 fbb6 	bl	8003780 <RTC_ByteToBcd2>
 8003014:	4603      	mov	r3, r0
 8003016:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003018:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	789b      	ldrb	r3, [r3, #2]
 800301e:	4618      	mov	r0, r3
 8003020:	f000 fbae 	bl	8003780 <RTC_ByteToBcd2>
 8003024:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003026:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	78db      	ldrb	r3, [r3, #3]
 800302e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003030:	4313      	orrs	r3, r2
 8003032:	617b      	str	r3, [r7, #20]
 8003034:	e018      	b.n	8003068 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003040:	2b00      	cmp	r3, #0
 8003042:	d102      	bne.n	800304a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003044:	68bb      	ldr	r3, [r7, #8]
 8003046:	2200      	movs	r2, #0
 8003048:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	781b      	ldrb	r3, [r3, #0]
 800304e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003050:	68bb      	ldr	r3, [r7, #8]
 8003052:	785b      	ldrb	r3, [r3, #1]
 8003054:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003056:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003058:	68ba      	ldr	r2, [r7, #8]
 800305a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800305c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	78db      	ldrb	r3, [r3, #3]
 8003062:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003064:	4313      	orrs	r3, r2
 8003066:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	22ca      	movs	r2, #202	; 0xca
 800306e:	625a      	str	r2, [r3, #36]	; 0x24
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2253      	movs	r2, #83	; 0x53
 8003076:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003078:	68f8      	ldr	r0, [r7, #12]
 800307a:	f000 fb55 	bl	8003728 <RTC_EnterInitMode>
 800307e:	4603      	mov	r3, r0
 8003080:	2b00      	cmp	r3, #0
 8003082:	d00b      	beq.n	800309c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	22ff      	movs	r2, #255	; 0xff
 800308a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2204      	movs	r2, #4
 8003090:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e047      	b.n	800312c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80030a6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80030aa:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689a      	ldr	r2, [r3, #8]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80030ba:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	6899      	ldr	r1, [r3, #8]
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	68da      	ldr	r2, [r3, #12]
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	431a      	orrs	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	430a      	orrs	r2, r1
 80030d2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	68da      	ldr	r2, [r3, #12]
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80030e2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 0320 	and.w	r3, r3, #32
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d111      	bne.n	8003116 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80030f2:	68f8      	ldr	r0, [r7, #12]
 80030f4:	f000 faf0 	bl	80036d8 <HAL_RTC_WaitForSynchro>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00b      	beq.n	8003116 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	22ff      	movs	r2, #255	; 0xff
 8003104:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2204      	movs	r2, #4
 800310a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2200      	movs	r2, #0
 8003110:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e00a      	b.n	800312c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	22ff      	movs	r2, #255	; 0xff
 800311c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2200      	movs	r2, #0
 8003128:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800312a:	2300      	movs	r3, #0
  }
}
 800312c:	4618      	mov	r0, r3
 800312e:	371c      	adds	r7, #28
 8003130:	46bd      	mov	sp, r7
 8003132:	bd90      	pop	{r4, r7, pc}

08003134 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b086      	sub	sp, #24
 8003138:	af00      	add	r7, sp, #0
 800313a:	60f8      	str	r0, [r7, #12]
 800313c:	60b9      	str	r1, [r7, #8]
 800313e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003140:	2300      	movs	r3, #0
 8003142:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	691b      	ldr	r3, [r3, #16]
 8003154:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003166:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800316a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	0c1b      	lsrs	r3, r3, #16
 8003170:	b2db      	uxtb	r3, r3
 8003172:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003176:	b2da      	uxtb	r2, r3
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800317c:	697b      	ldr	r3, [r7, #20]
 800317e:	0a1b      	lsrs	r3, r3, #8
 8003180:	b2db      	uxtb	r3, r3
 8003182:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003186:	b2da      	uxtb	r2, r3
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800318c:	697b      	ldr	r3, [r7, #20]
 800318e:	b2db      	uxtb	r3, r3
 8003190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003194:	b2da      	uxtb	r2, r3
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	0c1b      	lsrs	r3, r3, #16
 800319e:	b2db      	uxtb	r3, r3
 80031a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a4:	b2da      	uxtb	r2, r3
 80031a6:	68bb      	ldr	r3, [r7, #8]
 80031a8:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d11a      	bne.n	80031e6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	781b      	ldrb	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f000 fb01 	bl	80037bc <RTC_Bcd2ToByte>
 80031ba:	4603      	mov	r3, r0
 80031bc:	461a      	mov	r2, r3
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031c2:	68bb      	ldr	r3, [r7, #8]
 80031c4:	785b      	ldrb	r3, [r3, #1]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 faf8 	bl	80037bc <RTC_Bcd2ToByte>
 80031cc:	4603      	mov	r3, r0
 80031ce:	461a      	mov	r2, r3
 80031d0:	68bb      	ldr	r3, [r7, #8]
 80031d2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	789b      	ldrb	r3, [r3, #2]
 80031d8:	4618      	mov	r0, r3
 80031da:	f000 faef 	bl	80037bc <RTC_Bcd2ToByte>
 80031de:	4603      	mov	r3, r0
 80031e0:	461a      	mov	r2, r3
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3718      	adds	r7, #24
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031f0:	b590      	push	{r4, r7, lr}
 80031f2:	b087      	sub	sp, #28
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031fc:	2300      	movs	r3, #0
 80031fe:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	7f1b      	ldrb	r3, [r3, #28]
 8003204:	2b01      	cmp	r3, #1
 8003206:	d101      	bne.n	800320c <HAL_RTC_SetDate+0x1c>
 8003208:	2302      	movs	r3, #2
 800320a:	e094      	b.n	8003336 <HAL_RTC_SetDate+0x146>
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	2201      	movs	r2, #1
 8003210:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	2202      	movs	r2, #2
 8003216:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10e      	bne.n	800323c <HAL_RTC_SetDate+0x4c>
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	785b      	ldrb	r3, [r3, #1]
 8003222:	f003 0310 	and.w	r3, r3, #16
 8003226:	2b00      	cmp	r3, #0
 8003228:	d008      	beq.n	800323c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800322a:	68bb      	ldr	r3, [r7, #8]
 800322c:	785b      	ldrb	r3, [r3, #1]
 800322e:	f023 0310 	bic.w	r3, r3, #16
 8003232:	b2db      	uxtb	r3, r3
 8003234:	330a      	adds	r3, #10
 8003236:	b2da      	uxtb	r2, r3
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d11c      	bne.n	800327c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003242:	68bb      	ldr	r3, [r7, #8]
 8003244:	78db      	ldrb	r3, [r3, #3]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fa9a 	bl	8003780 <RTC_ByteToBcd2>
 800324c:	4603      	mov	r3, r0
 800324e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	785b      	ldrb	r3, [r3, #1]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 fa93 	bl	8003780 <RTC_ByteToBcd2>
 800325a:	4603      	mov	r3, r0
 800325c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800325e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	789b      	ldrb	r3, [r3, #2]
 8003264:	4618      	mov	r0, r3
 8003266:	f000 fa8b 	bl	8003780 <RTC_ByteToBcd2>
 800326a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800326c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003276:	4313      	orrs	r3, r2
 8003278:	617b      	str	r3, [r7, #20]
 800327a:	e00e      	b.n	800329a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	78db      	ldrb	r3, [r3, #3]
 8003280:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	785b      	ldrb	r3, [r3, #1]
 8003286:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003288:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800328a:	68ba      	ldr	r2, [r7, #8]
 800328c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800328e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	781b      	ldrb	r3, [r3, #0]
 8003294:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003296:	4313      	orrs	r3, r2
 8003298:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	22ca      	movs	r2, #202	; 0xca
 80032a0:	625a      	str	r2, [r3, #36]	; 0x24
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	2253      	movs	r2, #83	; 0x53
 80032a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80032aa:	68f8      	ldr	r0, [r7, #12]
 80032ac:	f000 fa3c 	bl	8003728 <RTC_EnterInitMode>
 80032b0:	4603      	mov	r3, r0
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d00b      	beq.n	80032ce <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	22ff      	movs	r2, #255	; 0xff
 80032bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	2204      	movs	r2, #4
 80032c2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e033      	b.n	8003336 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80032d8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80032dc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	68da      	ldr	r2, [r3, #12]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032ec:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689b      	ldr	r3, [r3, #8]
 80032f4:	f003 0320 	and.w	r3, r3, #32
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d111      	bne.n	8003320 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032fc:	68f8      	ldr	r0, [r7, #12]
 80032fe:	f000 f9eb 	bl	80036d8 <HAL_RTC_WaitForSynchro>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	d00b      	beq.n	8003320 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	22ff      	movs	r2, #255	; 0xff
 800330e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	2204      	movs	r2, #4
 8003314:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800331c:	2301      	movs	r3, #1
 800331e:	e00a      	b.n	8003336 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	22ff      	movs	r2, #255	; 0xff
 8003326:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	2201      	movs	r2, #1
 800332c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	2200      	movs	r2, #0
 8003332:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003334:	2300      	movs	r3, #0
  }
}
 8003336:	4618      	mov	r0, r3
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	bd90      	pop	{r4, r7, pc}

0800333e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	60f8      	str	r0, [r7, #12]
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800334a:	2300      	movs	r3, #0
 800334c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003358:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800335c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	0c1b      	lsrs	r3, r3, #16
 8003362:	b2da      	uxtb	r2, r3
 8003364:	68bb      	ldr	r3, [r7, #8]
 8003366:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	0a1b      	lsrs	r3, r3, #8
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f003 031f 	and.w	r3, r3, #31
 8003372:	b2da      	uxtb	r2, r3
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003378:	697b      	ldr	r3, [r7, #20]
 800337a:	b2db      	uxtb	r3, r3
 800337c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003380:	b2da      	uxtb	r2, r3
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	0b5b      	lsrs	r3, r3, #13
 800338a:	b2db      	uxtb	r3, r3
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d11a      	bne.n	80033d2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	78db      	ldrb	r3, [r3, #3]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f000 fa0b 	bl	80037bc <RTC_Bcd2ToByte>
 80033a6:	4603      	mov	r3, r0
 80033a8:	461a      	mov	r2, r3
 80033aa:	68bb      	ldr	r3, [r7, #8]
 80033ac:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80033ae:	68bb      	ldr	r3, [r7, #8]
 80033b0:	785b      	ldrb	r3, [r3, #1]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f000 fa02 	bl	80037bc <RTC_Bcd2ToByte>
 80033b8:	4603      	mov	r3, r0
 80033ba:	461a      	mov	r2, r3
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	789b      	ldrb	r3, [r3, #2]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 f9f9 	bl	80037bc <RTC_Bcd2ToByte>
 80033ca:	4603      	mov	r3, r0
 80033cc:	461a      	mov	r2, r3
 80033ce:	68bb      	ldr	r3, [r7, #8]
 80033d0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80033d2:	2300      	movs	r3, #0
}
 80033d4:	4618      	mov	r0, r3
 80033d6:	3718      	adds	r7, #24
 80033d8:	46bd      	mov	sp, r7
 80033da:	bd80      	pop	{r7, pc}

080033dc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80033dc:	b590      	push	{r4, r7, lr}
 80033de:	b089      	sub	sp, #36	; 0x24
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	60f8      	str	r0, [r7, #12]
 80033e4:	60b9      	str	r1, [r7, #8]
 80033e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80033e8:	2300      	movs	r3, #0
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	2300      	movs	r3, #0
 80033ee:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80033f0:	4b93      	ldr	r3, [pc, #588]	; (8003640 <HAL_RTC_SetAlarm_IT+0x264>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a93      	ldr	r2, [pc, #588]	; (8003644 <HAL_RTC_SetAlarm_IT+0x268>)
 80033f6:	fba2 2303 	umull	r2, r3, r2, r3
 80033fa:	0adb      	lsrs	r3, r3, #11
 80033fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003400:	fb02 f303 	mul.w	r3, r2, r3
 8003404:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	7f1b      	ldrb	r3, [r3, #28]
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_RTC_SetAlarm_IT+0x36>
 800340e:	2302      	movs	r3, #2
 8003410:	e111      	b.n	8003636 <HAL_RTC_SetAlarm_IT+0x25a>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2202      	movs	r2, #2
 800341c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d137      	bne.n	8003494 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800342e:	2b00      	cmp	r3, #0
 8003430:	d102      	bne.n	8003438 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003432:	68bb      	ldr	r3, [r7, #8]
 8003434:	2200      	movs	r2, #0
 8003436:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	781b      	ldrb	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f000 f99f 	bl	8003780 <RTC_ByteToBcd2>
 8003442:	4603      	mov	r3, r0
 8003444:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003446:	68bb      	ldr	r3, [r7, #8]
 8003448:	785b      	ldrb	r3, [r3, #1]
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f998 	bl	8003780 <RTC_ByteToBcd2>
 8003450:	4603      	mov	r3, r0
 8003452:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003454:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	789b      	ldrb	r3, [r3, #2]
 800345a:	4618      	mov	r0, r3
 800345c:	f000 f990 	bl	8003780 <RTC_ByteToBcd2>
 8003460:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003462:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	78db      	ldrb	r3, [r3, #3]
 800346a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800346c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003476:	4618      	mov	r0, r3
 8003478:	f000 f982 	bl	8003780 <RTC_ByteToBcd2>
 800347c:	4603      	mov	r3, r0
 800347e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003480:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003484:	68bb      	ldr	r3, [r7, #8]
 8003486:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003488:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800348a:	68bb      	ldr	r3, [r7, #8]
 800348c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800348e:	4313      	orrs	r3, r2
 8003490:	61fb      	str	r3, [r7, #28]
 8003492:	e023      	b.n	80034dc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d102      	bne.n	80034a8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	2200      	movs	r2, #0
 80034a6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	781b      	ldrb	r3, [r3, #0]
 80034ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	785b      	ldrb	r3, [r3, #1]
 80034b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80034b4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80034b6:	68ba      	ldr	r2, [r7, #8]
 80034b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80034ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	78db      	ldrb	r3, [r3, #3]
 80034c0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80034c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80034ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80034cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80034d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80034d8:	4313      	orrs	r3, r2
 80034da:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80034dc:	68bb      	ldr	r3, [r7, #8]
 80034de:	685a      	ldr	r2, [r3, #4]
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	22ca      	movs	r2, #202	; 0xca
 80034ee:	625a      	str	r2, [r3, #36]	; 0x24
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2253      	movs	r2, #83	; 0x53
 80034f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003500:	d141      	bne.n	8003586 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003510:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68db      	ldr	r3, [r3, #12]
 8003518:	b2da      	uxtb	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003522:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003524:	697b      	ldr	r3, [r7, #20]
 8003526:	1e5a      	subs	r2, r3, #1
 8003528:	617a      	str	r2, [r7, #20]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d10b      	bne.n	8003546 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	22ff      	movs	r2, #255	; 0xff
 8003534:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2203      	movs	r2, #3
 800353a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	2200      	movs	r2, #0
 8003540:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003542:	2303      	movs	r3, #3
 8003544:	e077      	b.n	8003636 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0301 	and.w	r3, r3, #1
 8003550:	2b00      	cmp	r3, #0
 8003552:	d0e7      	beq.n	8003524 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	69fa      	ldr	r2, [r7, #28]
 800355a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	689a      	ldr	r2, [r3, #8]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003572:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	689a      	ldr	r2, [r3, #8]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003582:	609a      	str	r2, [r3, #8]
 8003584:	e040      	b.n	8003608 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	689a      	ldr	r2, [r3, #8]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003594:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	b2da      	uxtb	r2, r3
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80035a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	1e5a      	subs	r2, r3, #1
 80035ac:	617a      	str	r2, [r7, #20]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d10b      	bne.n	80035ca <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	22ff      	movs	r2, #255	; 0xff
 80035b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2203      	movs	r2, #3
 80035be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80035c6:	2303      	movs	r3, #3
 80035c8:	e035      	b.n	8003636 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	f003 0302 	and.w	r3, r3, #2
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d0e7      	beq.n	80035a8 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	689a      	ldr	r2, [r3, #8]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80035f6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689a      	ldr	r2, [r3, #8]
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003606:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003608:	4b0f      	ldr	r3, [pc, #60]	; (8003648 <HAL_RTC_SetAlarm_IT+0x26c>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	4a0e      	ldr	r2, [pc, #56]	; (8003648 <HAL_RTC_SetAlarm_IT+0x26c>)
 800360e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003612:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003614:	4b0c      	ldr	r3, [pc, #48]	; (8003648 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003616:	689b      	ldr	r3, [r3, #8]
 8003618:	4a0b      	ldr	r2, [pc, #44]	; (8003648 <HAL_RTC_SetAlarm_IT+0x26c>)
 800361a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800361e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	22ff      	movs	r2, #255	; 0xff
 8003626:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2200      	movs	r2, #0
 8003632:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3724      	adds	r7, #36	; 0x24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd90      	pop	{r4, r7, pc}
 800363e:	bf00      	nop
 8003640:	20000028 	.word	0x20000028
 8003644:	10624dd3 	.word	0x10624dd3
 8003648:	40013c00 	.word	0x40013c00

0800364c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d012      	beq.n	8003688 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00b      	beq.n	8003688 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7fd fc89 	bl	8000f88 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	b2da      	uxtb	r2, r3
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003686:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003692:	2b00      	cmp	r3, #0
 8003694:	d012      	beq.n	80036bc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	68db      	ldr	r3, [r3, #12]
 800369c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d00b      	beq.n	80036bc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f000 f8a7 	bl	80037f8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	68db      	ldr	r3, [r3, #12]
 80036b0:	b2da      	uxtb	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80036ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80036be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80036c2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	775a      	strb	r2, [r3, #29]
}
 80036ca:	bf00      	nop
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	40013c00 	.word	0x40013c00

080036d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b084      	sub	sp, #16
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036e0:	2300      	movs	r3, #0
 80036e2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036f2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036f4:	f7fe f848 	bl	8001788 <HAL_GetTick>
 80036f8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80036fa:	e009      	b.n	8003710 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80036fc:	f7fe f844 	bl	8001788 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800370a:	d901      	bls.n	8003710 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800370c:	2303      	movs	r3, #3
 800370e:	e007      	b.n	8003720 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68db      	ldr	r3, [r3, #12]
 8003716:	f003 0320 	and.w	r3, r3, #32
 800371a:	2b00      	cmp	r3, #0
 800371c:	d0ee      	beq.n	80036fc <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	3710      	adds	r7, #16
 8003724:	46bd      	mov	sp, r7
 8003726:	bd80      	pop	{r7, pc}

08003728 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b084      	sub	sp, #16
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800373e:	2b00      	cmp	r3, #0
 8003740:	d119      	bne.n	8003776 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f04f 32ff 	mov.w	r2, #4294967295
 800374a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800374c:	f7fe f81c 	bl	8001788 <HAL_GetTick>
 8003750:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003752:	e009      	b.n	8003768 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003754:	f7fe f818 	bl	8001788 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003762:	d901      	bls.n	8003768 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e007      	b.n	8003778 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68db      	ldr	r3, [r3, #12]
 800376e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003772:	2b00      	cmp	r3, #0
 8003774:	d0ee      	beq.n	8003754 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3710      	adds	r7, #16
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}

08003780 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	4603      	mov	r3, r0
 8003788:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800378a:	2300      	movs	r3, #0
 800378c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800378e:	e005      	b.n	800379c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3301      	adds	r3, #1
 8003794:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	3b0a      	subs	r3, #10
 800379a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800379c:	79fb      	ldrb	r3, [r7, #7]
 800379e:	2b09      	cmp	r3, #9
 80037a0:	d8f6      	bhi.n	8003790 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	b2da      	uxtb	r2, r3
 80037aa:	79fb      	ldrb	r3, [r7, #7]
 80037ac:	4313      	orrs	r3, r2
 80037ae:	b2db      	uxtb	r3, r3
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3714      	adds	r7, #20
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80037bc:	b480      	push	{r7}
 80037be:	b085      	sub	sp, #20
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80037c6:	2300      	movs	r3, #0
 80037c8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80037ca:	79fb      	ldrb	r3, [r7, #7]
 80037cc:	091b      	lsrs	r3, r3, #4
 80037ce:	b2db      	uxtb	r3, r3
 80037d0:	461a      	mov	r2, r3
 80037d2:	4613      	mov	r3, r2
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	4413      	add	r3, r2
 80037d8:	005b      	lsls	r3, r3, #1
 80037da:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	f003 030f 	and.w	r3, r3, #15
 80037e2:	b2da      	uxtb	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	4413      	add	r3, r2
 80037ea:	b2db      	uxtb	r3, r3
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b082      	sub	sp, #8
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e03f      	b.n	800389e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fd fe44 	bl	80014c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	; 0x24
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	68da      	ldr	r2, [r3, #12]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800384e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 fddb 	bl	800440c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	691a      	ldr	r2, [r3, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003864:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	695a      	ldr	r2, [r3, #20]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003874:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68da      	ldr	r2, [r3, #12]
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003884:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2220      	movs	r2, #32
 8003890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2220      	movs	r2, #32
 8003898:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800389c:	2300      	movs	r3, #0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b08a      	sub	sp, #40	; 0x28
 80038aa:	af02      	add	r7, sp, #8
 80038ac:	60f8      	str	r0, [r7, #12]
 80038ae:	60b9      	str	r1, [r7, #8]
 80038b0:	603b      	str	r3, [r7, #0]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038c0:	b2db      	uxtb	r3, r3
 80038c2:	2b20      	cmp	r3, #32
 80038c4:	d17c      	bne.n	80039c0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d002      	beq.n	80038d2 <HAL_UART_Transmit+0x2c>
 80038cc:	88fb      	ldrh	r3, [r7, #6]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e075      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d101      	bne.n	80038e4 <HAL_UART_Transmit+0x3e>
 80038e0:	2302      	movs	r3, #2
 80038e2:	e06e      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	2201      	movs	r2, #1
 80038e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	2221      	movs	r2, #33	; 0x21
 80038f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038fa:	f7fd ff45 	bl	8001788 <HAL_GetTick>
 80038fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	88fa      	ldrh	r2, [r7, #6]
 8003904:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	88fa      	ldrh	r2, [r7, #6]
 800390a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	689b      	ldr	r3, [r3, #8]
 8003910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003914:	d108      	bne.n	8003928 <HAL_UART_Transmit+0x82>
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d104      	bne.n	8003928 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800391e:	2300      	movs	r3, #0
 8003920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	61bb      	str	r3, [r7, #24]
 8003926:	e003      	b.n	8003930 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800392c:	2300      	movs	r3, #0
 800392e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003938:	e02a      	b.n	8003990 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	9300      	str	r3, [sp, #0]
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	2200      	movs	r2, #0
 8003942:	2180      	movs	r1, #128	; 0x80
 8003944:	68f8      	ldr	r0, [r7, #12]
 8003946:	f000 fb1f 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 800394a:	4603      	mov	r3, r0
 800394c:	2b00      	cmp	r3, #0
 800394e:	d001      	beq.n	8003954 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003950:	2303      	movs	r3, #3
 8003952:	e036      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d10b      	bne.n	8003972 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800395a:	69bb      	ldr	r3, [r7, #24]
 800395c:	881b      	ldrh	r3, [r3, #0]
 800395e:	461a      	mov	r2, r3
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	3302      	adds	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
 8003970:	e007      	b.n	8003982 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003972:	69fb      	ldr	r3, [r7, #28]
 8003974:	781a      	ldrb	r2, [r3, #0]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800397c:	69fb      	ldr	r3, [r7, #28]
 800397e:	3301      	adds	r3, #1
 8003980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003986:	b29b      	uxth	r3, r3
 8003988:	3b01      	subs	r3, #1
 800398a:	b29a      	uxth	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003994:	b29b      	uxth	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d1cf      	bne.n	800393a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2140      	movs	r1, #64	; 0x40
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 faef 	bl	8003f88 <UART_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80039b0:	2303      	movs	r3, #3
 80039b2:	e006      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	2220      	movs	r2, #32
 80039b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80039bc:	2300      	movs	r3, #0
 80039be:	e000      	b.n	80039c2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80039c0:	2302      	movs	r3, #2
  }
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3720      	adds	r7, #32
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	60f8      	str	r0, [r7, #12]
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	4613      	mov	r3, r2
 80039d6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b20      	cmp	r3, #32
 80039e2:	d11d      	bne.n	8003a20 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d002      	beq.n	80039f0 <HAL_UART_Receive_IT+0x26>
 80039ea:	88fb      	ldrh	r3, [r7, #6]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e016      	b.n	8003a22 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d101      	bne.n	8003a02 <HAL_UART_Receive_IT+0x38>
 80039fe:	2302      	movs	r3, #2
 8003a00:	e00f      	b.n	8003a22 <HAL_UART_Receive_IT+0x58>
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	2201      	movs	r2, #1
 8003a06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a10:	88fb      	ldrh	r3, [r7, #6]
 8003a12:	461a      	mov	r2, r3
 8003a14:	68b9      	ldr	r1, [r7, #8]
 8003a16:	68f8      	ldr	r0, [r7, #12]
 8003a18:	f000 fb24 	bl	8004064 <UART_Start_Receive_IT>
 8003a1c:	4603      	mov	r3, r0
 8003a1e:	e000      	b.n	8003a22 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8003a20:	2302      	movs	r3, #2
  }
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
	...

08003a2c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b0ba      	sub	sp, #232	; 0xe8
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	695b      	ldr	r3, [r3, #20]
 8003a4e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8003a52:	2300      	movs	r3, #0
 8003a54:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a62:	f003 030f 	and.w	r3, r3, #15
 8003a66:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003a6a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d10f      	bne.n	8003a92 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003a72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a76:	f003 0320 	and.w	r3, r3, #32
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d009      	beq.n	8003a92 <HAL_UART_IRQHandler+0x66>
 8003a7e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a82:	f003 0320 	and.w	r3, r3, #32
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fc03 	bl	8004296 <UART_Receive_IT>
      return;
 8003a90:	e256      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003a92:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	f000 80de 	beq.w	8003c58 <HAL_UART_IRQHandler+0x22c>
 8003a9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aa0:	f003 0301 	and.w	r3, r3, #1
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d106      	bne.n	8003ab6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003aac:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80d1 	beq.w	8003c58 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d00b      	beq.n	8003ada <HAL_UART_IRQHandler+0xae>
 8003ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d005      	beq.n	8003ada <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad2:	f043 0201 	orr.w	r2, r3, #1
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00b      	beq.n	8003afe <HAL_UART_IRQHandler+0xd2>
 8003ae6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d005      	beq.n	8003afe <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af6:	f043 0202 	orr.w	r2, r3, #2
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003afe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b02:	f003 0302 	and.w	r3, r3, #2
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d00b      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
 8003b0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b0e:	f003 0301 	and.w	r3, r3, #1
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d005      	beq.n	8003b22 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b1a:	f043 0204 	orr.w	r2, r3, #4
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b26:	f003 0308 	and.w	r3, r3, #8
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d011      	beq.n	8003b52 <HAL_UART_IRQHandler+0x126>
 8003b2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b32:	f003 0320 	and.w	r3, r3, #32
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d105      	bne.n	8003b46 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b4a:	f043 0208 	orr.w	r2, r3, #8
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	f000 81ed 	beq.w	8003f36 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003b60:	f003 0320 	and.w	r3, r3, #32
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d008      	beq.n	8003b7a <HAL_UART_IRQHandler+0x14e>
 8003b68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003b6c:	f003 0320 	and.w	r3, r3, #32
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d002      	beq.n	8003b7a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 fb8e 	bl	8004296 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	695b      	ldr	r3, [r3, #20]
 8003b80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b84:	2b40      	cmp	r3, #64	; 0x40
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b96:	f003 0308 	and.w	r3, r3, #8
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d103      	bne.n	8003ba6 <HAL_UART_IRQHandler+0x17a>
 8003b9e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d04f      	beq.n	8003c46 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003ba6:	6878      	ldr	r0, [r7, #4]
 8003ba8:	f000 fa96 	bl	80040d8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bb6:	2b40      	cmp	r3, #64	; 0x40
 8003bb8:	d141      	bne.n	8003c3e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	3314      	adds	r3, #20
 8003bc0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bc4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003bc8:	e853 3f00 	ldrex	r3, [r3]
 8003bcc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003bd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	3314      	adds	r3, #20
 8003be2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003be6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003bea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003bf2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003bf6:	e841 2300 	strex	r3, r2, [r1]
 8003bfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003bfe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d1d9      	bne.n	8003bba <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d013      	beq.n	8003c36 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c12:	4a7d      	ldr	r2, [pc, #500]	; (8003e08 <HAL_UART_IRQHandler+0x3dc>)
 8003c14:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd ff41 	bl	8001aa2 <HAL_DMA_Abort_IT>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d016      	beq.n	8003c54 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c30:	4610      	mov	r0, r2
 8003c32:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c34:	e00e      	b.n	8003c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f990 	bl	8003f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c3c:	e00a      	b.n	8003c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f98c 	bl	8003f5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c44:	e006      	b.n	8003c54 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 f988 	bl	8003f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2200      	movs	r2, #0
 8003c50:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8003c52:	e170      	b.n	8003f36 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c54:	bf00      	nop
    return;
 8003c56:	e16e      	b.n	8003f36 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5c:	2b01      	cmp	r3, #1
 8003c5e:	f040 814a 	bne.w	8003ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c66:	f003 0310 	and.w	r3, r3, #16
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8143 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003c70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c74:	f003 0310 	and.w	r3, r3, #16
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	f000 813c 	beq.w	8003ef6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c7e:	2300      	movs	r3, #0
 8003c80:	60bb      	str	r3, [r7, #8]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60bb      	str	r3, [r7, #8]
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	60bb      	str	r3, [r7, #8]
 8003c92:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c9e:	2b40      	cmp	r3, #64	; 0x40
 8003ca0:	f040 80b4 	bne.w	8003e0c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003cb0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	f000 8140 	beq.w	8003f3a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003cbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	f080 8139 	bcs.w	8003f3a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003cce:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd4:	69db      	ldr	r3, [r3, #28]
 8003cd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cda:	f000 8088 	beq.w	8003dee <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	330c      	adds	r3, #12
 8003ce4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ce8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003cec:	e853 3f00 	ldrex	r3, [r3]
 8003cf0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003cf4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003cf8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8003d0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d12:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003d16:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1d9      	bne.n	8003cde <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	3314      	adds	r3, #20
 8003d30:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d34:	e853 3f00 	ldrex	r3, [r3]
 8003d38:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003d3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d3c:	f023 0301 	bic.w	r3, r3, #1
 8003d40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	3314      	adds	r3, #20
 8003d4a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d4e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003d52:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d54:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003d56:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e1      	bne.n	8003d2a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3314      	adds	r3, #20
 8003d6c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003d76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003d78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3314      	adds	r3, #20
 8003d86:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003d8a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003d8c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003d90:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003d92:	e841 2300 	strex	r3, r2, [r1]
 8003d96:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003d98:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d1e3      	bne.n	8003d66 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2220      	movs	r2, #32
 8003da2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2200      	movs	r2, #0
 8003daa:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	330c      	adds	r3, #12
 8003db2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003db4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003db6:	e853 3f00 	ldrex	r3, [r3]
 8003dba:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003dbc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003dbe:	f023 0310 	bic.w	r3, r3, #16
 8003dc2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	330c      	adds	r3, #12
 8003dcc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003dd0:	65ba      	str	r2, [r7, #88]	; 0x58
 8003dd2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dd4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003dd6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003dd8:	e841 2300 	strex	r3, r2, [r1]
 8003ddc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d1e3      	bne.n	8003dac <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003de8:	4618      	mov	r0, r3
 8003dea:	f7fd fdea 	bl	80019c2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003df6:	b29b      	uxth	r3, r3
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	b29b      	uxth	r3, r3
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 f8b6 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e04:	e099      	b.n	8003f3a <HAL_UART_IRQHandler+0x50e>
 8003e06:	bf00      	nop
 8003e08:	0800419f 	.word	0x0800419f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e14:	b29b      	uxth	r3, r3
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	f000 808b 	beq.w	8003f3e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003e28:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	f000 8086 	beq.w	8003f3e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	330c      	adds	r3, #12
 8003e38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	e853 3f00 	ldrex	r3, [r3]
 8003e40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e44:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e48:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	330c      	adds	r3, #12
 8003e52:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003e56:	647a      	str	r2, [r7, #68]	; 0x44
 8003e58:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e5a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e5c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003e5e:	e841 2300 	strex	r3, r2, [r1]
 8003e62:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003e64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d1e3      	bne.n	8003e32 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	3314      	adds	r3, #20
 8003e70:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e74:	e853 3f00 	ldrex	r3, [r3]
 8003e78:	623b      	str	r3, [r7, #32]
   return(result);
 8003e7a:	6a3b      	ldr	r3, [r7, #32]
 8003e7c:	f023 0301 	bic.w	r3, r3, #1
 8003e80:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	3314      	adds	r3, #20
 8003e8a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003e8e:	633a      	str	r2, [r7, #48]	; 0x30
 8003e90:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e92:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003e94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003e96:	e841 2300 	strex	r3, r2, [r1]
 8003e9a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1e3      	bne.n	8003e6a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2220      	movs	r2, #32
 8003ea6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	330c      	adds	r3, #12
 8003eb6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	e853 3f00 	ldrex	r3, [r3]
 8003ebe:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	f023 0310 	bic.w	r3, r3, #16
 8003ec6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	330c      	adds	r3, #12
 8003ed0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ed4:	61fa      	str	r2, [r7, #28]
 8003ed6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed8:	69b9      	ldr	r1, [r7, #24]
 8003eda:	69fa      	ldr	r2, [r7, #28]
 8003edc:	e841 2300 	strex	r3, r2, [r1]
 8003ee0:	617b      	str	r3, [r7, #20]
   return(result);
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d1e3      	bne.n	8003eb0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ee8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003eec:	4619      	mov	r1, r3
 8003eee:	6878      	ldr	r0, [r7, #4]
 8003ef0:	f000 f83e 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ef4:	e023      	b.n	8003f3e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d009      	beq.n	8003f16 <HAL_UART_IRQHandler+0x4ea>
 8003f02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 f959 	bl	80041c6 <UART_Transmit_IT>
    return;
 8003f14:	e014      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00e      	beq.n	8003f40 <HAL_UART_IRQHandler+0x514>
 8003f22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d008      	beq.n	8003f40 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	f000 f999 	bl	8004266 <UART_EndTransmit_IT>
    return;
 8003f34:	e004      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
    return;
 8003f36:	bf00      	nop
 8003f38:	e002      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
      return;
 8003f3a:	bf00      	nop
 8003f3c:	e000      	b.n	8003f40 <HAL_UART_IRQHandler+0x514>
      return;
 8003f3e:	bf00      	nop
  }
}
 8003f40:	37e8      	adds	r7, #232	; 0xe8
 8003f42:	46bd      	mov	sp, r7
 8003f44:	bd80      	pop	{r7, pc}
 8003f46:	bf00      	nop

08003f48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f48:	b480      	push	{r7}
 8003f4a:	b083      	sub	sp, #12
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f50:	bf00      	nop
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f64:	bf00      	nop
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	460b      	mov	r3, r1
 8003f7a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003f7c:	bf00      	nop
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003f88:	b580      	push	{r7, lr}
 8003f8a:	b090      	sub	sp, #64	; 0x40
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	60b9      	str	r1, [r7, #8]
 8003f92:	603b      	str	r3, [r7, #0]
 8003f94:	4613      	mov	r3, r2
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f98:	e050      	b.n	800403c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa0:	d04c      	beq.n	800403c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003fa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d007      	beq.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fa8:	f7fd fbee 	bl	8001788 <HAL_GetTick>
 8003fac:	4602      	mov	r2, r0
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d241      	bcs.n	800403c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	330c      	adds	r3, #12
 8003fbe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fc2:	e853 3f00 	ldrex	r3, [r3]
 8003fc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003fce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	330c      	adds	r3, #12
 8003fd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fd8:	637a      	str	r2, [r7, #52]	; 0x34
 8003fda:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fdc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003fde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003fe0:	e841 2300 	strex	r3, r2, [r1]
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d1e5      	bne.n	8003fb8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	3314      	adds	r3, #20
 8003ff2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff4:	697b      	ldr	r3, [r7, #20]
 8003ff6:	e853 3f00 	ldrex	r3, [r3]
 8003ffa:	613b      	str	r3, [r7, #16]
   return(result);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	f023 0301 	bic.w	r3, r3, #1
 8004002:	63bb      	str	r3, [r7, #56]	; 0x38
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	3314      	adds	r3, #20
 800400a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800400c:	623a      	str	r2, [r7, #32]
 800400e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004010:	69f9      	ldr	r1, [r7, #28]
 8004012:	6a3a      	ldr	r2, [r7, #32]
 8004014:	e841 2300 	strex	r3, r2, [r1]
 8004018:	61bb      	str	r3, [r7, #24]
   return(result);
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d1e5      	bne.n	8003fec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2220      	movs	r2, #32
 8004024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	2220      	movs	r2, #32
 800402c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004038:	2303      	movs	r3, #3
 800403a:	e00f      	b.n	800405c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	429a      	cmp	r2, r3
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	429a      	cmp	r2, r3
 8004058:	d09f      	beq.n	8003f9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3740      	adds	r7, #64	; 0x40
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004064:	b480      	push	{r7}
 8004066:	b085      	sub	sp, #20
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	4613      	mov	r3, r2
 8004070:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	68ba      	ldr	r2, [r7, #8]
 8004076:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	88fa      	ldrh	r2, [r7, #6]
 8004082:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2222      	movs	r2, #34	; 0x22
 800408e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	68da      	ldr	r2, [r3, #12]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80040a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	695a      	ldr	r2, [r3, #20]
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f042 0201 	orr.w	r2, r2, #1
 80040b8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	68da      	ldr	r2, [r3, #12]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f042 0220 	orr.w	r2, r2, #32
 80040c8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040ca:	2300      	movs	r3, #0
}
 80040cc:	4618      	mov	r0, r3
 80040ce:	3714      	adds	r7, #20
 80040d0:	46bd      	mov	sp, r7
 80040d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d6:	4770      	bx	lr

080040d8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040d8:	b480      	push	{r7}
 80040da:	b095      	sub	sp, #84	; 0x54
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040ea:	e853 3f00 	ldrex	r3, [r3]
 80040ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	330c      	adds	r3, #12
 80040fe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004100:	643a      	str	r2, [r7, #64]	; 0x40
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004104:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004106:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004108:	e841 2300 	strex	r3, r2, [r1]
 800410c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800410e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004110:	2b00      	cmp	r3, #0
 8004112:	d1e5      	bne.n	80040e0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3314      	adds	r3, #20
 800411a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	e853 3f00 	ldrex	r3, [r3]
 8004122:	61fb      	str	r3, [r7, #28]
   return(result);
 8004124:	69fb      	ldr	r3, [r7, #28]
 8004126:	f023 0301 	bic.w	r3, r3, #1
 800412a:	64bb      	str	r3, [r7, #72]	; 0x48
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3314      	adds	r3, #20
 8004132:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004134:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004136:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004138:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800413a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800413c:	e841 2300 	strex	r3, r2, [r1]
 8004140:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004144:	2b00      	cmp	r3, #0
 8004146:	d1e5      	bne.n	8004114 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800414c:	2b01      	cmp	r3, #1
 800414e:	d119      	bne.n	8004184 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	e853 3f00 	ldrex	r3, [r3]
 800415e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f023 0310 	bic.w	r3, r3, #16
 8004166:	647b      	str	r3, [r7, #68]	; 0x44
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	330c      	adds	r3, #12
 800416e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004170:	61ba      	str	r2, [r7, #24]
 8004172:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004174:	6979      	ldr	r1, [r7, #20]
 8004176:	69ba      	ldr	r2, [r7, #24]
 8004178:	e841 2300 	strex	r3, r2, [r1]
 800417c:	613b      	str	r3, [r7, #16]
   return(result);
 800417e:	693b      	ldr	r3, [r7, #16]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d1e5      	bne.n	8004150 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2220      	movs	r2, #32
 8004188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2200      	movs	r2, #0
 8004190:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004192:	bf00      	nop
 8004194:	3754      	adds	r7, #84	; 0x54
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b084      	sub	sp, #16
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	2200      	movs	r2, #0
 80041b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2200      	movs	r2, #0
 80041b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f7ff fecf 	bl	8003f5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041be:	bf00      	nop
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}

080041c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041d4:	b2db      	uxtb	r3, r3
 80041d6:	2b21      	cmp	r3, #33	; 0x21
 80041d8:	d13e      	bne.n	8004258 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	689b      	ldr	r3, [r3, #8]
 80041de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041e2:	d114      	bne.n	800420e <UART_Transmit_IT+0x48>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	691b      	ldr	r3, [r3, #16]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d110      	bne.n	800420e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6a1b      	ldr	r3, [r3, #32]
 80041f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	881b      	ldrh	r3, [r3, #0]
 80041f6:	461a      	mov	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004200:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	1c9a      	adds	r2, r3, #2
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	621a      	str	r2, [r3, #32]
 800420c:	e008      	b.n	8004220 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	1c59      	adds	r1, r3, #1
 8004214:	687a      	ldr	r2, [r7, #4]
 8004216:	6211      	str	r1, [r2, #32]
 8004218:	781a      	ldrb	r2, [r3, #0]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29b      	uxth	r3, r3
 800422a:	687a      	ldr	r2, [r7, #4]
 800422c:	4619      	mov	r1, r3
 800422e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004230:	2b00      	cmp	r3, #0
 8004232:	d10f      	bne.n	8004254 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	68da      	ldr	r2, [r3, #12]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004242:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68da      	ldr	r2, [r3, #12]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004252:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004254:	2300      	movs	r3, #0
 8004256:	e000      	b.n	800425a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004258:	2302      	movs	r3, #2
  }
}
 800425a:	4618      	mov	r0, r3
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr

08004266 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004266:	b580      	push	{r7, lr}
 8004268:	b082      	sub	sp, #8
 800426a:	af00      	add	r7, sp, #0
 800426c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	68da      	ldr	r2, [r3, #12]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800427c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2220      	movs	r2, #32
 8004282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f7ff fe5e 	bl	8003f48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3708      	adds	r7, #8
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}

08004296 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004296:	b580      	push	{r7, lr}
 8004298:	b08c      	sub	sp, #48	; 0x30
 800429a:	af00      	add	r7, sp, #0
 800429c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	2b22      	cmp	r3, #34	; 0x22
 80042a8:	f040 80ab 	bne.w	8004402 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b4:	d117      	bne.n	80042e6 <UART_Receive_IT+0x50>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	691b      	ldr	r3, [r3, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d113      	bne.n	80042e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d4:	b29a      	uxth	r2, r3
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042de:	1c9a      	adds	r2, r3, #2
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	629a      	str	r2, [r3, #40]	; 0x28
 80042e4:	e026      	b.n	8004334 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ea:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042ec:	2300      	movs	r3, #0
 80042ee:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	689b      	ldr	r3, [r3, #8]
 80042f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042f8:	d007      	beq.n	800430a <UART_Receive_IT+0x74>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10a      	bne.n	8004318 <UART_Receive_IT+0x82>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	691b      	ldr	r3, [r3, #16]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d106      	bne.n	8004318 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	685b      	ldr	r3, [r3, #4]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004314:	701a      	strb	r2, [r3, #0]
 8004316:	e008      	b.n	800432a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	b2db      	uxtb	r3, r3
 8004320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004324:	b2da      	uxtb	r2, r3
 8004326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004328:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800432e:	1c5a      	adds	r2, r3, #1
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004338:	b29b      	uxth	r3, r3
 800433a:	3b01      	subs	r3, #1
 800433c:	b29b      	uxth	r3, r3
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	4619      	mov	r1, r3
 8004342:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004344:	2b00      	cmp	r3, #0
 8004346:	d15a      	bne.n	80043fe <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0220 	bic.w	r2, r2, #32
 8004356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	68da      	ldr	r2, [r3, #12]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	695a      	ldr	r2, [r3, #20]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0201 	bic.w	r2, r2, #1
 8004376:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2220      	movs	r2, #32
 800437c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004384:	2b01      	cmp	r3, #1
 8004386:	d135      	bne.n	80043f4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2200      	movs	r2, #0
 800438c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	e853 3f00 	ldrex	r3, [r3]
 800439c:	613b      	str	r3, [r7, #16]
   return(result);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f023 0310 	bic.w	r3, r3, #16
 80043a4:	627b      	str	r3, [r7, #36]	; 0x24
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	330c      	adds	r3, #12
 80043ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043ae:	623a      	str	r2, [r7, #32]
 80043b0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b2:	69f9      	ldr	r1, [r7, #28]
 80043b4:	6a3a      	ldr	r2, [r7, #32]
 80043b6:	e841 2300 	strex	r3, r2, [r1]
 80043ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1e5      	bne.n	800438e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0310 	and.w	r3, r3, #16
 80043cc:	2b10      	cmp	r3, #16
 80043ce:	d10a      	bne.n	80043e6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043d0:	2300      	movs	r3, #0
 80043d2:	60fb      	str	r3, [r7, #12]
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043ea:	4619      	mov	r1, r3
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7ff fdbf 	bl	8003f70 <HAL_UARTEx_RxEventCallback>
 80043f2:	e002      	b.n	80043fa <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7fc fda3 	bl	8000f40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	e002      	b.n	8004404 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043fe:	2300      	movs	r3, #0
 8004400:	e000      	b.n	8004404 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8004402:	2302      	movs	r3, #2
  }
}
 8004404:	4618      	mov	r0, r3
 8004406:	3730      	adds	r7, #48	; 0x30
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800440c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004410:	b09f      	sub	sp, #124	; 0x7c
 8004412:	af00      	add	r7, sp, #0
 8004414:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004422:	68d9      	ldr	r1, [r3, #12]
 8004424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	ea40 0301 	orr.w	r3, r0, r1
 800442c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800442e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	431a      	orrs	r2, r3
 8004438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	431a      	orrs	r2, r3
 800443e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004440:	69db      	ldr	r3, [r3, #28]
 8004442:	4313      	orrs	r3, r2
 8004444:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8004446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	68db      	ldr	r3, [r3, #12]
 800444c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004450:	f021 010c 	bic.w	r1, r1, #12
 8004454:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800445a:	430b      	orrs	r3, r1
 800445c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800445e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	695b      	ldr	r3, [r3, #20]
 8004464:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446a:	6999      	ldr	r1, [r3, #24]
 800446c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800446e:	681a      	ldr	r2, [r3, #0]
 8004470:	ea40 0301 	orr.w	r3, r0, r1
 8004474:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004476:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	4bc5      	ldr	r3, [pc, #788]	; (8004790 <UART_SetConfig+0x384>)
 800447c:	429a      	cmp	r2, r3
 800447e:	d004      	beq.n	800448a <UART_SetConfig+0x7e>
 8004480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	4bc3      	ldr	r3, [pc, #780]	; (8004794 <UART_SetConfig+0x388>)
 8004486:	429a      	cmp	r2, r3
 8004488:	d103      	bne.n	8004492 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800448a:	f7fe fc03 	bl	8002c94 <HAL_RCC_GetPCLK2Freq>
 800448e:	6778      	str	r0, [r7, #116]	; 0x74
 8004490:	e002      	b.n	8004498 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004492:	f7fe fbeb 	bl	8002c6c <HAL_RCC_GetPCLK1Freq>
 8004496:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004498:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800449a:	69db      	ldr	r3, [r3, #28]
 800449c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044a0:	f040 80b6 	bne.w	8004610 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80044a6:	461c      	mov	r4, r3
 80044a8:	f04f 0500 	mov.w	r5, #0
 80044ac:	4622      	mov	r2, r4
 80044ae:	462b      	mov	r3, r5
 80044b0:	1891      	adds	r1, r2, r2
 80044b2:	6439      	str	r1, [r7, #64]	; 0x40
 80044b4:	415b      	adcs	r3, r3
 80044b6:	647b      	str	r3, [r7, #68]	; 0x44
 80044b8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80044bc:	1912      	adds	r2, r2, r4
 80044be:	eb45 0303 	adc.w	r3, r5, r3
 80044c2:	f04f 0000 	mov.w	r0, #0
 80044c6:	f04f 0100 	mov.w	r1, #0
 80044ca:	00d9      	lsls	r1, r3, #3
 80044cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80044d0:	00d0      	lsls	r0, r2, #3
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	1911      	adds	r1, r2, r4
 80044d8:	6639      	str	r1, [r7, #96]	; 0x60
 80044da:	416b      	adcs	r3, r5
 80044dc:	667b      	str	r3, [r7, #100]	; 0x64
 80044de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	461a      	mov	r2, r3
 80044e4:	f04f 0300 	mov.w	r3, #0
 80044e8:	1891      	adds	r1, r2, r2
 80044ea:	63b9      	str	r1, [r7, #56]	; 0x38
 80044ec:	415b      	adcs	r3, r3
 80044ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80044f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80044f4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80044f8:	f7fb fe6c 	bl	80001d4 <__aeabi_uldivmod>
 80044fc:	4602      	mov	r2, r0
 80044fe:	460b      	mov	r3, r1
 8004500:	4ba5      	ldr	r3, [pc, #660]	; (8004798 <UART_SetConfig+0x38c>)
 8004502:	fba3 2302 	umull	r2, r3, r3, r2
 8004506:	095b      	lsrs	r3, r3, #5
 8004508:	011e      	lsls	r6, r3, #4
 800450a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800450c:	461c      	mov	r4, r3
 800450e:	f04f 0500 	mov.w	r5, #0
 8004512:	4622      	mov	r2, r4
 8004514:	462b      	mov	r3, r5
 8004516:	1891      	adds	r1, r2, r2
 8004518:	6339      	str	r1, [r7, #48]	; 0x30
 800451a:	415b      	adcs	r3, r3
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
 800451e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004522:	1912      	adds	r2, r2, r4
 8004524:	eb45 0303 	adc.w	r3, r5, r3
 8004528:	f04f 0000 	mov.w	r0, #0
 800452c:	f04f 0100 	mov.w	r1, #0
 8004530:	00d9      	lsls	r1, r3, #3
 8004532:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004536:	00d0      	lsls	r0, r2, #3
 8004538:	4602      	mov	r2, r0
 800453a:	460b      	mov	r3, r1
 800453c:	1911      	adds	r1, r2, r4
 800453e:	65b9      	str	r1, [r7, #88]	; 0x58
 8004540:	416b      	adcs	r3, r5
 8004542:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004544:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	461a      	mov	r2, r3
 800454a:	f04f 0300 	mov.w	r3, #0
 800454e:	1891      	adds	r1, r2, r2
 8004550:	62b9      	str	r1, [r7, #40]	; 0x28
 8004552:	415b      	adcs	r3, r3
 8004554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004556:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800455a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800455e:	f7fb fe39 	bl	80001d4 <__aeabi_uldivmod>
 8004562:	4602      	mov	r2, r0
 8004564:	460b      	mov	r3, r1
 8004566:	4b8c      	ldr	r3, [pc, #560]	; (8004798 <UART_SetConfig+0x38c>)
 8004568:	fba3 1302 	umull	r1, r3, r3, r2
 800456c:	095b      	lsrs	r3, r3, #5
 800456e:	2164      	movs	r1, #100	; 0x64
 8004570:	fb01 f303 	mul.w	r3, r1, r3
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	00db      	lsls	r3, r3, #3
 8004578:	3332      	adds	r3, #50	; 0x32
 800457a:	4a87      	ldr	r2, [pc, #540]	; (8004798 <UART_SetConfig+0x38c>)
 800457c:	fba2 2303 	umull	r2, r3, r2, r3
 8004580:	095b      	lsrs	r3, r3, #5
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004588:	441e      	add	r6, r3
 800458a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800458c:	4618      	mov	r0, r3
 800458e:	f04f 0100 	mov.w	r1, #0
 8004592:	4602      	mov	r2, r0
 8004594:	460b      	mov	r3, r1
 8004596:	1894      	adds	r4, r2, r2
 8004598:	623c      	str	r4, [r7, #32]
 800459a:	415b      	adcs	r3, r3
 800459c:	627b      	str	r3, [r7, #36]	; 0x24
 800459e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80045a2:	1812      	adds	r2, r2, r0
 80045a4:	eb41 0303 	adc.w	r3, r1, r3
 80045a8:	f04f 0400 	mov.w	r4, #0
 80045ac:	f04f 0500 	mov.w	r5, #0
 80045b0:	00dd      	lsls	r5, r3, #3
 80045b2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80045b6:	00d4      	lsls	r4, r2, #3
 80045b8:	4622      	mov	r2, r4
 80045ba:	462b      	mov	r3, r5
 80045bc:	1814      	adds	r4, r2, r0
 80045be:	653c      	str	r4, [r7, #80]	; 0x50
 80045c0:	414b      	adcs	r3, r1
 80045c2:	657b      	str	r3, [r7, #84]	; 0x54
 80045c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	461a      	mov	r2, r3
 80045ca:	f04f 0300 	mov.w	r3, #0
 80045ce:	1891      	adds	r1, r2, r2
 80045d0:	61b9      	str	r1, [r7, #24]
 80045d2:	415b      	adcs	r3, r3
 80045d4:	61fb      	str	r3, [r7, #28]
 80045d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045da:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80045de:	f7fb fdf9 	bl	80001d4 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4b6c      	ldr	r3, [pc, #432]	; (8004798 <UART_SetConfig+0x38c>)
 80045e8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	2164      	movs	r1, #100	; 0x64
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	00db      	lsls	r3, r3, #3
 80045f8:	3332      	adds	r3, #50	; 0x32
 80045fa:	4a67      	ldr	r2, [pc, #412]	; (8004798 <UART_SetConfig+0x38c>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f003 0207 	and.w	r2, r3, #7
 8004606:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4432      	add	r2, r6
 800460c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800460e:	e0b9      	b.n	8004784 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004612:	461c      	mov	r4, r3
 8004614:	f04f 0500 	mov.w	r5, #0
 8004618:	4622      	mov	r2, r4
 800461a:	462b      	mov	r3, r5
 800461c:	1891      	adds	r1, r2, r2
 800461e:	6139      	str	r1, [r7, #16]
 8004620:	415b      	adcs	r3, r3
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004628:	1912      	adds	r2, r2, r4
 800462a:	eb45 0303 	adc.w	r3, r5, r3
 800462e:	f04f 0000 	mov.w	r0, #0
 8004632:	f04f 0100 	mov.w	r1, #0
 8004636:	00d9      	lsls	r1, r3, #3
 8004638:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800463c:	00d0      	lsls	r0, r2, #3
 800463e:	4602      	mov	r2, r0
 8004640:	460b      	mov	r3, r1
 8004642:	eb12 0804 	adds.w	r8, r2, r4
 8004646:	eb43 0905 	adc.w	r9, r3, r5
 800464a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	4618      	mov	r0, r3
 8004650:	f04f 0100 	mov.w	r1, #0
 8004654:	f04f 0200 	mov.w	r2, #0
 8004658:	f04f 0300 	mov.w	r3, #0
 800465c:	008b      	lsls	r3, r1, #2
 800465e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004662:	0082      	lsls	r2, r0, #2
 8004664:	4640      	mov	r0, r8
 8004666:	4649      	mov	r1, r9
 8004668:	f7fb fdb4 	bl	80001d4 <__aeabi_uldivmod>
 800466c:	4602      	mov	r2, r0
 800466e:	460b      	mov	r3, r1
 8004670:	4b49      	ldr	r3, [pc, #292]	; (8004798 <UART_SetConfig+0x38c>)
 8004672:	fba3 2302 	umull	r2, r3, r3, r2
 8004676:	095b      	lsrs	r3, r3, #5
 8004678:	011e      	lsls	r6, r3, #4
 800467a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800467c:	4618      	mov	r0, r3
 800467e:	f04f 0100 	mov.w	r1, #0
 8004682:	4602      	mov	r2, r0
 8004684:	460b      	mov	r3, r1
 8004686:	1894      	adds	r4, r2, r2
 8004688:	60bc      	str	r4, [r7, #8]
 800468a:	415b      	adcs	r3, r3
 800468c:	60fb      	str	r3, [r7, #12]
 800468e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004692:	1812      	adds	r2, r2, r0
 8004694:	eb41 0303 	adc.w	r3, r1, r3
 8004698:	f04f 0400 	mov.w	r4, #0
 800469c:	f04f 0500 	mov.w	r5, #0
 80046a0:	00dd      	lsls	r5, r3, #3
 80046a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80046a6:	00d4      	lsls	r4, r2, #3
 80046a8:	4622      	mov	r2, r4
 80046aa:	462b      	mov	r3, r5
 80046ac:	1814      	adds	r4, r2, r0
 80046ae:	64bc      	str	r4, [r7, #72]	; 0x48
 80046b0:	414b      	adcs	r3, r1
 80046b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80046b6:	685b      	ldr	r3, [r3, #4]
 80046b8:	4618      	mov	r0, r3
 80046ba:	f04f 0100 	mov.w	r1, #0
 80046be:	f04f 0200 	mov.w	r2, #0
 80046c2:	f04f 0300 	mov.w	r3, #0
 80046c6:	008b      	lsls	r3, r1, #2
 80046c8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80046cc:	0082      	lsls	r2, r0, #2
 80046ce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80046d2:	f7fb fd7f 	bl	80001d4 <__aeabi_uldivmod>
 80046d6:	4602      	mov	r2, r0
 80046d8:	460b      	mov	r3, r1
 80046da:	4b2f      	ldr	r3, [pc, #188]	; (8004798 <UART_SetConfig+0x38c>)
 80046dc:	fba3 1302 	umull	r1, r3, r3, r2
 80046e0:	095b      	lsrs	r3, r3, #5
 80046e2:	2164      	movs	r1, #100	; 0x64
 80046e4:	fb01 f303 	mul.w	r3, r1, r3
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	011b      	lsls	r3, r3, #4
 80046ec:	3332      	adds	r3, #50	; 0x32
 80046ee:	4a2a      	ldr	r2, [pc, #168]	; (8004798 <UART_SetConfig+0x38c>)
 80046f0:	fba2 2303 	umull	r2, r3, r2, r3
 80046f4:	095b      	lsrs	r3, r3, #5
 80046f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80046fa:	441e      	add	r6, r3
 80046fc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80046fe:	4618      	mov	r0, r3
 8004700:	f04f 0100 	mov.w	r1, #0
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	1894      	adds	r4, r2, r2
 800470a:	603c      	str	r4, [r7, #0]
 800470c:	415b      	adcs	r3, r3
 800470e:	607b      	str	r3, [r7, #4]
 8004710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004714:	1812      	adds	r2, r2, r0
 8004716:	eb41 0303 	adc.w	r3, r1, r3
 800471a:	f04f 0400 	mov.w	r4, #0
 800471e:	f04f 0500 	mov.w	r5, #0
 8004722:	00dd      	lsls	r5, r3, #3
 8004724:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004728:	00d4      	lsls	r4, r2, #3
 800472a:	4622      	mov	r2, r4
 800472c:	462b      	mov	r3, r5
 800472e:	eb12 0a00 	adds.w	sl, r2, r0
 8004732:	eb43 0b01 	adc.w	fp, r3, r1
 8004736:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	4618      	mov	r0, r3
 800473c:	f04f 0100 	mov.w	r1, #0
 8004740:	f04f 0200 	mov.w	r2, #0
 8004744:	f04f 0300 	mov.w	r3, #0
 8004748:	008b      	lsls	r3, r1, #2
 800474a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800474e:	0082      	lsls	r2, r0, #2
 8004750:	4650      	mov	r0, sl
 8004752:	4659      	mov	r1, fp
 8004754:	f7fb fd3e 	bl	80001d4 <__aeabi_uldivmod>
 8004758:	4602      	mov	r2, r0
 800475a:	460b      	mov	r3, r1
 800475c:	4b0e      	ldr	r3, [pc, #56]	; (8004798 <UART_SetConfig+0x38c>)
 800475e:	fba3 1302 	umull	r1, r3, r3, r2
 8004762:	095b      	lsrs	r3, r3, #5
 8004764:	2164      	movs	r1, #100	; 0x64
 8004766:	fb01 f303 	mul.w	r3, r1, r3
 800476a:	1ad3      	subs	r3, r2, r3
 800476c:	011b      	lsls	r3, r3, #4
 800476e:	3332      	adds	r3, #50	; 0x32
 8004770:	4a09      	ldr	r2, [pc, #36]	; (8004798 <UART_SetConfig+0x38c>)
 8004772:	fba2 2303 	umull	r2, r3, r2, r3
 8004776:	095b      	lsrs	r3, r3, #5
 8004778:	f003 020f 	and.w	r2, r3, #15
 800477c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	4432      	add	r2, r6
 8004782:	609a      	str	r2, [r3, #8]
}
 8004784:	bf00      	nop
 8004786:	377c      	adds	r7, #124	; 0x7c
 8004788:	46bd      	mov	sp, r7
 800478a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800478e:	bf00      	nop
 8004790:	40011000 	.word	0x40011000
 8004794:	40011400 	.word	0x40011400
 8004798:	51eb851f 	.word	0x51eb851f

0800479c <__libc_init_array>:
 800479c:	b570      	push	{r4, r5, r6, lr}
 800479e:	4d0d      	ldr	r5, [pc, #52]	; (80047d4 <__libc_init_array+0x38>)
 80047a0:	4c0d      	ldr	r4, [pc, #52]	; (80047d8 <__libc_init_array+0x3c>)
 80047a2:	1b64      	subs	r4, r4, r5
 80047a4:	10a4      	asrs	r4, r4, #2
 80047a6:	2600      	movs	r6, #0
 80047a8:	42a6      	cmp	r6, r4
 80047aa:	d109      	bne.n	80047c0 <__libc_init_array+0x24>
 80047ac:	4d0b      	ldr	r5, [pc, #44]	; (80047dc <__libc_init_array+0x40>)
 80047ae:	4c0c      	ldr	r4, [pc, #48]	; (80047e0 <__libc_init_array+0x44>)
 80047b0:	f000 f820 	bl	80047f4 <_init>
 80047b4:	1b64      	subs	r4, r4, r5
 80047b6:	10a4      	asrs	r4, r4, #2
 80047b8:	2600      	movs	r6, #0
 80047ba:	42a6      	cmp	r6, r4
 80047bc:	d105      	bne.n	80047ca <__libc_init_array+0x2e>
 80047be:	bd70      	pop	{r4, r5, r6, pc}
 80047c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80047c4:	4798      	blx	r3
 80047c6:	3601      	adds	r6, #1
 80047c8:	e7ee      	b.n	80047a8 <__libc_init_array+0xc>
 80047ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ce:	4798      	blx	r3
 80047d0:	3601      	adds	r6, #1
 80047d2:	e7f2      	b.n	80047ba <__libc_init_array+0x1e>
 80047d4:	0800482c 	.word	0x0800482c
 80047d8:	0800482c 	.word	0x0800482c
 80047dc:	0800482c 	.word	0x0800482c
 80047e0:	08004830 	.word	0x08004830

080047e4 <memset>:
 80047e4:	4402      	add	r2, r0
 80047e6:	4603      	mov	r3, r0
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d100      	bne.n	80047ee <memset+0xa>
 80047ec:	4770      	bx	lr
 80047ee:	f803 1b01 	strb.w	r1, [r3], #1
 80047f2:	e7f9      	b.n	80047e8 <memset+0x4>

080047f4 <_init>:
 80047f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047f6:	bf00      	nop
 80047f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047fa:	bc08      	pop	{r3}
 80047fc:	469e      	mov	lr, r3
 80047fe:	4770      	bx	lr

08004800 <_fini>:
 8004800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004802:	bf00      	nop
 8004804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004806:	bc08      	pop	{r3}
 8004808:	469e      	mov	lr, r3
 800480a:	4770      	bx	lr
