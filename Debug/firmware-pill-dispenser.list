
firmware-pill-dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000596c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005b00  08005b00  00015b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b20  08005b20  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08005b20  08005b20  00015b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b28  08005b28  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b28  08005b28  00015b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b2c  08005b2c  00015b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005b30  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000034  08005b64  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000254  08005b64  00020254  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012cc6  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028da  00000000  00000000  00032d2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010f0  00000000  00000000  00035608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ff8  00000000  00000000  000366f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000174b0  00000000  00000000  000376f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012f16  00000000  00000000  0004eba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093bd3  00000000  00000000  00061ab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f5689  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004760  00000000  00000000  000f56dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000034 	.word	0x20000034
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08005ae8 	.word	0x08005ae8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000038 	.word	0x20000038
 80001d0:	08005ae8 	.word	0x08005ae8

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80004d2:	2306      	movs	r3, #6
 80004d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80004d6:	2306      	movs	r3, #6
 80004d8:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	83fb      	strh	r3, [r7, #30]
 80004e2:	2300      	movs	r3, #0
 80004e4:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ea:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80004f0:	4ba1      	ldr	r3, [pc, #644]	; (8000778 <EE_Init+0x2ac>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80004f6:	4ba1      	ldr	r3, [pc, #644]	; (800077c <EE_Init+0x2b0>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80004fc:	2300      	movs	r3, #0
 80004fe:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8000500:	2302      	movs	r3, #2
 8000502:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8000504:	2301      	movs	r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000508:	2302      	movs	r3, #2
 800050a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 800050c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800050e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000512:	4293      	cmp	r3, r2
 8000514:	d00b      	beq.n	800052e <EE_Init+0x62>
 8000516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800051a:	f280 8196 	bge.w	800084a <EE_Init+0x37e>
 800051e:	2b00      	cmp	r3, #0
 8000520:	f000 80f8 	beq.w	8000714 <EE_Init+0x248>
 8000524:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000528:	4293      	cmp	r3, r2
 800052a:	d050      	beq.n	80005ce <EE_Init+0x102>
 800052c:	e18d      	b.n	800084a <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800052e:	8c3b      	ldrh	r3, [r7, #32]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d116      	bne.n	8000562 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000534:	4890      	ldr	r0, [pc, #576]	; (8000778 <EE_Init+0x2ac>)
 8000536:	f000 f9a9 	bl	800088c <EE_VerifyPageFullyErased>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 818e 	bne.w	800085e <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000542:	f107 0214 	add.w	r2, r7, #20
 8000546:	463b      	mov	r3, r7
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f001 ff64 	bl	8002418 <HAL_FLASHEx_Erase>
 8000550:	4603      	mov	r3, r0
 8000552:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000554:	7efb      	ldrb	r3, [r7, #27]
 8000556:	2b00      	cmp	r3, #0
 8000558:	f000 8181 	beq.w	800085e <EE_Init+0x392>
          {
            return FlashStatus;
 800055c:	7efb      	ldrb	r3, [r7, #27]
 800055e:	b29b      	uxth	r3, r3
 8000560:	e185      	b.n	800086e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000562:	8c3b      	ldrh	r3, [r7, #32]
 8000564:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000568:	4293      	cmp	r3, r2
 800056a:	d125      	bne.n	80005b8 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800056c:	4882      	ldr	r0, [pc, #520]	; (8000778 <EE_Init+0x2ac>)
 800056e:	f000 f98d 	bl	800088c <EE_VerifyPageFullyErased>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10e      	bne.n	8000596 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000578:	f107 0214 	add.w	r2, r7, #20
 800057c:	463b      	mov	r3, r7
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f001 ff49 	bl	8002418 <HAL_FLASHEx_Erase>
 8000586:	4603      	mov	r3, r0
 8000588:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800058a:	7efb      	ldrb	r3, [r7, #27]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d002      	beq.n	8000596 <EE_Init+0xca>
          {
            return FlashStatus;
 8000590:	7efb      	ldrb	r3, [r7, #27]
 8000592:	b29b      	uxth	r3, r3
 8000594:	e16b      	b.n	800086e <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	4977      	ldr	r1, [pc, #476]	; (800077c <EE_Init+0x2b0>)
 80005a0:	2001      	movs	r0, #1
 80005a2:	f001 fd83 	bl	80020ac <HAL_FLASH_Program>
 80005a6:	4603      	mov	r3, r0
 80005a8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80005aa:	7efb      	ldrb	r3, [r7, #27]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 8156 	beq.w	800085e <EE_Init+0x392>
        {
          return FlashStatus;
 80005b2:	7efb      	ldrb	r3, [r7, #27]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	e15a      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80005b8:	f000 f9fa 	bl	80009b0 <EE_Format>
 80005bc:	4603      	mov	r3, r0
 80005be:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80005c0:	7efb      	ldrb	r3, [r7, #27]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f000 814b 	beq.w	800085e <EE_Init+0x392>
        {
          return FlashStatus;
 80005c8:	7efb      	ldrb	r3, [r7, #27]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	e14f      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80005ce:	8c3b      	ldrh	r3, [r7, #32]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d163      	bne.n	800069c <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80005d8:	e030      	b.n	800063c <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80005da:	4b69      	ldr	r3, [pc, #420]	; (8000780 <EE_Init+0x2b4>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005e2:	4968      	ldr	r1, [pc, #416]	; (8000784 <EE_Init+0x2b8>)
 80005e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d101      	bne.n	80005f0 <EE_Init+0x124>
          {
            x = VarIdx;
 80005ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005ee:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80005f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d01d      	beq.n	8000636 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80005fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005fc:	4a61      	ldr	r2, [pc, #388]	; (8000784 <EE_Init+0x2b8>)
 80005fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000602:	4961      	ldr	r1, [pc, #388]	; (8000788 <EE_Init+0x2bc>)
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f967 	bl	80008d8 <EE_ReadVariable>
 800060a:	4603      	mov	r3, r0
 800060c:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800060e:	8bbb      	ldrh	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d010      	beq.n	8000636 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000616:	4a5b      	ldr	r2, [pc, #364]	; (8000784 <EE_Init+0x2b8>)
 8000618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061c:	4a5a      	ldr	r2, [pc, #360]	; (8000788 <EE_Init+0x2bc>)
 800061e:	8812      	ldrh	r2, [r2, #0]
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fa5c 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 8000628:	4603      	mov	r3, r0
 800062a:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800062c:	8bfb      	ldrh	r3, [r7, #30]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <EE_Init+0x16a>
              {
                return EepromStatus;
 8000632:	8bfb      	ldrh	r3, [r7, #30]
 8000634:	e11b      	b.n	800086e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000636:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000638:	3301      	adds	r3, #1
 800063a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800063c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800063e:	2b13      	cmp	r3, #19
 8000640:	d9cb      	bls.n	80005da <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000642:	f04f 0200 	mov.w	r2, #0
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	494b      	ldr	r1, [pc, #300]	; (8000778 <EE_Init+0x2ac>)
 800064c:	2001      	movs	r0, #1
 800064e:	f001 fd2d 	bl	80020ac <HAL_FLASH_Program>
 8000652:	4603      	mov	r3, r0
 8000654:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000656:	7efb      	ldrb	r3, [r7, #27]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <EE_Init+0x196>
        {
          return FlashStatus;
 800065c:	7efb      	ldrb	r3, [r7, #27]
 800065e:	b29b      	uxth	r3, r3
 8000660:	e105      	b.n	800086e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8000662:	2303      	movs	r3, #3
 8000664:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800066e:	4843      	ldr	r0, [pc, #268]	; (800077c <EE_Init+0x2b0>)
 8000670:	f000 f90c 	bl	800088c <EE_VerifyPageFullyErased>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	f040 80f3 	bne.w	8000862 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800067c:	f107 0214 	add.w	r2, r7, #20
 8000680:	463b      	mov	r3, r7
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fec7 	bl	8002418 <HAL_FLASHEx_Erase>
 800068a:	4603      	mov	r3, r0
 800068c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800068e:	7efb      	ldrb	r3, [r7, #27]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 80e6 	beq.w	8000862 <EE_Init+0x396>
          {
            return FlashStatus;
 8000696:	7efb      	ldrb	r3, [r7, #27]
 8000698:	b29b      	uxth	r3, r3
 800069a:	e0e8      	b.n	800086e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800069c:	8c3b      	ldrh	r3, [r7, #32]
 800069e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d12b      	bne.n	80006fe <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 80006a6:	2303      	movs	r3, #3
 80006a8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80006b2:	4832      	ldr	r0, [pc, #200]	; (800077c <EE_Init+0x2b0>)
 80006b4:	f000 f8ea 	bl	800088c <EE_VerifyPageFullyErased>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10e      	bne.n	80006dc <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80006be:	f107 0214 	add.w	r2, r7, #20
 80006c2:	463b      	mov	r3, r7
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fea6 	bl	8002418 <HAL_FLASHEx_Erase>
 80006cc:	4603      	mov	r3, r0
 80006ce:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80006d0:	7efb      	ldrb	r3, [r7, #27]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <EE_Init+0x210>
          {
            return FlashStatus;
 80006d6:	7efb      	ldrb	r3, [r7, #27]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	e0c8      	b.n	800086e <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80006dc:	f04f 0200 	mov.w	r2, #0
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	4924      	ldr	r1, [pc, #144]	; (8000778 <EE_Init+0x2ac>)
 80006e6:	2001      	movs	r0, #1
 80006e8:	f001 fce0 	bl	80020ac <HAL_FLASH_Program>
 80006ec:	4603      	mov	r3, r0
 80006ee:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80006f0:	7efb      	ldrb	r3, [r7, #27]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f000 80b5 	beq.w	8000862 <EE_Init+0x396>
        {
          return FlashStatus;
 80006f8:	7efb      	ldrb	r3, [r7, #27]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	e0b7      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80006fe:	f000 f957 	bl	80009b0 <EE_Format>
 8000702:	4603      	mov	r3, r0
 8000704:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000706:	7efb      	ldrb	r3, [r7, #27]
 8000708:	2b00      	cmp	r3, #0
 800070a:	f000 80aa 	beq.w	8000862 <EE_Init+0x396>
        {
          return FlashStatus;
 800070e:	7efb      	ldrb	r3, [r7, #27]
 8000710:	b29b      	uxth	r3, r3
 8000712:	e0ac      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000714:	8c3b      	ldrh	r3, [r7, #32]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10a      	bne.n	8000730 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800071a:	f000 f949 	bl	80009b0 <EE_Format>
 800071e:	4603      	mov	r3, r0
 8000720:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000722:	7efb      	ldrb	r3, [r7, #27]
 8000724:	2b00      	cmp	r3, #0
 8000726:	f000 809e 	beq.w	8000866 <EE_Init+0x39a>
        {
          return FlashStatus;
 800072a:	7efb      	ldrb	r3, [r7, #27]
 800072c:	b29b      	uxth	r3, r3
 800072e:	e09e      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000730:	8c3b      	ldrh	r3, [r7, #32]
 8000732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000736:	4293      	cmp	r3, r2
 8000738:	d11b      	bne.n	8000772 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800073a:	2303      	movs	r3, #3
 800073c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <EE_Init+0x2b0>)
 8000748:	f000 f8a0 	bl	800088c <EE_VerifyPageFullyErased>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	f040 8089 	bne.w	8000866 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000754:	f107 0214 	add.w	r2, r7, #20
 8000758:	463b      	mov	r3, r7
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fe5b 	bl	8002418 <HAL_FLASHEx_Erase>
 8000762:	4603      	mov	r3, r0
 8000764:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000766:	7efb      	ldrb	r3, [r7, #27]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d07c      	beq.n	8000866 <EE_Init+0x39a>
          {
            return FlashStatus;
 800076c:	7efb      	ldrb	r3, [r7, #27]
 800076e:	b29b      	uxth	r3, r3
 8000770:	e07d      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000772:	2300      	movs	r3, #0
 8000774:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000776:	e03a      	b.n	80007ee <EE_Init+0x322>
 8000778:	08008000 	.word	0x08008000
 800077c:	0800c000 	.word	0x0800c000
 8000780:	08008006 	.word	0x08008006
 8000784:	20000000 	.word	0x20000000
 8000788:	20000050 	.word	0x20000050
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <EE_Init+0x3ac>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	b29a      	uxth	r2, r3
 8000792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000794:	4939      	ldr	r1, [pc, #228]	; (800087c <EE_Init+0x3b0>)
 8000796:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800079a:	429a      	cmp	r2, r3
 800079c:	d101      	bne.n	80007a2 <EE_Init+0x2d6>
          {
            x = VarIdx;
 800079e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007a0:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80007a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d01d      	beq.n	80007e8 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ae:	4a33      	ldr	r2, [pc, #204]	; (800087c <EE_Init+0x3b0>)
 80007b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b4:	4932      	ldr	r1, [pc, #200]	; (8000880 <EE_Init+0x3b4>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f88e 	bl	80008d8 <EE_ReadVariable>
 80007bc:	4603      	mov	r3, r0
 80007be:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80007c0:	8bbb      	ldrh	r3, [r7, #28]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d010      	beq.n	80007e8 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80007c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007c8:	4a2c      	ldr	r2, [pc, #176]	; (800087c <EE_Init+0x3b0>)
 80007ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <EE_Init+0x3b4>)
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f983 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 80007da:	4603      	mov	r3, r0
 80007dc:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80007de:	8bfb      	ldrh	r3, [r7, #30]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <EE_Init+0x31c>
              {
                return EepromStatus;
 80007e4:	8bfb      	ldrh	r3, [r7, #30]
 80007e6:	e042      	b.n	800086e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80007e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ea:	3301      	adds	r3, #1
 80007ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80007ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007f0:	2b13      	cmp	r3, #19
 80007f2:	d9cb      	bls.n	800078c <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	4921      	ldr	r1, [pc, #132]	; (8000884 <EE_Init+0x3b8>)
 80007fe:	2001      	movs	r0, #1
 8000800:	f001 fc54 	bl	80020ac <HAL_FLASH_Program>
 8000804:	4603      	mov	r3, r0
 8000806:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000808:	7efb      	ldrb	r3, [r7, #27]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <EE_Init+0x348>
        {
          return FlashStatus;
 800080e:	7efb      	ldrb	r3, [r7, #27]
 8000810:	b29b      	uxth	r3, r3
 8000812:	e02c      	b.n	800086e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8000814:	2302      	movs	r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000820:	4819      	ldr	r0, [pc, #100]	; (8000888 <EE_Init+0x3bc>)
 8000822:	f000 f833 	bl	800088c <EE_VerifyPageFullyErased>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d11c      	bne.n	8000866 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800082c:	f107 0214 	add.w	r2, r7, #20
 8000830:	463b      	mov	r3, r7
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fdef 	bl	8002418 <HAL_FLASHEx_Erase>
 800083a:	4603      	mov	r3, r0
 800083c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800083e:	7efb      	ldrb	r3, [r7, #27]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d010      	beq.n	8000866 <EE_Init+0x39a>
          {
            return FlashStatus;
 8000844:	7efb      	ldrb	r3, [r7, #27]
 8000846:	b29b      	uxth	r3, r3
 8000848:	e011      	b.n	800086e <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800084a:	f000 f8b1 	bl	80009b0 <EE_Format>
 800084e:	4603      	mov	r3, r0
 8000850:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000852:	7efb      	ldrb	r3, [r7, #27]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d008      	beq.n	800086a <EE_Init+0x39e>
      {
        return FlashStatus;
 8000858:	7efb      	ldrb	r3, [r7, #27]
 800085a:	b29b      	uxth	r3, r3
 800085c:	e007      	b.n	800086e <EE_Init+0x3a2>
      break;
 800085e:	bf00      	nop
 8000860:	e004      	b.n	800086c <EE_Init+0x3a0>
      break;
 8000862:	bf00      	nop
 8000864:	e002      	b.n	800086c <EE_Init+0x3a0>
      break;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <EE_Init+0x3a0>
      }
      break;
 800086a:	bf00      	nop
  }

  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	0800c006 	.word	0x0800c006
 800087c:	20000000 	.word	0x20000000
 8000880:	20000050 	.word	0x20000050
 8000884:	0800c000 	.word	0x0800c000
 8000888:	08008000 	.word	0x08008000

0800088c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8000898:	f245 5355 	movw	r3, #21845	; 0x5555
 800089c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800089e:	e00d      	b.n	80008bc <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80008a6:	897b      	ldrh	r3, [r7, #10]
 80008a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d002      	beq.n	80008b6 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]

      break;
 80008b4:	e006      	b.n	80008c4 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3304      	adds	r3, #4
 80008ba:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <EE_VerifyPageFullyErased+0x48>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d3ed      	bcc.n	80008a0 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	b29b      	uxth	r3, r3
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	0800c000 	.word	0x0800c000

080008d8 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80008e8:	f245 5355 	movw	r3, #21845	; 0x5555
 80008ec:	81bb      	strh	r3, [r7, #12]
 80008ee:	2301      	movs	r3, #1
 80008f0:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <EE_ReadVariable+0x8c>)
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <EE_ReadVariable+0x8c>)
 80008f8:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 f8aa 	bl	8000a54 <EE_FindValidPage>
 8000900:	4603      	mov	r3, r0
 8000902:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000904:	89fb      	ldrh	r3, [r7, #14]
 8000906:	2bab      	cmp	r3, #171	; 0xab
 8000908:	d101      	bne.n	800090e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800090a:	23ab      	movs	r3, #171	; 0xab
 800090c:	e025      	b.n	800095a <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000914:	3302      	adds	r3, #2
 8000916:	039b      	lsls	r3, r3, #14
 8000918:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800091a:	89fb      	ldrh	r3, [r7, #14]
 800091c:	3301      	adds	r3, #1
 800091e:	039a      	lsls	r2, r3, #14
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <EE_ReadVariable+0x90>)
 8000922:	4413      	add	r3, r2
 8000924:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8000926:	e012      	b.n	800094e <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800092e:	89ba      	ldrh	r2, [r7, #12]
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	429a      	cmp	r2, r3
 8000934:	d108      	bne.n	8000948 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	3b02      	subs	r3, #2
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	b29a      	uxth	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	82fb      	strh	r3, [r7, #22]

      break;
 8000946:	e007      	b.n	8000958 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	3b04      	subs	r3, #4
 800094c:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3302      	adds	r3, #2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8e7      	bhi.n	8000928 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000958:	8afb      	ldrh	r3, [r7, #22]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08008000 	.word	0x08008000
 8000968:	08007ffe 	.word	0x08007ffe

0800096c <EE_WriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
uint16_t EE_WriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b084      	sub	sp, #16
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	460a      	mov	r2, r1
 8000976:	80fb      	strh	r3, [r7, #6]
 8000978:	4613      	mov	r3, r2
 800097a:	80bb      	strh	r3, [r7, #4]
  uint16_t Status = 0;
 800097c:	2300      	movs	r3, #0
 800097e:	81fb      	strh	r3, [r7, #14]

  /* Write the variable virtual address and value in the EEPROM */
  Status = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000980:	88ba      	ldrh	r2, [r7, #4]
 8000982:	88fb      	ldrh	r3, [r7, #6]
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f000 f8aa 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 800098c:	4603      	mov	r3, r0
 800098e:	81fb      	strh	r3, [r7, #14]

  /* In case the EEPROM active page is full */
  if (Status == PAGE_FULL)
 8000990:	89fb      	ldrh	r3, [r7, #14]
 8000992:	2b80      	cmp	r3, #128	; 0x80
 8000994:	d107      	bne.n	80009a6 <EE_WriteVariable+0x3a>
  {
    /* Perform Page transfer */
    Status = EE_PageTransfer(VirtAddress, Data);
 8000996:	88ba      	ldrh	r2, [r7, #4]
 8000998:	88fb      	ldrh	r3, [r7, #6]
 800099a:	4611      	mov	r1, r2
 800099c:	4618      	mov	r0, r3
 800099e:	f000 f8f9 	bl	8000b94 <EE_PageTransfer>
 80009a2:	4603      	mov	r3, r0
 80009a4:	81fb      	strh	r3, [r7, #14]
  }

  /* Return last operation status */
  return Status;
 80009a6:	89fb      	ldrh	r3, [r7, #14]
}
 80009a8:	4618      	mov	r0, r3
 80009aa:	3710      	adds	r7, #16
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}

080009b0 <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b088      	sub	sp, #32
 80009b4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 80009b6:	2300      	movs	r3, #0
 80009b8:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 80009be:	2300      	movs	r3, #0
 80009c0:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 80009c2:	2302      	movs	r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 80009c6:	2301      	movs	r3, #1
 80009c8:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 80009ce:	481f      	ldr	r0, [pc, #124]	; (8000a4c <EE_Format+0x9c>)
 80009d0:	f7ff ff5c 	bl	800088c <EE_VerifyPageFullyErased>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d10d      	bne.n	80009f6 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80009da:	f107 0218 	add.w	r2, r7, #24
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4611      	mov	r1, r2
 80009e2:	4618      	mov	r0, r3
 80009e4:	f001 fd18 	bl	8002418 <HAL_FLASHEx_Erase>
 80009e8:	4603      	mov	r3, r0
 80009ea:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80009ec:	7ffb      	ldrb	r3, [r7, #31]
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <EE_Format+0x46>
    {
      return FlashStatus;
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	e025      	b.n	8000a42 <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80009f6:	f04f 0200 	mov.w	r2, #0
 80009fa:	f04f 0300 	mov.w	r3, #0
 80009fe:	4913      	ldr	r1, [pc, #76]	; (8000a4c <EE_Format+0x9c>)
 8000a00:	2001      	movs	r0, #1
 8000a02:	f001 fb53 	bl	80020ac <HAL_FLASH_Program>
 8000a06:	4603      	mov	r3, r0
 8000a08:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000a0a:	7ffb      	ldrb	r3, [r7, #31]
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <EE_Format+0x64>
  {
    return FlashStatus;
 8000a10:	7ffb      	ldrb	r3, [r7, #31]
 8000a12:	e016      	b.n	8000a42 <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 8000a14:	2303      	movs	r3, #3
 8000a16:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000a18:	480d      	ldr	r0, [pc, #52]	; (8000a50 <EE_Format+0xa0>)
 8000a1a:	f7ff ff37 	bl	800088c <EE_VerifyPageFullyErased>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d10d      	bne.n	8000a40 <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000a24:	f107 0218 	add.w	r2, r7, #24
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4611      	mov	r1, r2
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f001 fcf3 	bl	8002418 <HAL_FLASHEx_Erase>
 8000a32:	4603      	mov	r3, r0
 8000a34:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 8000a36:	7ffb      	ldrb	r3, [r7, #31]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d001      	beq.n	8000a40 <EE_Format+0x90>
    {
      return FlashStatus;
 8000a3c:	7ffb      	ldrb	r3, [r7, #31]
 8000a3e:	e000      	b.n	8000a42 <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 8000a40:	2300      	movs	r3, #0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3720      	adds	r7, #32
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}
 8000a4a:	bf00      	nop
 8000a4c:	08008000 	.word	0x08008000
 8000a50:	0800c000 	.word	0x0800c000

08000a54 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000a54:	b480      	push	{r7}
 8000a56:	b085      	sub	sp, #20
 8000a58:	af00      	add	r7, sp, #0
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000a5e:	2306      	movs	r3, #6
 8000a60:	81fb      	strh	r3, [r7, #14]
 8000a62:	2306      	movs	r3, #6
 8000a64:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000a66:	4b1c      	ldr	r3, [pc, #112]	; (8000ad8 <EE_FindValidPage+0x84>)
 8000a68:	881b      	ldrh	r3, [r3, #0]
 8000a6a:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000a6c:	4b1b      	ldr	r3, [pc, #108]	; (8000adc <EE_FindValidPage+0x88>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000a72:	79fb      	ldrb	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d01b      	beq.n	8000ab0 <EE_FindValidPage+0x5c>
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d125      	bne.n	8000ac8 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000a7c:	89bb      	ldrh	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d108      	bne.n	8000a94 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000a82:	89fb      	ldrh	r3, [r7, #14]
 8000a84:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d101      	bne.n	8000a90 <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	e01c      	b.n	8000aca <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000a90:	2301      	movs	r3, #1
 8000a92:	e01a      	b.n	8000aca <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000a94:	89fb      	ldrh	r3, [r7, #14]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	d108      	bne.n	8000aac <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000a9a:	89bb      	ldrh	r3, [r7, #12]
 8000a9c:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d101      	bne.n	8000aa8 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000aa4:	2301      	movs	r3, #1
 8000aa6:	e010      	b.n	8000aca <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	e00e      	b.n	8000aca <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000aac:	23ab      	movs	r3, #171	; 0xab
 8000aae:	e00c      	b.n	8000aca <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000ab0:	89fb      	ldrh	r3, [r7, #14]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d101      	bne.n	8000aba <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	e007      	b.n	8000aca <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000aba:	89bb      	ldrh	r3, [r7, #12]
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d101      	bne.n	8000ac4 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000ac0:	2301      	movs	r3, #1
 8000ac2:	e002      	b.n	8000aca <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000ac4:	23ab      	movs	r3, #171	; 0xab
 8000ac6:	e000      	b.n	8000aca <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000ac8:	2300      	movs	r3, #0
  }
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	08008000 	.word	0x08008000
 8000adc:	0800c000 	.word	0x0800c000

08000ae0 <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	460a      	mov	r2, r1
 8000aea:	80fb      	strh	r3, [r7, #6]
 8000aec:	4613      	mov	r3, r2
 8000aee:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000af0:	2300      	movs	r3, #0
 8000af2:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000af4:	2300      	movs	r3, #0
 8000af6:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000af8:	4b23      	ldr	r3, [pc, #140]	; (8000b88 <EE_VerifyPageFullWriteVariable+0xa8>)
 8000afa:	617b      	str	r3, [r7, #20]
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <EE_VerifyPageFullWriteVariable+0xac>)
 8000afe:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000b00:	2001      	movs	r0, #1
 8000b02:	f7ff ffa7 	bl	8000a54 <EE_FindValidPage>
 8000b06:	4603      	mov	r3, r0
 8000b08:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000b0a:	8a3b      	ldrh	r3, [r7, #16]
 8000b0c:	2bab      	cmp	r3, #171	; 0xab
 8000b0e:	d101      	bne.n	8000b14 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8000b10:	23ab      	movs	r3, #171	; 0xab
 8000b12:	e035      	b.n	8000b80 <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000b14:	8a3b      	ldrh	r3, [r7, #16]
 8000b16:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000b1a:	3302      	adds	r3, #2
 8000b1c:	039b      	lsls	r3, r3, #14
 8000b1e:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000b20:	8a3b      	ldrh	r3, [r7, #16]
 8000b22:	3301      	adds	r3, #1
 8000b24:	039a      	lsls	r2, r3, #14
 8000b26:	4b1a      	ldr	r3, [pc, #104]	; (8000b90 <EE_VerifyPageFullWriteVariable+0xb0>)
 8000b28:	4413      	add	r3, r2
 8000b2a:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000b2c:	e023      	b.n	8000b76 <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000b2e:	697b      	ldr	r3, [r7, #20]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b36:	d11b      	bne.n	8000b70 <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000b38:	88ba      	ldrh	r2, [r7, #4]
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	6979      	ldr	r1, [r7, #20]
 8000b40:	2001      	movs	r0, #1
 8000b42:	f001 fab3 	bl	80020ac <HAL_FLASH_Program>
 8000b46:	4603      	mov	r3, r0
 8000b48:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000b4a:	7cfb      	ldrb	r3, [r7, #19]
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d002      	beq.n	8000b56 <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 8000b50:	7cfb      	ldrb	r3, [r7, #19]
 8000b52:	b29b      	uxth	r3, r3
 8000b54:	e014      	b.n	8000b80 <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	1c99      	adds	r1, r3, #2
 8000b5a:	88fa      	ldrh	r2, [r7, #6]
 8000b5c:	f04f 0300 	mov.w	r3, #0
 8000b60:	2001      	movs	r0, #1
 8000b62:	f001 faa3 	bl	80020ac <HAL_FLASH_Program>
 8000b66:	4603      	mov	r3, r0
 8000b68:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000b6a:	7cfb      	ldrb	r3, [r7, #19]
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	e007      	b.n	8000b80 <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	3304      	adds	r3, #4
 8000b74:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000b76:	697a      	ldr	r2, [r7, #20]
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	429a      	cmp	r2, r3
 8000b7c:	d3d7      	bcc.n	8000b2e <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000b7e:	2380      	movs	r3, #128	; 0x80
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3718      	adds	r7, #24
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	08008000 	.word	0x08008000
 8000b8c:	0800c000 	.word	0x0800c000
 8000b90:	08007fff 	.word	0x08007fff

08000b94 <EE_PageTransfer>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_PageTransfer(uint16_t VirtAddress, uint16_t Data)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b08c      	sub	sp, #48	; 0x30
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	460a      	mov	r2, r1
 8000b9e:	80fb      	strh	r3, [r7, #6]
 8000ba0:	4613      	mov	r3, r2
 8000ba2:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t NewPageAddress = EEPROM_START_ADDRESS;
 8000baa:	4b54      	ldr	r3, [pc, #336]	; (8000cfc <EE_PageTransfer+0x168>)
 8000bac:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint16_t OldPageId=0;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	857b      	strh	r3, [r7, #42]	; 0x2a
  uint16_t ValidPage = PAGE0, VarIdx = 0;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	853b      	strh	r3, [r7, #40]	; 0x28
  uint16_t EepromStatus = 0, ReadStatus = 0;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	847b      	strh	r3, [r7, #34]	; 0x22
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	843b      	strh	r3, [r7, #32]
  uint32_t SectorError = 0;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
  FLASH_EraseInitTypeDef pEraseInit;

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff ff44 	bl	8000a54 <EE_FindValidPage>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (ValidPage == PAGE1)       /* Page1 valid */
 8000bd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d104      	bne.n	8000be0 <EE_PageTransfer+0x4c>
  {
    /* New page address where variable will be moved to */
    NewPageAddress = PAGE0_BASE_ADDRESS;
 8000bd6:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <EE_PageTransfer+0x168>)
 8000bd8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE1_ID;
 8000bda:	2303      	movs	r3, #3
 8000bdc:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000bde:	e009      	b.n	8000bf4 <EE_PageTransfer+0x60>
  }
  else if (ValidPage == PAGE0)  /* Page0 valid */
 8000be0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d104      	bne.n	8000bf0 <EE_PageTransfer+0x5c>
  {
    /* New page address  where variable will be moved to */
    NewPageAddress = PAGE1_BASE_ADDRESS;
 8000be6:	4b46      	ldr	r3, [pc, #280]	; (8000d00 <EE_PageTransfer+0x16c>)
 8000be8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Old page ID where variable will be taken from */
    OldPageId = PAGE0_ID;
 8000bea:	2302      	movs	r3, #2
 8000bec:	857b      	strh	r3, [r7, #42]	; 0x2a
 8000bee:	e001      	b.n	8000bf4 <EE_PageTransfer+0x60>
  }
  else
  {
    return NO_VALID_PAGE;       /* No valid Page */
 8000bf0:	23ab      	movs	r3, #171	; 0xab
 8000bf2:	e07e      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }

  /* Set the new Page status to RECEIVE_DATA status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, RECEIVE_DATA);  
 8000bf4:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000bf8:	f04f 0300 	mov.w	r3, #0
 8000bfc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f001 fa54 	bl	80020ac <HAL_FLASH_Program>
 8000c04:	4603      	mov	r3, r0
 8000c06:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000c0a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d003      	beq.n	8000c1a <EE_PageTransfer+0x86>
  {
    return FlashStatus;
 8000c12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000c16:	b29b      	uxth	r3, r3
 8000c18:	e06b      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }
  
  /* Write the variable passed as parameter in the new active page */
  EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddress, Data);
 8000c1a:	88ba      	ldrh	r2, [r7, #4]
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	4611      	mov	r1, r2
 8000c20:	4618      	mov	r0, r3
 8000c22:	f7ff ff5d 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 8000c26:	4603      	mov	r3, r0
 8000c28:	847b      	strh	r3, [r7, #34]	; 0x22
  /* If program operation was failed, a Flash error code is returned */
  if (EepromStatus != HAL_OK)
 8000c2a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <EE_PageTransfer+0xa0>
  {
    return EepromStatus;
 8000c30:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c32:	e05e      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }

  /* Transfer process: transfer variables from old to the new active page */
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000c34:	2300      	movs	r3, #0
 8000c36:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c38:	e027      	b.n	8000c8a <EE_PageTransfer+0xf6>
  {
    if (VirtAddVarTab[VarIdx] != VirtAddress)  /* Check each variable except the one passed as parameter */
 8000c3a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c3c:	4a31      	ldr	r2, [pc, #196]	; (8000d04 <EE_PageTransfer+0x170>)
 8000c3e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c42:	88fa      	ldrh	r2, [r7, #6]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d01d      	beq.n	8000c84 <EE_PageTransfer+0xf0>
    {
      /* Read the other last variable updates */
      ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 8000c48:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c4a:	4a2e      	ldr	r2, [pc, #184]	; (8000d04 <EE_PageTransfer+0x170>)
 8000c4c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c50:	492d      	ldr	r1, [pc, #180]	; (8000d08 <EE_PageTransfer+0x174>)
 8000c52:	4618      	mov	r0, r3
 8000c54:	f7ff fe40 	bl	80008d8 <EE_ReadVariable>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	843b      	strh	r3, [r7, #32]
      /* In case variable corresponding to the virtual address was found */
      if (ReadStatus != 0x1)
 8000c5c:	8c3b      	ldrh	r3, [r7, #32]
 8000c5e:	2b01      	cmp	r3, #1
 8000c60:	d010      	beq.n	8000c84 <EE_PageTransfer+0xf0>
      {
        /* Transfer the variable to the new active page */
        EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000c62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c64:	4a27      	ldr	r2, [pc, #156]	; (8000d04 <EE_PageTransfer+0x170>)
 8000c66:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c6a:	4a27      	ldr	r2, [pc, #156]	; (8000d08 <EE_PageTransfer+0x174>)
 8000c6c:	8812      	ldrh	r2, [r2, #0]
 8000c6e:	4611      	mov	r1, r2
 8000c70:	4618      	mov	r0, r3
 8000c72:	f7ff ff35 	bl	8000ae0 <EE_VerifyPageFullWriteVariable>
 8000c76:	4603      	mov	r3, r0
 8000c78:	847b      	strh	r3, [r7, #34]	; 0x22
        /* If program operation was failed, a Flash error code is returned */
        if (EepromStatus != HAL_OK)
 8000c7a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <EE_PageTransfer+0xf0>
        {
          return EepromStatus;
 8000c80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8000c82:	e036      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000c84:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c86:	3301      	adds	r3, #1
 8000c88:	853b      	strh	r3, [r7, #40]	; 0x28
 8000c8a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8000c8c:	2b13      	cmp	r3, #19
 8000c8e:	d9d4      	bls.n	8000c3a <EE_PageTransfer+0xa6>
        }
      }
    }
  }

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 8000c90:	2300      	movs	r3, #0
 8000c92:	60bb      	str	r3, [r7, #8]
  pEraseInit.Sector = OldPageId;
 8000c94:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8000c96:	613b      	str	r3, [r7, #16]
  pEraseInit.NbSectors = 1;
 8000c98:	2301      	movs	r3, #1
 8000c9a:	617b      	str	r3, [r7, #20]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61bb      	str	r3, [r7, #24]
  
  /* Erase the old Page: Set old Page status to ERASED status */
  FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);  
 8000ca0:	f107 021c 	add.w	r2, r7, #28
 8000ca4:	f107 0308 	add.w	r3, r7, #8
 8000ca8:	4611      	mov	r1, r2
 8000caa:	4618      	mov	r0, r3
 8000cac:	f001 fbb4 	bl	8002418 <HAL_FLASHEx_Erase>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If erase operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000cb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d003      	beq.n	8000cc6 <EE_PageTransfer+0x132>
  {
    return FlashStatus;
 8000cbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cc2:	b29b      	uxth	r3, r3
 8000cc4:	e015      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }

  /* Set new Page status to VALID_PAGE status */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, NewPageAddress, VALID_PAGE);   
 8000cc6:	f04f 0200 	mov.w	r2, #0
 8000cca:	f04f 0300 	mov.w	r3, #0
 8000cce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8000cd0:	2001      	movs	r0, #1
 8000cd2:	f001 f9eb 	bl	80020ac <HAL_FLASH_Program>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 8000cdc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d003      	beq.n	8000cec <EE_PageTransfer+0x158>
  {
    return FlashStatus;
 8000ce4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000ce8:	b29b      	uxth	r3, r3
 8000cea:	e002      	b.n	8000cf2 <EE_PageTransfer+0x15e>
  }

  /* Return last operation flash status */
  return FlashStatus;
 8000cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000cf0:	b29b      	uxth	r3, r3
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3730      	adds	r7, #48	; 0x30
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	08008000 	.word	0x08008000
 8000d00:	0800c000 	.word	0x0800c000
 8000d04:	20000000 	.word	0x20000000
 8000d08:	20000050 	.word	0x20000050

08000d0c <my_message_queue_init>:
struct message {
	uint8_t data[RXBUFFERSIZE];
};

QUEUE_DECLARATION(my_message_queue, struct message, RXBUFFERSIZE);
QUEUE_DEFINITION(my_message_queue, struct message);
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	2200      	movs	r2, #0
 8000d18:	801a      	strh	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	805a      	strh	r2, [r3, #2]
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <my_message_queue_enqueue>:
 8000d2c:	b480      	push	{r7}
 8000d2e:	b087      	sub	sp, #28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	885a      	ldrh	r2, [r3, #2]
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	881b      	ldrh	r3, [r3, #0]
 8000d3e:	1ad3      	subs	r3, r2, r3
 8000d40:	82fb      	strh	r3, [r7, #22]
 8000d42:	2308      	movs	r3, #8
 8000d44:	613b      	str	r3, [r7, #16]
 8000d46:	8afb      	ldrh	r3, [r7, #22]
 8000d48:	693a      	ldr	r2, [r7, #16]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	d101      	bne.n	8000d52 <my_message_queue_enqueue+0x26>
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e016      	b.n	8000d80 <my_message_queue_enqueue+0x54>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	885b      	ldrh	r3, [r3, #2]
 8000d56:	1c5a      	adds	r2, r3, #1
 8000d58:	b291      	uxth	r1, r2
 8000d5a:	687a      	ldr	r2, [r7, #4]
 8000d5c:	8051      	strh	r1, [r2, #2]
 8000d5e:	693a      	ldr	r2, [r7, #16]
 8000d60:	b292      	uxth	r2, r2
 8000d62:	3a01      	subs	r2, #1
 8000d64:	b292      	uxth	r2, r2
 8000d66:	4013      	ands	r3, r2
 8000d68:	81fb      	strh	r3, [r7, #14]
 8000d6a:	89fb      	ldrh	r3, [r7, #14]
 8000d6c:	687a      	ldr	r2, [r7, #4]
 8000d6e:	00db      	lsls	r3, r3, #3
 8000d70:	4413      	add	r3, r2
 8000d72:	683a      	ldr	r2, [r7, #0]
 8000d74:	3304      	adds	r3, #4
 8000d76:	6811      	ldr	r1, [r2, #0]
 8000d78:	6852      	ldr	r2, [r2, #4]
 8000d7a:	6019      	str	r1, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	2300      	movs	r3, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	371c      	adds	r7, #28
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <my_message_queue_dequeue>:
 8000d8c:	b480      	push	{r7}
 8000d8e:	b087      	sub	sp, #28
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	885a      	ldrh	r2, [r3, #2]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	881b      	ldrh	r3, [r3, #0]
 8000d9e:	1ad3      	subs	r3, r2, r3
 8000da0:	82fb      	strh	r3, [r7, #22]
 8000da2:	2308      	movs	r3, #8
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	8afb      	ldrh	r3, [r7, #22]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d101      	bne.n	8000db0 <my_message_queue_dequeue+0x24>
 8000dac:	2301      	movs	r3, #1
 8000dae:	e017      	b.n	8000de0 <my_message_queue_dequeue+0x54>
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	1c5a      	adds	r2, r3, #1
 8000db6:	b291      	uxth	r1, r2
 8000db8:	687a      	ldr	r2, [r7, #4]
 8000dba:	8011      	strh	r1, [r2, #0]
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	b292      	uxth	r2, r2
 8000dc0:	3a01      	subs	r2, #1
 8000dc2:	b292      	uxth	r2, r2
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	81fb      	strh	r3, [r7, #14]
 8000dc8:	89fb      	ldrh	r3, [r7, #14]
 8000dca:	6839      	ldr	r1, [r7, #0]
 8000dcc:	687a      	ldr	r2, [r7, #4]
 8000dce:	00db      	lsls	r3, r3, #3
 8000dd0:	4413      	add	r3, r2
 8000dd2:	460a      	mov	r2, r1
 8000dd4:	3304      	adds	r3, #4
 8000dd6:	6819      	ldr	r1, [r3, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	6011      	str	r1, [r2, #0]
 8000ddc:	6053      	str	r3, [r2, #4]
 8000dde:	2300      	movs	r3, #0
 8000de0:	4618      	mov	r0, r3
 8000de2:	371c      	adds	r7, #28
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <Send_Bluettoh_Data>:
{
	HAL_UART_Transmit(&huart2,ch,numElements,10);
}

void Send_Bluettoh_Data(uint8_t *ch, size_t numElements)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1,ch,numElements,10);
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	b29a      	uxth	r2, r3
 8000dfa:	230a      	movs	r3, #10
 8000dfc:	6879      	ldr	r1, [r7, #4]
 8000dfe:	4803      	ldr	r0, [pc, #12]	; (8000e0c <Send_Bluettoh_Data+0x20>)
 8000e00:	f003 fecb 	bl	8004b9a <HAL_UART_Transmit>
}
 8000e04:	bf00      	nop
 8000e06:	3708      	adds	r7, #8
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	2000012c 	.word	0x2000012c

08000e10 <IsAlive>:

void IsAlive()
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  uint8_t data[] = {0};
 8000e16:	2300      	movs	r3, #0
 8000e18:	713b      	strb	r3, [r7, #4]
  Send_Bluettoh_Data(&data,sizeof(data));
 8000e1a:	1d3b      	adds	r3, r7, #4
 8000e1c:	2101      	movs	r1, #1
 8000e1e:	4618      	mov	r0, r3
 8000e20:	f7ff ffe4 	bl	8000dec <Send_Bluettoh_Data>
}
 8000e24:	bf00      	nop
 8000e26:	3708      	adds	r7, #8
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}

08000e2c <SetConfigDispenserTime>:

void SetConfigDispenserTime()
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b082      	sub	sp, #8
 8000e30:	af00      	add	r7, sp, #0
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	71fb      	strb	r3, [r7, #7]
 8000e36:	e018      	b.n	8000e6a <SetConfigDispenserTime+0x3e>
  {
    if((EE_WriteVariable(VirtAddVarTab[i],  (uint16_t)bluetooth_rxBuffer[i])) != HAL_OK)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	4a10      	ldr	r2, [pc, #64]	; (8000e7c <SetConfigDispenserTime+0x50>)
 8000e3c:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	490f      	ldr	r1, [pc, #60]	; (8000e80 <SetConfigDispenserTime+0x54>)
 8000e44:	5ccb      	ldrb	r3, [r1, r3]
 8000e46:	b29b      	uxth	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	f7ff fd8e 	bl	800096c <EE_WriteVariable>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d006      	beq.n	8000e64 <SetConfigDispenserTime+0x38>
      {
        uint8_t error[] = {9};
 8000e56:	2309      	movs	r3, #9
 8000e58:	713b      	strb	r3, [r7, #4]
        Send_Bluettoh_Data(&error,sizeof(error));
 8000e5a:	1d3b      	adds	r3, r7, #4
 8000e5c:	2101      	movs	r1, #1
 8000e5e:	4618      	mov	r0, r3
 8000e60:	f7ff ffc4 	bl	8000dec <Send_Bluettoh_Data>
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000e64:	79fb      	ldrb	r3, [r7, #7]
 8000e66:	3301      	adds	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	2b07      	cmp	r3, #7
 8000e6e:	d9e3      	bls.n	8000e38 <SetConfigDispenserTime+0xc>
      }
  } 
}
 8000e70:	bf00      	nop
 8000e72:	bf00      	nop
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	2000005c 	.word	0x2000005c

08000e84 <GetConfigDispenserTime>:

void GetConfigDispenserTime(uint8_t* data)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	73fb      	strb	r3, [r7, #15]
 8000e90:	e01c      	b.n	8000ecc <GetConfigDispenserTime+0x48>
  {
	  if((EE_ReadVariable(VirtAddVarTab[i],  &VarDataTab[i])) != HAL_OK)
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	4a11      	ldr	r2, [pc, #68]	; (8000edc <GetConfigDispenserTime+0x58>)
 8000e96:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000e9a:	7bfb      	ldrb	r3, [r7, #15]
 8000e9c:	005b      	lsls	r3, r3, #1
 8000e9e:	4910      	ldr	r1, [pc, #64]	; (8000ee0 <GetConfigDispenserTime+0x5c>)
 8000ea0:	440b      	add	r3, r1
 8000ea2:	4619      	mov	r1, r3
 8000ea4:	4610      	mov	r0, r2
 8000ea6:	f7ff fd17 	bl	80008d8 <EE_ReadVariable>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d001      	beq.n	8000eb4 <GetConfigDispenserTime+0x30>
	    {
	      uint8_t error[] = {9};
 8000eb0:	2309      	movs	r3, #9
 8000eb2:	733b      	strb	r3, [r7, #12]
	}
    data[i] = (uint8_t) VarDataTab[i];
 8000eb4:	7bfb      	ldrb	r3, [r7, #15]
 8000eb6:	4a0a      	ldr	r2, [pc, #40]	; (8000ee0 <GetConfigDispenserTime+0x5c>)
 8000eb8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000ebc:	7bfb      	ldrb	r3, [r7, #15]
 8000ebe:	687a      	ldr	r2, [r7, #4]
 8000ec0:	4413      	add	r3, r2
 8000ec2:	b2ca      	uxtb	r2, r1
 8000ec4:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000ec6:	7bfb      	ldrb	r3, [r7, #15]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	73fb      	strb	r3, [r7, #15]
 8000ecc:	7bfb      	ldrb	r3, [r7, #15]
 8000ece:	2b07      	cmp	r3, #7
 8000ed0:	d9df      	bls.n	8000e92 <GetConfigDispenserTime+0xe>
  }

}
 8000ed2:	bf00      	nop
 8000ed4:	bf00      	nop
 8000ed6:	3710      	adds	r7, #16
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000000 	.word	0x20000000
 8000ee0:	20000064 	.word	0x20000064

08000ee4 <UpdateRTC>:

void UpdateRTC()
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

	sTime1.Hours = bluetooth_rxBuffer[3];
 8000ee8:	4b19      	ldr	r3, [pc, #100]	; (8000f50 <UpdateRTC+0x6c>)
 8000eea:	78da      	ldrb	r2, [r3, #3]
 8000eec:	4b19      	ldr	r3, [pc, #100]	; (8000f54 <UpdateRTC+0x70>)
 8000eee:	701a      	strb	r2, [r3, #0]
	sTime1.Minutes = bluetooth_rxBuffer[4];
 8000ef0:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <UpdateRTC+0x6c>)
 8000ef2:	791a      	ldrb	r2, [r3, #4]
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <UpdateRTC+0x70>)
 8000ef6:	705a      	strb	r2, [r3, #1]
	sTime1.Seconds = bluetooth_rxBuffer[5];
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <UpdateRTC+0x6c>)
 8000efa:	795a      	ldrb	r2, [r3, #5]
 8000efc:	4b15      	ldr	r3, [pc, #84]	; (8000f54 <UpdateRTC+0x70>)
 8000efe:	709a      	strb	r2, [r3, #2]
	sTime1.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <UpdateRTC+0x70>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
	sTime1.StoreOperation = RTC_STOREOPERATION_RESET;
 8000f06:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <UpdateRTC+0x70>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
	if (HAL_RTC_SetTime(&hrtc, &sTime1, RTC_FORMAT_BCD) != HAL_OK)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4911      	ldr	r1, [pc, #68]	; (8000f54 <UpdateRTC+0x70>)
 8000f10:	4811      	ldr	r0, [pc, #68]	; (8000f58 <UpdateRTC+0x74>)
 8000f12:	f002 fb4c 	bl	80035ae <HAL_RTC_SetTime>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <UpdateRTC+0x3c>
	{
		Error_Handler();
 8000f1c:	f000 fcd6 	bl	80018cc <Error_Handler>
	}

	sDate1.Date = bluetooth_rxBuffer[0];
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <UpdateRTC+0x6c>)
 8000f22:	781a      	ldrb	r2, [r3, #0]
 8000f24:	4b0d      	ldr	r3, [pc, #52]	; (8000f5c <UpdateRTC+0x78>)
 8000f26:	709a      	strb	r2, [r3, #2]
	sDate1.Month = bluetooth_rxBuffer[1];
 8000f28:	4b09      	ldr	r3, [pc, #36]	; (8000f50 <UpdateRTC+0x6c>)
 8000f2a:	785a      	ldrb	r2, [r3, #1]
 8000f2c:	4b0b      	ldr	r3, [pc, #44]	; (8000f5c <UpdateRTC+0x78>)
 8000f2e:	705a      	strb	r2, [r3, #1]
	sDate1.Year = bluetooth_rxBuffer[2];
 8000f30:	4b07      	ldr	r3, [pc, #28]	; (8000f50 <UpdateRTC+0x6c>)
 8000f32:	789a      	ldrb	r2, [r3, #2]
 8000f34:	4b09      	ldr	r3, [pc, #36]	; (8000f5c <UpdateRTC+0x78>)
 8000f36:	70da      	strb	r2, [r3, #3]
	if (HAL_RTC_SetDate(&hrtc, &sDate1, RTC_FORMAT_BCD) != HAL_OK)
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <UpdateRTC+0x78>)
 8000f3c:	4806      	ldr	r0, [pc, #24]	; (8000f58 <UpdateRTC+0x74>)
 8000f3e:	f002 fc51 	bl	80037e4 <HAL_RTC_SetDate>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <UpdateRTC+0x68>
	{
		Error_Handler();
 8000f48:	f000 fcc0 	bl	80018cc <Error_Handler>
	}
}
 8000f4c:	bf00      	nop
 8000f4e:	bd80      	pop	{r7, pc}
 8000f50:	2000005c 	.word	0x2000005c
 8000f54:	2000021c 	.word	0x2000021c
 8000f58:	20000170 	.word	0x20000170
 8000f5c:	20000128 	.word	0x20000128

08000f60 <GetRTC>:

void GetRTC(uint8_t* data)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]

  HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BCD);
 8000f68:	2201      	movs	r2, #1
 8000f6a:	4915      	ldr	r1, [pc, #84]	; (8000fc0 <GetRTC+0x60>)
 8000f6c:	4815      	ldr	r0, [pc, #84]	; (8000fc4 <GetRTC+0x64>)
 8000f6e:	f002 fbdb 	bl	8003728 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BCD);
 8000f72:	2201      	movs	r2, #1
 8000f74:	4914      	ldr	r1, [pc, #80]	; (8000fc8 <GetRTC+0x68>)
 8000f76:	4813      	ldr	r0, [pc, #76]	; (8000fc4 <GetRTC+0x64>)
 8000f78:	f002 fcdb 	bl	8003932 <HAL_RTC_GetDate>

  data[0] = sDate1.Date;
 8000f7c:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <GetRTC+0x68>)
 8000f7e:	789a      	ldrb	r2, [r3, #2]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	701a      	strb	r2, [r3, #0]
  data[1] = sDate1.Month;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	3301      	adds	r3, #1
 8000f88:	4a0f      	ldr	r2, [pc, #60]	; (8000fc8 <GetRTC+0x68>)
 8000f8a:	7852      	ldrb	r2, [r2, #1]
 8000f8c:	701a      	strb	r2, [r3, #0]
  data[2] = sDate1.Year;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3302      	adds	r3, #2
 8000f92:	4a0d      	ldr	r2, [pc, #52]	; (8000fc8 <GetRTC+0x68>)
 8000f94:	78d2      	ldrb	r2, [r2, #3]
 8000f96:	701a      	strb	r2, [r3, #0]
  data[3] = sTime1.Hours;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	3303      	adds	r3, #3
 8000f9c:	4a08      	ldr	r2, [pc, #32]	; (8000fc0 <GetRTC+0x60>)
 8000f9e:	7812      	ldrb	r2, [r2, #0]
 8000fa0:	701a      	strb	r2, [r3, #0]
  data[4] = sTime1.Minutes;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	4a06      	ldr	r2, [pc, #24]	; (8000fc0 <GetRTC+0x60>)
 8000fa8:	7852      	ldrb	r2, [r2, #1]
 8000faa:	701a      	strb	r2, [r3, #0]
  data[5] = sTime1.Seconds;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	3305      	adds	r3, #5
 8000fb0:	4a03      	ldr	r2, [pc, #12]	; (8000fc0 <GetRTC+0x60>)
 8000fb2:	7892      	ldrb	r2, [r2, #2]
 8000fb4:	701a      	strb	r2, [r3, #0]

}
 8000fb6:	bf00      	nop
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
 8000fbe:	bf00      	nop
 8000fc0:	2000021c 	.word	0x2000021c
 8000fc4:	20000170 	.word	0x20000170
 8000fc8:	20000128 	.word	0x20000128

08000fcc <StartInsertionProcess>:

StartInsertionProcess(uint8_t* data)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	uint8_t position = bluetooth_rxBuffer[RXBUFFERSIZE-2];
 8000fd4:	4b09      	ldr	r3, [pc, #36]	; (8000ffc <StartInsertionProcess+0x30>)
 8000fd6:	799b      	ldrb	r3, [r3, #6]
 8000fd8:	73fb      	strb	r3, [r7, #15]

	StartDispenserRotationProcess(position);
 8000fda:	7bfb      	ldrb	r3, [r7, #15]
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f000 f92f 	bl	8001240 <StartDispenserRotationProcess>

	memcpy(data, bluetooth_rxBuffer, RXBUFFERSIZE * sizeof(uint8_t));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4905      	ldr	r1, [pc, #20]	; (8000ffc <StartInsertionProcess+0x30>)
 8000fe6:	461a      	mov	r2, r3
 8000fe8:	460b      	mov	r3, r1
 8000fea:	cb03      	ldmia	r3!, {r0, r1}
 8000fec:	6010      	str	r0, [r2, #0]
 8000fee:	6051      	str	r1, [r2, #4]
}
 8000ff0:	bf00      	nop
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3710      	adds	r7, #16
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	2000005c 	.word	0x2000005c

08001000 <Command>:

void Command()
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
  uint8_t data[RXBUFFERSIZE] = {0};
 8001006:	2300      	movs	r3, #0
 8001008:	603b      	str	r3, [r7, #0]
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  switch (bluetooth_rxBuffer[RXBUFFERSIZE-1])
 800100e:	4b22      	ldr	r3, [pc, #136]	; (8001098 <Command+0x98>)
 8001010:	79db      	ldrb	r3, [r3, #7]
 8001012:	3b01      	subs	r3, #1
 8001014:	2b0a      	cmp	r3, #10
 8001016:	d835      	bhi.n	8001084 <Command+0x84>
 8001018:	a201      	add	r2, pc, #4	; (adr r2, 8001020 <Command+0x20>)
 800101a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800101e:	bf00      	nop
 8001020:	0800104d 	.word	0x0800104d
 8001024:	08001053 	.word	0x08001053
 8001028:	08001059 	.word	0x08001059
 800102c:	08001063 	.word	0x08001063
 8001030:	08001069 	.word	0x08001069
 8001034:	08001073 	.word	0x08001073
 8001038:	08001085 	.word	0x08001085
 800103c:	08001085 	.word	0x08001085
 8001040:	08001085 	.word	0x08001085
 8001044:	08001085 	.word	0x08001085
 8001048:	0800107d 	.word	0x0800107d
  {
  case 1:
    IsAlive();
 800104c:	f7ff fee0 	bl	8000e10 <IsAlive>
    break;
 8001050:	e019      	b.n	8001086 <Command+0x86>
  case 2:
    SetConfigDispenserTime();
 8001052:	f7ff feeb 	bl	8000e2c <SetConfigDispenserTime>
    break;
 8001056:	e016      	b.n	8001086 <Command+0x86>
  case 3:
    GetConfigDispenserTime(data);
 8001058:	463b      	mov	r3, r7
 800105a:	4618      	mov	r0, r3
 800105c:	f7ff ff12 	bl	8000e84 <GetConfigDispenserTime>
    break;
 8001060:	e011      	b.n	8001086 <Command+0x86>
  case 4:
    UpdateRTC();
 8001062:	f7ff ff3f 	bl	8000ee4 <UpdateRTC>
    break;
 8001066:	e00e      	b.n	8001086 <Command+0x86>
  case 5:
    GetRTC(data);
 8001068:	463b      	mov	r3, r7
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff78 	bl	8000f60 <GetRTC>
    break;
 8001070:	e009      	b.n	8001086 <Command+0x86>
  case 6:
	StartDispenserRotationProcess(bluetooth_rxBuffer[RXBUFFERSIZE-2]);
 8001072:	4b09      	ldr	r3, [pc, #36]	; (8001098 <Command+0x98>)
 8001074:	799b      	ldrb	r3, [r3, #6]
 8001076:	4618      	mov	r0, r3
 8001078:	f000 f8e2 	bl	8001240 <StartDispenserRotationProcess>
  case 11:
	StartInsertionProcess(data);
 800107c:	463b      	mov	r3, r7
 800107e:	4618      	mov	r0, r3
 8001080:	f7ff ffa4 	bl	8000fcc <StartInsertionProcess>
  default:
    break;
 8001084:	bf00      	nop
  }

  Send_Bluettoh_Data(&data,sizeof(data));
 8001086:	463b      	mov	r3, r7
 8001088:	2108      	movs	r1, #8
 800108a:	4618      	mov	r0, r3
 800108c:	f7ff feae 	bl	8000dec <Send_Bluettoh_Data>


}
 8001090:	bf00      	nop
 8001092:	3708      	adds	r7, #8
 8001094:	46bd      	mov	sp, r7
 8001096:	bd80      	pop	{r7, pc}
 8001098:	2000005c 	.word	0x2000005c

0800109c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b086      	sub	sp, #24
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1){
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0d      	ldr	r2, [pc, #52]	; (80010e0 <HAL_UART_RxCpltCallback+0x44>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d113      	bne.n	80010d6 <HAL_UART_RxCpltCallback+0x3a>
	struct message msg;
	memcpy(msg.data, UART1_rxBuffer, RXBUFFERSIZE * sizeof(uint8_t));
 80010ae:	4a0d      	ldr	r2, [pc, #52]	; (80010e4 <HAL_UART_RxCpltCallback+0x48>)
 80010b0:	f107 030c 	add.w	r3, r7, #12
 80010b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80010b8:	e883 0003 	stmia.w	r3, {r0, r1}
	enum enqueue_result result1 = my_message_queue_enqueue(&queue, &msg);
 80010bc:	f107 030c 	add.w	r3, r7, #12
 80010c0:	4619      	mov	r1, r3
 80010c2:	4809      	ldr	r0, [pc, #36]	; (80010e8 <HAL_UART_RxCpltCallback+0x4c>)
 80010c4:	f7ff fe32 	bl	8000d2c <my_message_queue_enqueue>
 80010c8:	4603      	mov	r3, r0
 80010ca:	75fb      	strb	r3, [r7, #23]
    HAL_UART_Receive_IT(&huart1,UART1_rxBuffer,RXBUFFERSIZE);
 80010cc:	2208      	movs	r2, #8
 80010ce:	4905      	ldr	r1, [pc, #20]	; (80010e4 <HAL_UART_RxCpltCallback+0x48>)
 80010d0:	4806      	ldr	r0, [pc, #24]	; (80010ec <HAL_UART_RxCpltCallback+0x50>)
 80010d2:	f003 fdf4 	bl	8004cbe <HAL_UART_Receive_IT>
  }
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40011000 	.word	0x40011000
 80010e4:	20000054 	.word	0x20000054
 80010e8:	2000009c 	.word	0x2000009c
 80010ec:	2000012c 	.word	0x2000012c

080010f0 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b08a      	sub	sp, #40	; 0x28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]

	uint8_t dispenserTime[RXBUFFERSIZE] = {0};
 80010f8:	2300      	movs	r3, #0
 80010fa:	61bb      	str	r3, [r7, #24]
 80010fc:	2300      	movs	r3, #0
 80010fe:	61fb      	str	r3, [r7, #28]
	GetConfigDispenserTime(dispenserTime);
 8001100:	f107 0318 	add.w	r3, r7, #24
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff febd 	bl	8000e84 <GetConfigDispenserTime>

	uint8_t rtcTime[RXBUFFERSIZE] = {0};
 800110a:	2300      	movs	r3, #0
 800110c:	613b      	str	r3, [r7, #16]
 800110e:	2300      	movs	r3, #0
 8001110:	617b      	str	r3, [r7, #20]
	GetRTC(rtcTime);
 8001112:	f107 0310 	add.w	r3, r7, #16
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff22 	bl	8000f60 <GetRTC>

	bool arrayEqual = true;
 800111c:	2301      	movs	r3, #1
 800111e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	for(uint8_t i = 0; i < RXBUFFERSIZE-2; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8001128:	e01f      	b.n	800116a <HAL_RTC_AlarmAEventCallback+0x7a>
	{
		uint8_t aux1 = dispenserTime[i];
 800112a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800112e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001132:	4413      	add	r3, r2
 8001134:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001138:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
		uint8_t aux2 = rtcTime[i];
 800113c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001140:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001144:	4413      	add	r3, r2
 8001146:	f813 3c18 	ldrb.w	r3, [r3, #-24]
 800114a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		if(aux1 != aux2)
 800114e:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001156:	429a      	cmp	r2, r3
 8001158:	d002      	beq.n	8001160 <HAL_RTC_AlarmAEventCallback+0x70>
		{
			arrayEqual = false;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	for(uint8_t i = 0; i < RXBUFFERSIZE-2; i++)
 8001160:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001164:	3301      	adds	r3, #1
 8001166:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800116a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800116e:	2b05      	cmp	r3, #5
 8001170:	d9db      	bls.n	800112a <HAL_RTC_AlarmAEventCallback+0x3a>
		}
	}

	if(arrayEqual)
 8001172:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001176:	2b00      	cmp	r3, #0
 8001178:	d012      	beq.n	80011a0 <HAL_RTC_AlarmAEventCallback+0xb0>
	{

		target_position = 1;
 800117a:	4b0b      	ldr	r3, [pc, #44]	; (80011a8 <HAL_RTC_AlarmAEventCallback+0xb8>)
 800117c:	2201      	movs	r2, #1
 800117e:	801a      	strh	r2, [r3, #0]
		struct message msg = {
 8001180:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <HAL_RTC_AlarmAEventCallback+0xbc>)
 8001182:	f107 0308 	add.w	r3, r7, #8
 8001186:	e892 0003 	ldmia.w	r2, {r0, r1}
 800118a:	e883 0003 	stmia.w	r3, {r0, r1}
			.data = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 1, 11}
		 };
		enum enqueue_result result1 = my_message_queue_enqueue(&queue, &msg);
 800118e:	f107 0308 	add.w	r3, r7, #8
 8001192:	4619      	mov	r1, r3
 8001194:	4806      	ldr	r0, [pc, #24]	; (80011b0 <HAL_RTC_AlarmAEventCallback+0xc0>)
 8001196:	f7ff fdc9 	bl	8000d2c <my_message_queue_enqueue>
 800119a:	4603      	mov	r3, r0
 800119c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	}
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	2000008e 	.word	0x2000008e
 80011ac:	08005b00 	.word	0x08005b00
 80011b0:	2000009c 	.word	0x2000009c

080011b4 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b082      	sub	sp, #8
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	4603      	mov	r3, r0
 80011bc:	80fb      	strh	r3, [r7, #6]
	currentMillis = HAL_GetTick();
 80011be:	f000 fdc5 	bl	8001d4c <HAL_GetTick>
 80011c2:	4603      	mov	r3, r0
 80011c4:	4a19      	ldr	r2, [pc, #100]	; (800122c <HAL_GPIO_EXTI_Callback+0x78>)
 80011c6:	6013      	str	r3, [r2, #0]
    if(GPIO_Pin == GPIO_PIN_8 && (currentMillis - previousMillis > 300) && rotating)
 80011c8:	88fb      	ldrh	r3, [r7, #6]
 80011ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011ce:	d124      	bne.n	800121a <HAL_GPIO_EXTI_Callback+0x66>
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_GPIO_EXTI_Callback+0x78>)
 80011d2:	681a      	ldr	r2, [r3, #0]
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <HAL_GPIO_EXTI_Callback+0x7c>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	1ad3      	subs	r3, r2, r3
 80011da:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80011de:	d91c      	bls.n	800121a <HAL_GPIO_EXTI_Callback+0x66>
 80011e0:	4b14      	ldr	r3, [pc, #80]	; (8001234 <HAL_GPIO_EXTI_Callback+0x80>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d018      	beq.n	800121a <HAL_GPIO_EXTI_Callback+0x66>
    {
    	position = position + 1;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <HAL_GPIO_EXTI_Callback+0x84>)
 80011ea:	881b      	ldrh	r3, [r3, #0]
 80011ec:	3301      	adds	r3, #1
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4b11      	ldr	r3, [pc, #68]	; (8001238 <HAL_GPIO_EXTI_Callback+0x84>)
 80011f2:	801a      	strh	r2, [r3, #0]
    	if(target_position == position)
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <HAL_GPIO_EXTI_Callback+0x88>)
 80011f6:	881a      	ldrh	r2, [r3, #0]
 80011f8:	4b0f      	ldr	r3, [pc, #60]	; (8001238 <HAL_GPIO_EXTI_Callback+0x84>)
 80011fa:	881b      	ldrh	r3, [r3, #0]
 80011fc:	429a      	cmp	r2, r3
 80011fe:	d103      	bne.n	8001208 <HAL_GPIO_EXTI_Callback+0x54>
    	{
    		StopDispenserRotationProcess();
 8001200:	f000 f844 	bl	800128c <StopDispenserRotationProcess>
    		__NOP();
 8001204:	bf00      	nop
 8001206:	e008      	b.n	800121a <HAL_GPIO_EXTI_Callback+0x66>
    	}
    	else if(position > target_position)
 8001208:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <HAL_GPIO_EXTI_Callback+0x84>)
 800120a:	881a      	ldrh	r2, [r3, #0]
 800120c:	4b0b      	ldr	r3, [pc, #44]	; (800123c <HAL_GPIO_EXTI_Callback+0x88>)
 800120e:	881b      	ldrh	r3, [r3, #0]
 8001210:	429a      	cmp	r2, r3
 8001212:	d902      	bls.n	800121a <HAL_GPIO_EXTI_Callback+0x66>
    	{
    		StopDispenserRotationProcess();
 8001214:	f000 f83a 	bl	800128c <StopDispenserRotationProcess>
    		__NOP();
 8001218:	bf00      	nop

    	}
    }
    previousMillis = currentMillis;
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <HAL_GPIO_EXTI_Callback+0x78>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_GPIO_EXTI_Callback+0x7c>)
 8001220:	6013      	str	r3, [r2, #0]

}
 8001222:	bf00      	nop
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	20000098 	.word	0x20000098
 8001230:	20000094 	.word	0x20000094
 8001234:	20000090 	.word	0x20000090
 8001238:	2000008c 	.word	0x2000008c
 800123c:	2000008e 	.word	0x2000008e

08001240 <StartDispenserRotationProcess>:

void StartDispenserRotationProcess(uint8_t _target_position)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	4603      	mov	r3, r0
 8001248:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 800124a:	2201      	movs	r2, #1
 800124c:	2120      	movs	r1, #32
 800124e:	480a      	ldr	r0, [pc, #40]	; (8001278 <StartDispenserRotationProcess+0x38>)
 8001250:	f001 fb88 	bl	8002964 <HAL_GPIO_WritePin>
  rotating = true;
 8001254:	4b09      	ldr	r3, [pc, #36]	; (800127c <StartDispenserRotationProcess+0x3c>)
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
  target_position = _target_position;
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	b29a      	uxth	r2, r3
 800125e:	4b08      	ldr	r3, [pc, #32]	; (8001280 <StartDispenserRotationProcess+0x40>)
 8001260:	801a      	strh	r2, [r3, #0]
  TIM3->CCR2 = 60;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <StartDispenserRotationProcess+0x44>)
 8001264:	223c      	movs	r2, #60	; 0x3c
 8001266:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8001268:	2104      	movs	r1, #4
 800126a:	4807      	ldr	r0, [pc, #28]	; (8001288 <StartDispenserRotationProcess+0x48>)
 800126c:	f002 fe70 	bl	8003f50 <HAL_TIM_PWM_Start>
}
 8001270:	bf00      	nop
 8001272:	3708      	adds	r7, #8
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40020000 	.word	0x40020000
 800127c:	20000090 	.word	0x20000090
 8001280:	2000008e 	.word	0x2000008e
 8001284:	40000400 	.word	0x40000400
 8001288:	200000e0 	.word	0x200000e0

0800128c <StopDispenserRotationProcess>:

void StopDispenserRotationProcess()
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  rotating = false;
 8001290:	4b04      	ldr	r3, [pc, #16]	; (80012a4 <StopDispenserRotationProcess+0x18>)
 8001292:	2200      	movs	r2, #0
 8001294:	701a      	strb	r2, [r3, #0]
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8001296:	2104      	movs	r1, #4
 8001298:	4803      	ldr	r0, [pc, #12]	; (80012a8 <StopDispenserRotationProcess+0x1c>)
 800129a:	f002 ff09 	bl	80040b0 <HAL_TIM_PWM_Stop>
}
 800129e:	bf00      	nop
 80012a0:	bd80      	pop	{r7, pc}
 80012a2:	bf00      	nop
 80012a4:	20000090 	.word	0x20000090
 80012a8:	200000e0 	.word	0x200000e0

080012ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b084      	sub	sp, #16
 80012b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012b2:	f000 fce5 	bl	8001c80 <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_FLASH_Unlock();
 80012b6:	f000 ff4d 	bl	8002154 <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 80012ba:	f7ff f907 	bl	80004cc <EE_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d007      	beq.n	80012d4 <main+0x28>
  {
    uint8_t data[] = {9};
 80012c4:	2309      	movs	r3, #9
 80012c6:	733b      	strb	r3, [r7, #12]
    Send_Bluettoh_Data(&data,sizeof(data));
 80012c8:	f107 030c 	add.w	r3, r7, #12
 80012cc:	2101      	movs	r1, #1
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fd8c 	bl	8000dec <Send_Bluettoh_Data>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012d4:	f000 f830 	bl	8001338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012d8:	f000 fa4e 	bl	8001778 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80012dc:	f000 fa22 	bl	8001724 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80012e0:	f000 f9f6 	bl	80016d0 <MX_USART1_UART_Init>
  MX_RTC_Init();
 80012e4:	f000 f896 	bl	8001414 <MX_RTC_Init>
  MX_TIM3_Init();
 80012e8:	f000 f972 	bl	80015d0 <MX_TIM3_Init>
  MX_TIM1_Init();
 80012ec:	f000 f920 	bl	8001530 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,UART1_rxBuffer,RXBUFFERSIZE);
 80012f0:	2208      	movs	r2, #8
 80012f2:	490d      	ldr	r1, [pc, #52]	; (8001328 <main+0x7c>)
 80012f4:	480d      	ldr	r0, [pc, #52]	; (800132c <main+0x80>)
 80012f6:	f003 fce2 	bl	8004cbe <HAL_UART_Receive_IT>
  my_message_queue_init(&queue);
 80012fa:	480d      	ldr	r0, [pc, #52]	; (8001330 <main+0x84>)
 80012fc:	f7ff fd06 	bl	8000d0c <my_message_queue_init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  struct message msg;
	  enum dequeue_result result2 = my_message_queue_dequeue(&queue, &msg);
 8001300:	1d3b      	adds	r3, r7, #4
 8001302:	4619      	mov	r1, r3
 8001304:	480a      	ldr	r0, [pc, #40]	; (8001330 <main+0x84>)
 8001306:	f7ff fd41 	bl	8000d8c <my_message_queue_dequeue>
 800130a:	4603      	mov	r3, r0
 800130c:	73fb      	strb	r3, [r7, #15]
	  if (result2 == DEQUEUE_RESULT_SUCCESS) {
 800130e:	7bfb      	ldrb	r3, [r7, #15]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d1f5      	bne.n	8001300 <main+0x54>
		  memcpy(bluetooth_rxBuffer, msg.data, RXBUFFERSIZE * sizeof(uint8_t));
 8001314:	4b07      	ldr	r3, [pc, #28]	; (8001334 <main+0x88>)
 8001316:	461a      	mov	r2, r3
 8001318:	1d3b      	adds	r3, r7, #4
 800131a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800131e:	e882 0003 	stmia.w	r2, {r0, r1}
		  Command();
 8001322:	f7ff fe6d 	bl	8001000 <Command>
  {
 8001326:	e7eb      	b.n	8001300 <main+0x54>
 8001328:	20000054 	.word	0x20000054
 800132c:	2000012c 	.word	0x2000012c
 8001330:	2000009c 	.word	0x2000009c
 8001334:	2000005c 	.word	0x2000005c

08001338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b094      	sub	sp, #80	; 0x50
 800133c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133e:	f107 0320 	add.w	r3, r7, #32
 8001342:	2230      	movs	r2, #48	; 0x30
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f004 fbc6 	bl	8005ad8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800134c:	f107 030c 	add.w	r3, r7, #12
 8001350:	2200      	movs	r2, #0
 8001352:	601a      	str	r2, [r3, #0]
 8001354:	605a      	str	r2, [r3, #4]
 8001356:	609a      	str	r2, [r3, #8]
 8001358:	60da      	str	r2, [r3, #12]
 800135a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800135c:	2300      	movs	r3, #0
 800135e:	60bb      	str	r3, [r7, #8]
 8001360:	4b2a      	ldr	r3, [pc, #168]	; (800140c <SystemClock_Config+0xd4>)
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	4a29      	ldr	r2, [pc, #164]	; (800140c <SystemClock_Config+0xd4>)
 8001366:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800136a:	6413      	str	r3, [r2, #64]	; 0x40
 800136c:	4b27      	ldr	r3, [pc, #156]	; (800140c <SystemClock_Config+0xd4>)
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001374:	60bb      	str	r3, [r7, #8]
 8001376:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001378:	2300      	movs	r3, #0
 800137a:	607b      	str	r3, [r7, #4]
 800137c:	4b24      	ldr	r3, [pc, #144]	; (8001410 <SystemClock_Config+0xd8>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001384:	4a22      	ldr	r2, [pc, #136]	; (8001410 <SystemClock_Config+0xd8>)
 8001386:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800138a:	6013      	str	r3, [r2, #0]
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <SystemClock_Config+0xd8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001394:	607b      	str	r3, [r7, #4]
 8001396:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8001398:	230a      	movs	r3, #10
 800139a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800139c:	2301      	movs	r3, #1
 800139e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013a0:	2310      	movs	r3, #16
 80013a2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80013a4:	2301      	movs	r3, #1
 80013a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013a8:	2302      	movs	r3, #2
 80013aa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013ac:	2300      	movs	r3, #0
 80013ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013b0:	2310      	movs	r3, #16
 80013b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013ba:	2304      	movs	r3, #4
 80013bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80013be:	2307      	movs	r3, #7
 80013c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013c2:	f107 0320 	add.w	r3, r7, #32
 80013c6:	4618      	mov	r0, r3
 80013c8:	f001 fafe 	bl	80029c8 <HAL_RCC_OscConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013d2:	f000 fa7b 	bl	80018cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d6:	230f      	movs	r3, #15
 80013d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013da:	2302      	movs	r3, #2
 80013dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013de:	2300      	movs	r3, #0
 80013e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80013e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80013ec:	f107 030c 	add.w	r3, r7, #12
 80013f0:	2102      	movs	r1, #2
 80013f2:	4618      	mov	r0, r3
 80013f4:	f001 fd60 	bl	8002eb8 <HAL_RCC_ClockConfig>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80013fe:	f000 fa65 	bl	80018cc <Error_Handler>
  }
}
 8001402:	bf00      	nop
 8001404:	3750      	adds	r7, #80	; 0x50
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40007000 	.word	0x40007000

08001414 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b090      	sub	sp, #64	; 0x40
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800141a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800141e:	2200      	movs	r2, #0
 8001420:	601a      	str	r2, [r3, #0]
 8001422:	605a      	str	r2, [r3, #4]
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	60da      	str	r2, [r3, #12]
 8001428:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800142a:	2300      	movs	r3, #0
 800142c:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 800142e:	463b      	mov	r3, r7
 8001430:	2228      	movs	r2, #40	; 0x28
 8001432:	2100      	movs	r1, #0
 8001434:	4618      	mov	r0, r3
 8001436:	f004 fb4f 	bl	8005ad8 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800143a:	4b3b      	ldr	r3, [pc, #236]	; (8001528 <MX_RTC_Init+0x114>)
 800143c:	4a3b      	ldr	r2, [pc, #236]	; (800152c <MX_RTC_Init+0x118>)
 800143e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001440:	4b39      	ldr	r3, [pc, #228]	; (8001528 <MX_RTC_Init+0x114>)
 8001442:	2200      	movs	r2, #0
 8001444:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001446:	4b38      	ldr	r3, [pc, #224]	; (8001528 <MX_RTC_Init+0x114>)
 8001448:	227f      	movs	r2, #127	; 0x7f
 800144a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800144c:	4b36      	ldr	r3, [pc, #216]	; (8001528 <MX_RTC_Init+0x114>)
 800144e:	22ff      	movs	r2, #255	; 0xff
 8001450:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001452:	4b35      	ldr	r3, [pc, #212]	; (8001528 <MX_RTC_Init+0x114>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001458:	4b33      	ldr	r3, [pc, #204]	; (8001528 <MX_RTC_Init+0x114>)
 800145a:	2200      	movs	r2, #0
 800145c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800145e:	4b32      	ldr	r3, [pc, #200]	; (8001528 <MX_RTC_Init+0x114>)
 8001460:	2200      	movs	r2, #0
 8001462:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001464:	4830      	ldr	r0, [pc, #192]	; (8001528 <MX_RTC_Init+0x114>)
 8001466:	f002 f811 	bl	800348c <HAL_RTC_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8001470:	f000 fa2c 	bl	80018cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x23;
 8001474:	2323      	movs	r3, #35	; 0x23
 8001476:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x59;
 800147a:	2359      	movs	r3, #89	; 0x59
 800147c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x50;
 8001480:	2350      	movs	r3, #80	; 0x50
 8001482:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001486:	2300      	movs	r3, #0
 8001488:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800148a:	2300      	movs	r3, #0
 800148c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800148e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001492:	2201      	movs	r2, #1
 8001494:	4619      	mov	r1, r3
 8001496:	4824      	ldr	r0, [pc, #144]	; (8001528 <MX_RTC_Init+0x114>)
 8001498:	f002 f889 	bl	80035ae <HAL_RTC_SetTime>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_RTC_Init+0x92>
  {
    Error_Handler();
 80014a2:	f000 fa13 	bl	80018cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 80014a6:	2306      	movs	r3, #6
 80014a8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_APRIL;
 80014ac:	2304      	movs	r3, #4
 80014ae:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x23;
 80014b2:	2323      	movs	r3, #35	; 0x23
 80014b4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80014b8:	2300      	movs	r3, #0
 80014ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80014be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014c2:	2201      	movs	r2, #1
 80014c4:	4619      	mov	r1, r3
 80014c6:	4818      	ldr	r0, [pc, #96]	; (8001528 <MX_RTC_Init+0x114>)
 80014c8:	f002 f98c 	bl	80037e4 <HAL_RTC_SetDate>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 80014d2:	f000 f9fb 	bl	80018cc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80014d6:	2300      	movs	r3, #0
 80014d8:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80014da:	2300      	movs	r3, #0
 80014dc:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 80014de:	2301      	movs	r3, #1
 80014e0:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80014e2:	2300      	movs	r3, #0
 80014e4:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80014e6:	2300      	movs	r3, #0
 80014e8:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 80014ee:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 80014f2:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 8001502:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	2201      	movs	r2, #1
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_RTC_Init+0x114>)
 8001510:	f002 fa5e 	bl	80039d0 <HAL_RTC_SetAlarm_IT>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800151a:	f000 f9d7 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3740      	adds	r7, #64	; 0x40
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000170 	.word	0x20000170
 800152c:	40002800 	.word	0x40002800

08001530 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b086      	sub	sp, #24
 8001534:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001536:	f107 0308 	add.w	r3, r7, #8
 800153a:	2200      	movs	r2, #0
 800153c:	601a      	str	r2, [r3, #0]
 800153e:	605a      	str	r2, [r3, #4]
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001544:	463b      	mov	r3, r7
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_TIM1_Init+0x98>)
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <MX_TIM1_Init+0x9c>)
 8001550:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM1_Init+0x98>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_TIM1_Init+0x98>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_TIM1_Init+0x98>)
 8001560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001564:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001566:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_TIM1_Init+0x98>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800156c:	4b16      	ldr	r3, [pc, #88]	; (80015c8 <MX_TIM1_Init+0x98>)
 800156e:	2200      	movs	r2, #0
 8001570:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001572:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_TIM1_Init+0x98>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001578:	4813      	ldr	r0, [pc, #76]	; (80015c8 <MX_TIM1_Init+0x98>)
 800157a:	f002 fc41 	bl	8003e00 <HAL_TIM_Base_Init>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001584:	f000 f9a2 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001588:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800158c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800158e:	f107 0308 	add.w	r3, r7, #8
 8001592:	4619      	mov	r1, r3
 8001594:	480c      	ldr	r0, [pc, #48]	; (80015c8 <MX_TIM1_Init+0x98>)
 8001596:	f002 feb1 	bl	80042fc <HAL_TIM_ConfigClockSource>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80015a0:	f000 f994 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a4:	2300      	movs	r3, #0
 80015a6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80015ac:	463b      	mov	r3, r7
 80015ae:	4619      	mov	r1, r3
 80015b0:	4805      	ldr	r0, [pc, #20]	; (80015c8 <MX_TIM1_Init+0x98>)
 80015b2:	f003 fa37 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80015bc:	f000 f986 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80015c0:	bf00      	nop
 80015c2:	3718      	adds	r7, #24
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	20000190 	.word	0x20000190
 80015cc:	40010000 	.word	0x40010000

080015d0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08e      	sub	sp, #56	; 0x38
 80015d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e4:	f107 0320 	add.w	r3, r7, #32
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015ee:	1d3b      	adds	r3, r7, #4
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]
 80015fc:	615a      	str	r2, [r3, #20]
 80015fe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001600:	4b31      	ldr	r3, [pc, #196]	; (80016c8 <MX_TIM3_Init+0xf8>)
 8001602:	4a32      	ldr	r2, [pc, #200]	; (80016cc <MX_TIM3_Init+0xfc>)
 8001604:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 8001606:	4b30      	ldr	r3, [pc, #192]	; (80016c8 <MX_TIM3_Init+0xf8>)
 8001608:	2254      	movs	r2, #84	; 0x54
 800160a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800160c:	4b2e      	ldr	r3, [pc, #184]	; (80016c8 <MX_TIM3_Init+0xf8>)
 800160e:	2200      	movs	r2, #0
 8001610:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001612:	4b2d      	ldr	r3, [pc, #180]	; (80016c8 <MX_TIM3_Init+0xf8>)
 8001614:	2264      	movs	r2, #100	; 0x64
 8001616:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001618:	4b2b      	ldr	r3, [pc, #172]	; (80016c8 <MX_TIM3_Init+0xf8>)
 800161a:	2200      	movs	r2, #0
 800161c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161e:	4b2a      	ldr	r3, [pc, #168]	; (80016c8 <MX_TIM3_Init+0xf8>)
 8001620:	2200      	movs	r2, #0
 8001622:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001624:	4828      	ldr	r0, [pc, #160]	; (80016c8 <MX_TIM3_Init+0xf8>)
 8001626:	f002 fbeb 	bl	8003e00 <HAL_TIM_Base_Init>
 800162a:	4603      	mov	r3, r0
 800162c:	2b00      	cmp	r3, #0
 800162e:	d001      	beq.n	8001634 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001630:	f000 f94c 	bl	80018cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001638:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800163a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800163e:	4619      	mov	r1, r3
 8001640:	4821      	ldr	r0, [pc, #132]	; (80016c8 <MX_TIM3_Init+0xf8>)
 8001642:	f002 fe5b 	bl	80042fc <HAL_TIM_ConfigClockSource>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 800164c:	f000 f93e 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001650:	481d      	ldr	r0, [pc, #116]	; (80016c8 <MX_TIM3_Init+0xf8>)
 8001652:	f002 fc24 	bl	8003e9e <HAL_TIM_PWM_Init>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d001      	beq.n	8001660 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800165c:	f000 f936 	bl	80018cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001668:	f107 0320 	add.w	r3, r7, #32
 800166c:	4619      	mov	r1, r3
 800166e:	4816      	ldr	r0, [pc, #88]	; (80016c8 <MX_TIM3_Init+0xf8>)
 8001670:	f003 f9d8 	bl	8004a24 <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800167a:	f000 f927 	bl	80018cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167e:	2360      	movs	r3, #96	; 0x60
 8001680:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	4619      	mov	r1, r3
 8001694:	480c      	ldr	r0, [pc, #48]	; (80016c8 <MX_TIM3_Init+0xf8>)
 8001696:	f002 fd6f 	bl	8004178 <HAL_TIM_PWM_ConfigChannel>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80016a0:	f000 f914 	bl	80018cc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016a4:	1d3b      	adds	r3, r7, #4
 80016a6:	2204      	movs	r2, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	4807      	ldr	r0, [pc, #28]	; (80016c8 <MX_TIM3_Init+0xf8>)
 80016ac:	f002 fd64 	bl	8004178 <HAL_TIM_PWM_ConfigChannel>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80016b6:	f000 f909 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016ba:	4803      	ldr	r0, [pc, #12]	; (80016c8 <MX_TIM3_Init+0xf8>)
 80016bc:	f000 f9a0 	bl	8001a00 <HAL_TIM_MspPostInit>

}
 80016c0:	bf00      	nop
 80016c2:	3738      	adds	r7, #56	; 0x38
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	200000e0 	.word	0x200000e0
 80016cc:	40000400 	.word	0x40000400

080016d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80016d4:	4b11      	ldr	r3, [pc, #68]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016d6:	4a12      	ldr	r2, [pc, #72]	; (8001720 <MX_USART1_UART_Init+0x50>)
 80016d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80016da:	4b10      	ldr	r3, [pc, #64]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016dc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80016e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016e2:	4b0e      	ldr	r3, [pc, #56]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016e8:	4b0c      	ldr	r3, [pc, #48]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ee:	4b0b      	ldr	r3, [pc, #44]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016f4:	4b09      	ldr	r3, [pc, #36]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016f6:	220c      	movs	r2, #12
 80016f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016fa:	4b08      	ldr	r3, [pc, #32]	; (800171c <MX_USART1_UART_Init+0x4c>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001700:	4b06      	ldr	r3, [pc, #24]	; (800171c <MX_USART1_UART_Init+0x4c>)
 8001702:	2200      	movs	r2, #0
 8001704:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001706:	4805      	ldr	r0, [pc, #20]	; (800171c <MX_USART1_UART_Init+0x4c>)
 8001708:	f003 f9fa 	bl	8004b00 <HAL_UART_Init>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001712:	f000 f8db 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	bd80      	pop	{r7, pc}
 800171a:	bf00      	nop
 800171c:	2000012c 	.word	0x2000012c
 8001720:	40011000 	.word	0x40011000

08001724 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001728:	4b11      	ldr	r3, [pc, #68]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800172a:	4a12      	ldr	r2, [pc, #72]	; (8001774 <MX_USART2_UART_Init+0x50>)
 800172c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800172e:	4b10      	ldr	r3, [pc, #64]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001730:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001734:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001738:	2200      	movs	r2, #0
 800173a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800173c:	4b0c      	ldr	r3, [pc, #48]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800173e:	2200      	movs	r2, #0
 8001740:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001742:	4b0b      	ldr	r3, [pc, #44]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001744:	2200      	movs	r2, #0
 8001746:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001748:	4b09      	ldr	r3, [pc, #36]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800174a:	220c      	movs	r2, #12
 800174c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800174e:	4b08      	ldr	r3, [pc, #32]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001750:	2200      	movs	r2, #0
 8001752:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001754:	4b06      	ldr	r3, [pc, #24]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 8001756:	2200      	movs	r2, #0
 8001758:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800175a:	4805      	ldr	r0, [pc, #20]	; (8001770 <MX_USART2_UART_Init+0x4c>)
 800175c:	f003 f9d0 	bl	8004b00 <HAL_UART_Init>
 8001760:	4603      	mov	r3, r0
 8001762:	2b00      	cmp	r3, #0
 8001764:	d001      	beq.n	800176a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001766:	f000 f8b1 	bl	80018cc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800176a:	bf00      	nop
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	200001d8 	.word	0x200001d8
 8001774:	40004400 	.word	0x40004400

08001778 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08a      	sub	sp, #40	; 0x28
 800177c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800177e:	f107 0314 	add.w	r3, r7, #20
 8001782:	2200      	movs	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	609a      	str	r2, [r3, #8]
 800178a:	60da      	str	r2, [r3, #12]
 800178c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <MX_GPIO_Init+0x144>)
 8001794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001796:	4a49      	ldr	r2, [pc, #292]	; (80018bc <MX_GPIO_Init+0x144>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6313      	str	r3, [r2, #48]	; 0x30
 800179e:	4b47      	ldr	r3, [pc, #284]	; (80018bc <MX_GPIO_Init+0x144>)
 80017a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017aa:	2300      	movs	r3, #0
 80017ac:	60fb      	str	r3, [r7, #12]
 80017ae:	4b43      	ldr	r3, [pc, #268]	; (80018bc <MX_GPIO_Init+0x144>)
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b2:	4a42      	ldr	r2, [pc, #264]	; (80018bc <MX_GPIO_Init+0x144>)
 80017b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017b8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ba:	4b40      	ldr	r3, [pc, #256]	; (80018bc <MX_GPIO_Init+0x144>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
 80017ca:	4b3c      	ldr	r3, [pc, #240]	; (80018bc <MX_GPIO_Init+0x144>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ce:	4a3b      	ldr	r2, [pc, #236]	; (80018bc <MX_GPIO_Init+0x144>)
 80017d0:	f043 0301 	orr.w	r3, r3, #1
 80017d4:	6313      	str	r3, [r2, #48]	; 0x30
 80017d6:	4b39      	ldr	r3, [pc, #228]	; (80018bc <MX_GPIO_Init+0x144>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	f003 0301 	and.w	r3, r3, #1
 80017de:	60bb      	str	r3, [r7, #8]
 80017e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e2:	2300      	movs	r3, #0
 80017e4:	607b      	str	r3, [r7, #4]
 80017e6:	4b35      	ldr	r3, [pc, #212]	; (80018bc <MX_GPIO_Init+0x144>)
 80017e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ea:	4a34      	ldr	r2, [pc, #208]	; (80018bc <MX_GPIO_Init+0x144>)
 80017ec:	f043 0302 	orr.w	r3, r3, #2
 80017f0:	6313      	str	r3, [r2, #48]	; 0x30
 80017f2:	4b32      	ldr	r3, [pc, #200]	; (80018bc <MX_GPIO_Init+0x144>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	f003 0302 	and.w	r3, r3, #2
 80017fa:	607b      	str	r3, [r7, #4]
 80017fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80017fe:	2200      	movs	r2, #0
 8001800:	2120      	movs	r1, #32
 8001802:	482f      	ldr	r0, [pc, #188]	; (80018c0 <MX_GPIO_Init+0x148>)
 8001804:	f001 f8ae 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin, GPIO_PIN_RESET);
 8001808:	2200      	movs	r2, #0
 800180a:	f44f 7158 	mov.w	r1, #864	; 0x360
 800180e:	482d      	ldr	r0, [pc, #180]	; (80018c4 <MX_GPIO_Init+0x14c>)
 8001810:	f001 f8a8 	bl	8002964 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001814:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800181a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800181e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001820:	2300      	movs	r3, #0
 8001822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001824:	f107 0314 	add.w	r3, r7, #20
 8001828:	4619      	mov	r1, r3
 800182a:	4826      	ldr	r0, [pc, #152]	; (80018c4 <MX_GPIO_Init+0x14c>)
 800182c:	f000 ff16 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001830:	2320      	movs	r3, #32
 8001832:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001834:	2301      	movs	r3, #1
 8001836:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001840:	f107 0314 	add.w	r3, r7, #20
 8001844:	4619      	mov	r1, r3
 8001846:	481e      	ldr	r0, [pc, #120]	; (80018c0 <MX_GPIO_Init+0x148>)
 8001848:	f000 ff08 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pins : Motor1_Pin Motor2_Pin Motor3_Pin Motor4_Pin */
  GPIO_InitStruct.Pin = Motor1_Pin|Motor2_Pin|Motor3_Pin|Motor4_Pin;
 800184c:	f44f 7358 	mov.w	r3, #864	; 0x360
 8001850:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001852:	2301      	movs	r3, #1
 8001854:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800185e:	f107 0314 	add.w	r3, r7, #20
 8001862:	4619      	mov	r1, r3
 8001864:	4817      	ldr	r0, [pc, #92]	; (80018c4 <MX_GPIO_Init+0x14c>)
 8001866:	f000 fef9 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pins : SENSOR_PILULA_Pin SENSOR_HOME_Pin */
  GPIO_InitStruct.Pin = SENSOR_PILULA_Pin|SENSOR_HOME_Pin;
 800186a:	f240 4304 	movw	r3, #1028	; 0x404
 800186e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001870:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001874:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001876:	2300      	movs	r3, #0
 8001878:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187a:	f107 0314 	add.w	r3, r7, #20
 800187e:	4619      	mov	r1, r3
 8001880:	4811      	ldr	r0, [pc, #68]	; (80018c8 <MX_GPIO_Init+0x150>)
 8001882:	f000 feeb 	bl	800265c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_Pin */
  GPIO_InitStruct.Pin = ENCODER_Pin;
 8001886:	f44f 7380 	mov.w	r3, #256	; 0x100
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800188c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001890:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001892:	2300      	movs	r3, #0
 8001894:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_GPIO_Port, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4808      	ldr	r0, [pc, #32]	; (80018c0 <MX_GPIO_Init+0x148>)
 800189e:	f000 fedd 	bl	800265c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	2017      	movs	r0, #23
 80018a8:	f000 fb37 	bl	8001f1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80018ac:	2017      	movs	r0, #23
 80018ae:	f000 fb50 	bl	8001f52 <HAL_NVIC_EnableIRQ>

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	; 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40023800 	.word	0x40023800
 80018c0:	40020000 	.word	0x40020000
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020400 	.word	0x40020400

080018cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018d0:	b672      	cpsid	i
}
 80018d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018d4:	e7fe      	b.n	80018d4 <Error_Handler+0x8>
	...

080018d8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018de:	2300      	movs	r3, #0
 80018e0:	607b      	str	r3, [r7, #4]
 80018e2:	4b10      	ldr	r3, [pc, #64]	; (8001924 <HAL_MspInit+0x4c>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	4a0f      	ldr	r2, [pc, #60]	; (8001924 <HAL_MspInit+0x4c>)
 80018e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018ec:	6453      	str	r3, [r2, #68]	; 0x44
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_MspInit+0x4c>)
 80018f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018f6:	607b      	str	r3, [r7, #4]
 80018f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	2300      	movs	r3, #0
 80018fc:	603b      	str	r3, [r7, #0]
 80018fe:	4b09      	ldr	r3, [pc, #36]	; (8001924 <HAL_MspInit+0x4c>)
 8001900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001902:	4a08      	ldr	r2, [pc, #32]	; (8001924 <HAL_MspInit+0x4c>)
 8001904:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001908:	6413      	str	r3, [r2, #64]	; 0x40
 800190a:	4b06      	ldr	r3, [pc, #24]	; (8001924 <HAL_MspInit+0x4c>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	603b      	str	r3, [r7, #0]
 8001914:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001916:	2007      	movs	r0, #7
 8001918:	f000 faf4 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191c:	bf00      	nop
 800191e:	3708      	adds	r7, #8
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40023800 	.word	0x40023800

08001928 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b088      	sub	sp, #32
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a10      	ldr	r2, [pc, #64]	; (8001988 <HAL_RTC_MspInit+0x60>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d119      	bne.n	800197e <HAL_RTC_MspInit+0x56>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800194a:	2302      	movs	r3, #2
 800194c:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800194e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001952:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001954:	f107 030c 	add.w	r3, r7, #12
 8001958:	4618      	mov	r0, r3
 800195a:	f001 fca9 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001964:	f7ff ffb2 	bl	80018cc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001968:	4b08      	ldr	r3, [pc, #32]	; (800198c <HAL_RTC_MspInit+0x64>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800196e:	2200      	movs	r2, #0
 8001970:	2100      	movs	r1, #0
 8001972:	2029      	movs	r0, #41	; 0x29
 8001974:	f000 fad1 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001978:	2029      	movs	r0, #41	; 0x29
 800197a:	f000 faea 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800197e:	bf00      	nop
 8001980:	3720      	adds	r7, #32
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40002800 	.word	0x40002800
 800198c:	42470e3c 	.word	0x42470e3c

08001990 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001990:	b480      	push	{r7}
 8001992:	b085      	sub	sp, #20
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a15      	ldr	r2, [pc, #84]	; (80019f4 <HAL_TIM_Base_MspInit+0x64>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d10e      	bne.n	80019c0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80019a2:	2300      	movs	r3, #0
 80019a4:	60fb      	str	r3, [r7, #12]
 80019a6:	4b14      	ldr	r3, [pc, #80]	; (80019f8 <HAL_TIM_Base_MspInit+0x68>)
 80019a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019aa:	4a13      	ldr	r2, [pc, #76]	; (80019f8 <HAL_TIM_Base_MspInit+0x68>)
 80019ac:	f043 0301 	orr.w	r3, r3, #1
 80019b0:	6453      	str	r3, [r2, #68]	; 0x44
 80019b2:	4b11      	ldr	r3, [pc, #68]	; (80019f8 <HAL_TIM_Base_MspInit+0x68>)
 80019b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019b6:	f003 0301 	and.w	r3, r3, #1
 80019ba:	60fb      	str	r3, [r7, #12]
 80019bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80019be:	e012      	b.n	80019e6 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	4a0d      	ldr	r2, [pc, #52]	; (80019fc <HAL_TIM_Base_MspInit+0x6c>)
 80019c6:	4293      	cmp	r3, r2
 80019c8:	d10d      	bne.n	80019e6 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80019ca:	2300      	movs	r3, #0
 80019cc:	60bb      	str	r3, [r7, #8]
 80019ce:	4b0a      	ldr	r3, [pc, #40]	; (80019f8 <HAL_TIM_Base_MspInit+0x68>)
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	4a09      	ldr	r2, [pc, #36]	; (80019f8 <HAL_TIM_Base_MspInit+0x68>)
 80019d4:	f043 0302 	orr.w	r3, r3, #2
 80019d8:	6413      	str	r3, [r2, #64]	; 0x40
 80019da:	4b07      	ldr	r3, [pc, #28]	; (80019f8 <HAL_TIM_Base_MspInit+0x68>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019de:	f003 0302 	and.w	r3, r3, #2
 80019e2:	60bb      	str	r3, [r7, #8]
 80019e4:	68bb      	ldr	r3, [r7, #8]
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr
 80019f2:	bf00      	nop
 80019f4:	40010000 	.word	0x40010000
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40000400 	.word	0x40000400

08001a00 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b088      	sub	sp, #32
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a08:	f107 030c 	add.w	r3, r7, #12
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]
 8001a10:	605a      	str	r2, [r3, #4]
 8001a12:	609a      	str	r2, [r3, #8]
 8001a14:	60da      	str	r2, [r3, #12]
 8001a16:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4a12      	ldr	r2, [pc, #72]	; (8001a68 <HAL_TIM_MspPostInit+0x68>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d11d      	bne.n	8001a5e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <HAL_TIM_MspPostInit+0x6c>)
 8001a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a2a:	4a10      	ldr	r2, [pc, #64]	; (8001a6c <HAL_TIM_MspPostInit+0x6c>)
 8001a2c:	f043 0301 	orr.w	r3, r3, #1
 8001a30:	6313      	str	r3, [r2, #48]	; 0x30
 8001a32:	4b0e      	ldr	r3, [pc, #56]	; (8001a6c <HAL_TIM_MspPostInit+0x6c>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001a3e:	23c0      	movs	r3, #192	; 0xc0
 8001a40:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a42:	2302      	movs	r3, #2
 8001a44:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001a4e:	2302      	movs	r3, #2
 8001a50:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 030c 	add.w	r3, r7, #12
 8001a56:	4619      	mov	r1, r3
 8001a58:	4805      	ldr	r0, [pc, #20]	; (8001a70 <HAL_TIM_MspPostInit+0x70>)
 8001a5a:	f000 fdff 	bl	800265c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001a5e:	bf00      	nop
 8001a60:	3720      	adds	r7, #32
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40000400 	.word	0x40000400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020000 	.word	0x40020000

08001a74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 031c 	add.w	r3, r7, #28
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a36      	ldr	r2, [pc, #216]	; (8001b6c <HAL_UART_MspInit+0xf8>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d135      	bne.n	8001b02 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	61bb      	str	r3, [r7, #24]
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001aa0:	f043 0310 	orr.w	r3, r3, #16
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b32      	ldr	r3, [pc, #200]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f003 0310 	and.w	r3, r3, #16
 8001aae:	61bb      	str	r3, [r7, #24]
 8001ab0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	617b      	str	r3, [r7, #20]
 8001ab6:	4b2e      	ldr	r3, [pc, #184]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a2d      	ldr	r2, [pc, #180]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001abc:	f043 0301 	orr.w	r3, r3, #1
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0301 	and.w	r3, r3, #1
 8001aca:	617b      	str	r3, [r7, #20]
 8001acc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001ace:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001ad2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001adc:	2303      	movs	r3, #3
 8001ade:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001ae0:	2307      	movs	r3, #7
 8001ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ae4:	f107 031c 	add.w	r3, r7, #28
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4822      	ldr	r0, [pc, #136]	; (8001b74 <HAL_UART_MspInit+0x100>)
 8001aec:	f000 fdb6 	bl	800265c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001af0:	2200      	movs	r2, #0
 8001af2:	2100      	movs	r1, #0
 8001af4:	2025      	movs	r0, #37	; 0x25
 8001af6:	f000 fa10 	bl	8001f1a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001afa:	2025      	movs	r0, #37	; 0x25
 8001afc:	f000 fa29 	bl	8001f52 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001b00:	e030      	b.n	8001b64 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a1c      	ldr	r2, [pc, #112]	; (8001b78 <HAL_UART_MspInit+0x104>)
 8001b08:	4293      	cmp	r3, r2
 8001b0a:	d12b      	bne.n	8001b64 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b14:	4a16      	ldr	r2, [pc, #88]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001b16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b1a:	6413      	str	r3, [r2, #64]	; 0x40
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b24:	613b      	str	r3, [r7, #16]
 8001b26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b28:	2300      	movs	r3, #0
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	4b10      	ldr	r3, [pc, #64]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001b2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b30:	4a0f      	ldr	r2, [pc, #60]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001b32:	f043 0301 	orr.w	r3, r3, #1
 8001b36:	6313      	str	r3, [r2, #48]	; 0x30
 8001b38:	4b0d      	ldr	r3, [pc, #52]	; (8001b70 <HAL_UART_MspInit+0xfc>)
 8001b3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	60fb      	str	r3, [r7, #12]
 8001b42:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b44:	230c      	movs	r3, #12
 8001b46:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b48:	2302      	movs	r3, #2
 8001b4a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b50:	2300      	movs	r3, #0
 8001b52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b54:	2307      	movs	r3, #7
 8001b56:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b58:	f107 031c 	add.w	r3, r7, #28
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	4805      	ldr	r0, [pc, #20]	; (8001b74 <HAL_UART_MspInit+0x100>)
 8001b60:	f000 fd7c 	bl	800265c <HAL_GPIO_Init>
}
 8001b64:	bf00      	nop
 8001b66:	3730      	adds	r7, #48	; 0x30
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40011000 	.word	0x40011000
 8001b70:	40023800 	.word	0x40023800
 8001b74:	40020000 	.word	0x40020000
 8001b78:	40004400 	.word	0x40004400

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f8ac 	bl	8001d24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Motor3_Pin);
 8001bd4:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001bd8:	f000 fede 	bl	8002998 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001bdc:	bf00      	nop
 8001bde:	bd80      	pop	{r7, pc}

08001be0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001be4:	4802      	ldr	r0, [pc, #8]	; (8001bf0 <USART1_IRQHandler+0x10>)
 8001be6:	f003 f89b 	bl	8004d20 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001bea:	bf00      	nop
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	2000012c 	.word	0x2000012c

08001bf4 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <RTC_Alarm_IRQHandler+0x10>)
 8001bfa:	f002 f821 	bl	8003c40 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	20000170 	.word	0x20000170

08001c08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c0c:	4b06      	ldr	r3, [pc, #24]	; (8001c28 <SystemInit+0x20>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c12:	4a05      	ldr	r2, [pc, #20]	; (8001c28 <SystemInit+0x20>)
 8001c14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c1c:	bf00      	nop
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	e000ed00 	.word	0xe000ed00

08001c2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c30:	480d      	ldr	r0, [pc, #52]	; (8001c68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c32:	490e      	ldr	r1, [pc, #56]	; (8001c6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c38:	e002      	b.n	8001c40 <LoopCopyDataInit>

08001c3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c3e:	3304      	adds	r3, #4

08001c40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c44:	d3f9      	bcc.n	8001c3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c46:	4a0b      	ldr	r2, [pc, #44]	; (8001c74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c48:	4c0b      	ldr	r4, [pc, #44]	; (8001c78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c4c:	e001      	b.n	8001c52 <LoopFillZerobss>

08001c4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c50:	3204      	adds	r2, #4

08001c52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c54:	d3fb      	bcc.n	8001c4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001c56:	f7ff ffd7 	bl	8001c08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c5a:	f003 ff19 	bl	8005a90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c5e:	f7ff fb25 	bl	80012ac <main>
  bx  lr    
 8001c62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c64:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001c68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c6c:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 8001c70:	08005b30 	.word	0x08005b30
  ldr r2, =_sbss
 8001c74:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001c78:	20000254 	.word	0x20000254

08001c7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c7c:	e7fe      	b.n	8001c7c <ADC_IRQHandler>
	...

08001c80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c84:	4b0e      	ldr	r3, [pc, #56]	; (8001cc0 <HAL_Init+0x40>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a0d      	ldr	r2, [pc, #52]	; (8001cc0 <HAL_Init+0x40>)
 8001c8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_Init+0x40>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4a0a      	ldr	r2, [pc, #40]	; (8001cc0 <HAL_Init+0x40>)
 8001c96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c9c:	4b08      	ldr	r3, [pc, #32]	; (8001cc0 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a07      	ldr	r2, [pc, #28]	; (8001cc0 <HAL_Init+0x40>)
 8001ca2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ca8:	2003      	movs	r0, #3
 8001caa:	f000 f92b 	bl	8001f04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cae:	2000      	movs	r0, #0
 8001cb0:	f000 f808 	bl	8001cc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001cb4:	f7ff fe10 	bl	80018d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023c00 	.word	0x40023c00

08001cc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <HAL_InitTick+0x54>)
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	4b12      	ldr	r3, [pc, #72]	; (8001d1c <HAL_InitTick+0x58>)
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cda:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	f000 f943 	bl	8001f6e <HAL_SYSTICK_Config>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00e      	b.n	8001d10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b0f      	cmp	r3, #15
 8001cf6:	d80a      	bhi.n	8001d0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	6879      	ldr	r1, [r7, #4]
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f000 f90b 	bl	8001f1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d04:	4a06      	ldr	r2, [pc, #24]	; (8001d20 <HAL_InitTick+0x5c>)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	e000      	b.n	8001d10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000028 	.word	0x20000028
 8001d1c:	20000030 	.word	0x20000030
 8001d20:	2000002c 	.word	0x2000002c

08001d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <HAL_IncTick+0x20>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	4b06      	ldr	r3, [pc, #24]	; (8001d48 <HAL_IncTick+0x24>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4413      	add	r3, r2
 8001d34:	4a04      	ldr	r2, [pc, #16]	; (8001d48 <HAL_IncTick+0x24>)
 8001d36:	6013      	str	r3, [r2, #0]
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	20000030 	.word	0x20000030
 8001d48:	20000230 	.word	0x20000230

08001d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d50:	4b03      	ldr	r3, [pc, #12]	; (8001d60 <HAL_GetTick+0x14>)
 8001d52:	681b      	ldr	r3, [r3, #0]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000230 	.word	0x20000230

08001d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	f003 0307 	and.w	r3, r3, #7
 8001d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d74:	4b0c      	ldr	r3, [pc, #48]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d7a:	68ba      	ldr	r2, [r7, #8]
 8001d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d80:	4013      	ands	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d96:	4a04      	ldr	r2, [pc, #16]	; (8001da8 <__NVIC_SetPriorityGrouping+0x44>)
 8001d98:	68bb      	ldr	r3, [r7, #8]
 8001d9a:	60d3      	str	r3, [r2, #12]
}
 8001d9c:	bf00      	nop
 8001d9e:	3714      	adds	r7, #20
 8001da0:	46bd      	mov	sp, r7
 8001da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da6:	4770      	bx	lr
 8001da8:	e000ed00 	.word	0xe000ed00

08001dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001dac:	b480      	push	{r7}
 8001dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001db0:	4b04      	ldr	r3, [pc, #16]	; (8001dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8001db2:	68db      	ldr	r3, [r3, #12]
 8001db4:	0a1b      	lsrs	r3, r3, #8
 8001db6:	f003 0307 	and.w	r3, r3, #7
}
 8001dba:	4618      	mov	r0, r3
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr
 8001dc4:	e000ed00 	.word	0xe000ed00

08001dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	db0b      	blt.n	8001df2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dda:	79fb      	ldrb	r3, [r7, #7]
 8001ddc:	f003 021f 	and.w	r2, r3, #31
 8001de0:	4907      	ldr	r1, [pc, #28]	; (8001e00 <__NVIC_EnableIRQ+0x38>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	095b      	lsrs	r3, r3, #5
 8001de8:	2001      	movs	r0, #1
 8001dea:	fa00 f202 	lsl.w	r2, r0, r2
 8001dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	e000e100 	.word	0xe000e100

08001e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	6039      	str	r1, [r7, #0]
 8001e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	db0a      	blt.n	8001e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	490c      	ldr	r1, [pc, #48]	; (8001e50 <__NVIC_SetPriority+0x4c>)
 8001e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e22:	0112      	lsls	r2, r2, #4
 8001e24:	b2d2      	uxtb	r2, r2
 8001e26:	440b      	add	r3, r1
 8001e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e2c:	e00a      	b.n	8001e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4908      	ldr	r1, [pc, #32]	; (8001e54 <__NVIC_SetPriority+0x50>)
 8001e34:	79fb      	ldrb	r3, [r7, #7]
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	3b04      	subs	r3, #4
 8001e3c:	0112      	lsls	r2, r2, #4
 8001e3e:	b2d2      	uxtb	r2, r2
 8001e40:	440b      	add	r3, r1
 8001e42:	761a      	strb	r2, [r3, #24]
}
 8001e44:	bf00      	nop
 8001e46:	370c      	adds	r7, #12
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000e100 	.word	0xe000e100
 8001e54:	e000ed00 	.word	0xe000ed00

08001e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b089      	sub	sp, #36	; 0x24
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	60f8      	str	r0, [r7, #12]
 8001e60:	60b9      	str	r1, [r7, #8]
 8001e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e6c:	69fb      	ldr	r3, [r7, #28]
 8001e6e:	f1c3 0307 	rsb	r3, r3, #7
 8001e72:	2b04      	cmp	r3, #4
 8001e74:	bf28      	it	cs
 8001e76:	2304      	movcs	r3, #4
 8001e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	3304      	adds	r3, #4
 8001e7e:	2b06      	cmp	r3, #6
 8001e80:	d902      	bls.n	8001e88 <NVIC_EncodePriority+0x30>
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	3b03      	subs	r3, #3
 8001e86:	e000      	b.n	8001e8a <NVIC_EncodePriority+0x32>
 8001e88:	2300      	movs	r3, #0
 8001e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	43da      	mvns	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	401a      	ands	r2, r3
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ea0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ea4:	697b      	ldr	r3, [r7, #20]
 8001ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8001eaa:	43d9      	mvns	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eb0:	4313      	orrs	r3, r2
         );
}
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	3724      	adds	r7, #36	; 0x24
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
	...

08001ec0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b082      	sub	sp, #8
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	3b01      	subs	r3, #1
 8001ecc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001ed0:	d301      	bcc.n	8001ed6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e00f      	b.n	8001ef6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ed6:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <SysTick_Config+0x40>)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3b01      	subs	r3, #1
 8001edc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ede:	210f      	movs	r1, #15
 8001ee0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ee4:	f7ff ff8e 	bl	8001e04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ee8:	4b05      	ldr	r3, [pc, #20]	; (8001f00 <SysTick_Config+0x40>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eee:	4b04      	ldr	r3, [pc, #16]	; (8001f00 <SysTick_Config+0x40>)
 8001ef0:	2207      	movs	r2, #7
 8001ef2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	e000e010 	.word	0xe000e010

08001f04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f7ff ff29 	bl	8001d64 <__NVIC_SetPriorityGrouping>
}
 8001f12:	bf00      	nop
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}

08001f1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f1a:	b580      	push	{r7, lr}
 8001f1c:	b086      	sub	sp, #24
 8001f1e:	af00      	add	r7, sp, #0
 8001f20:	4603      	mov	r3, r0
 8001f22:	60b9      	str	r1, [r7, #8]
 8001f24:	607a      	str	r2, [r7, #4]
 8001f26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f2c:	f7ff ff3e 	bl	8001dac <__NVIC_GetPriorityGrouping>
 8001f30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f32:	687a      	ldr	r2, [r7, #4]
 8001f34:	68b9      	ldr	r1, [r7, #8]
 8001f36:	6978      	ldr	r0, [r7, #20]
 8001f38:	f7ff ff8e 	bl	8001e58 <NVIC_EncodePriority>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f42:	4611      	mov	r1, r2
 8001f44:	4618      	mov	r0, r3
 8001f46:	f7ff ff5d 	bl	8001e04 <__NVIC_SetPriority>
}
 8001f4a:	bf00      	nop
 8001f4c:	3718      	adds	r7, #24
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b082      	sub	sp, #8
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	4603      	mov	r3, r0
 8001f5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff31 	bl	8001dc8 <__NVIC_EnableIRQ>
}
 8001f66:	bf00      	nop
 8001f68:	3708      	adds	r7, #8
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffa2 	bl	8001ec0 <SysTick_Config>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b084      	sub	sp, #16
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001f94:	f7ff feda 	bl	8001d4c <HAL_GetTick>
 8001f98:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fa0:	b2db      	uxtb	r3, r3
 8001fa2:	2b02      	cmp	r3, #2
 8001fa4:	d008      	beq.n	8001fb8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2280      	movs	r2, #128	; 0x80
 8001faa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e052      	b.n	800205e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0216 	bic.w	r2, r2, #22
 8001fc6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	695a      	ldr	r2, [r3, #20]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fd6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d103      	bne.n	8001fe8 <HAL_DMA_Abort+0x62>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d007      	beq.n	8001ff8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f022 0208 	bic.w	r2, r2, #8
 8001ff6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f022 0201 	bic.w	r2, r2, #1
 8002006:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002008:	e013      	b.n	8002032 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800200a:	f7ff fe9f 	bl	8001d4c <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	2b05      	cmp	r3, #5
 8002016:	d90c      	bls.n	8002032 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2220      	movs	r2, #32
 800201c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2203      	movs	r2, #3
 8002022:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e015      	b.n	800205e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e4      	bne.n	800200a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	223f      	movs	r2, #63	; 0x3f
 8002046:	409a      	lsls	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	2201      	movs	r2, #1
 8002050:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	2200      	movs	r2, #0
 8002058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800205c:	2300      	movs	r3, #0
}
 800205e:	4618      	mov	r0, r3
 8002060:	3710      	adds	r7, #16
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}

08002066 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002066:	b480      	push	{r7}
 8002068:	b083      	sub	sp, #12
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002074:	b2db      	uxtb	r3, r3
 8002076:	2b02      	cmp	r3, #2
 8002078:	d004      	beq.n	8002084 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2280      	movs	r2, #128	; 0x80
 800207e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e00c      	b.n	800209e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2205      	movs	r2, #5
 8002088:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	370c      	adds	r7, #12
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr
	...

080020ac <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80020be:	4b23      	ldr	r3, [pc, #140]	; (800214c <HAL_FLASH_Program+0xa0>)
 80020c0:	7e1b      	ldrb	r3, [r3, #24]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d101      	bne.n	80020ca <HAL_FLASH_Program+0x1e>
 80020c6:	2302      	movs	r3, #2
 80020c8:	e03b      	b.n	8002142 <HAL_FLASH_Program+0x96>
 80020ca:	4b20      	ldr	r3, [pc, #128]	; (800214c <HAL_FLASH_Program+0xa0>)
 80020cc:	2201      	movs	r2, #1
 80020ce:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80020d0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80020d4:	f000 f860 	bl	8002198 <FLASH_WaitForLastOperation>
 80020d8:	4603      	mov	r3, r0
 80020da:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80020dc:	7dfb      	ldrb	r3, [r7, #23]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d12b      	bne.n	800213a <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d105      	bne.n	80020f4 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80020e8:	783b      	ldrb	r3, [r7, #0]
 80020ea:	4619      	mov	r1, r3
 80020ec:	68b8      	ldr	r0, [r7, #8]
 80020ee:	f000 f90b 	bl	8002308 <FLASH_Program_Byte>
 80020f2:	e016      	b.n	8002122 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d105      	bne.n	8002106 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80020fa:	883b      	ldrh	r3, [r7, #0]
 80020fc:	4619      	mov	r1, r3
 80020fe:	68b8      	ldr	r0, [r7, #8]
 8002100:	f000 f8de 	bl	80022c0 <FLASH_Program_HalfWord>
 8002104:	e00d      	b.n	8002122 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2b02      	cmp	r3, #2
 800210a:	d105      	bne.n	8002118 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	4619      	mov	r1, r3
 8002110:	68b8      	ldr	r0, [r7, #8]
 8002112:	f000 f8b3 	bl	800227c <FLASH_Program_Word>
 8002116:	e004      	b.n	8002122 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8002118:	e9d7 2300 	ldrd	r2, r3, [r7]
 800211c:	68b8      	ldr	r0, [r7, #8]
 800211e:	f000 f87b 	bl	8002218 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002122:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002126:	f000 f837 	bl	8002198 <FLASH_WaitForLastOperation>
 800212a:	4603      	mov	r3, r0
 800212c:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800212e:	4b08      	ldr	r3, [pc, #32]	; (8002150 <HAL_FLASH_Program+0xa4>)
 8002130:	691b      	ldr	r3, [r3, #16]
 8002132:	4a07      	ldr	r2, [pc, #28]	; (8002150 <HAL_FLASH_Program+0xa4>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800213a:	4b04      	ldr	r3, [pc, #16]	; (800214c <HAL_FLASH_Program+0xa0>)
 800213c:	2200      	movs	r2, #0
 800213e:	761a      	strb	r2, [r3, #24]
  
  return status;
 8002140:	7dfb      	ldrb	r3, [r7, #23]
}
 8002142:	4618      	mov	r0, r3
 8002144:	3718      	adds	r7, #24
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	20000234 	.word	0x20000234
 8002150:	40023c00 	.word	0x40023c00

08002154 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800215a:	2300      	movs	r3, #0
 800215c:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <HAL_FLASH_Unlock+0x38>)
 8002160:	691b      	ldr	r3, [r3, #16]
 8002162:	2b00      	cmp	r3, #0
 8002164:	da0b      	bge.n	800217e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_FLASH_Unlock+0x38>)
 8002168:	4a09      	ldr	r2, [pc, #36]	; (8002190 <HAL_FLASH_Unlock+0x3c>)
 800216a:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_FLASH_Unlock+0x38>)
 800216e:	4a09      	ldr	r2, [pc, #36]	; (8002194 <HAL_FLASH_Unlock+0x40>)
 8002170:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002172:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_FLASH_Unlock+0x38>)
 8002174:	691b      	ldr	r3, [r3, #16]
 8002176:	2b00      	cmp	r3, #0
 8002178:	da01      	bge.n	800217e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800217e:	79fb      	ldrb	r3, [r7, #7]
}
 8002180:	4618      	mov	r0, r3
 8002182:	370c      	adds	r7, #12
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	40023c00 	.word	0x40023c00
 8002190:	45670123 	.word	0x45670123
 8002194:	cdef89ab 	.word	0xcdef89ab

08002198 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8002198:	b580      	push	{r7, lr}
 800219a:	b084      	sub	sp, #16
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80021a4:	4b1a      	ldr	r3, [pc, #104]	; (8002210 <FLASH_WaitForLastOperation+0x78>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80021aa:	f7ff fdcf 	bl	8001d4c <HAL_GetTick>
 80021ae:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80021b0:	e010      	b.n	80021d4 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021b8:	d00c      	beq.n	80021d4 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d007      	beq.n	80021d0 <FLASH_WaitForLastOperation+0x38>
 80021c0:	f7ff fdc4 	bl	8001d4c <HAL_GetTick>
 80021c4:	4602      	mov	r2, r0
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	429a      	cmp	r2, r3
 80021ce:	d201      	bcs.n	80021d4 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80021d0:	2303      	movs	r3, #3
 80021d2:	e019      	b.n	8002208 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80021d4:	4b0f      	ldr	r3, [pc, #60]	; (8002214 <FLASH_WaitForLastOperation+0x7c>)
 80021d6:	68db      	ldr	r3, [r3, #12]
 80021d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d1e8      	bne.n	80021b2 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80021e0:	4b0c      	ldr	r3, [pc, #48]	; (8002214 <FLASH_WaitForLastOperation+0x7c>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0301 	and.w	r3, r3, #1
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d002      	beq.n	80021f2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80021ec:	4b09      	ldr	r3, [pc, #36]	; (8002214 <FLASH_WaitForLastOperation+0x7c>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80021f2:	4b08      	ldr	r3, [pc, #32]	; (8002214 <FLASH_WaitForLastOperation+0x7c>)
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80021fe:	f000 f8a5 	bl	800234c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e000      	b.n	8002208 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8002206:	2300      	movs	r3, #0
  
}  
 8002208:	4618      	mov	r0, r3
 800220a:	3710      	adds	r7, #16
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	20000234 	.word	0x20000234
 8002214:	40023c00 	.word	0x40023c00

08002218 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8002218:	b480      	push	{r7}
 800221a:	b085      	sub	sp, #20
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002224:	4b14      	ldr	r3, [pc, #80]	; (8002278 <FLASH_Program_DoubleWord+0x60>)
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	4a13      	ldr	r2, [pc, #76]	; (8002278 <FLASH_Program_DoubleWord+0x60>)
 800222a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800222e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8002230:	4b11      	ldr	r3, [pc, #68]	; (8002278 <FLASH_Program_DoubleWord+0x60>)
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	4a10      	ldr	r2, [pc, #64]	; (8002278 <FLASH_Program_DoubleWord+0x60>)
 8002236:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800223a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800223c:	4b0e      	ldr	r3, [pc, #56]	; (8002278 <FLASH_Program_DoubleWord+0x60>)
 800223e:	691b      	ldr	r3, [r3, #16]
 8002240:	4a0d      	ldr	r2, [pc, #52]	; (8002278 <FLASH_Program_DoubleWord+0x60>)
 8002242:	f043 0301 	orr.w	r3, r3, #1
 8002246:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800224e:	f3bf 8f6f 	isb	sy
}
 8002252:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8002254:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	000a      	movs	r2, r1
 8002262:	2300      	movs	r3, #0
 8002264:	68f9      	ldr	r1, [r7, #12]
 8002266:	3104      	adds	r1, #4
 8002268:	4613      	mov	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
}
 800226c:	bf00      	nop
 800226e:	3714      	adds	r7, #20
 8002270:	46bd      	mov	sp, r7
 8002272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002276:	4770      	bx	lr
 8002278:	40023c00 	.word	0x40023c00

0800227c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 800227c:	b480      	push	{r7}
 800227e:	b083      	sub	sp, #12
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002286:	4b0d      	ldr	r3, [pc, #52]	; (80022bc <FLASH_Program_Word+0x40>)
 8002288:	691b      	ldr	r3, [r3, #16]
 800228a:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <FLASH_Program_Word+0x40>)
 800228c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002290:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8002292:	4b0a      	ldr	r3, [pc, #40]	; (80022bc <FLASH_Program_Word+0x40>)
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	4a09      	ldr	r2, [pc, #36]	; (80022bc <FLASH_Program_Word+0x40>)
 8002298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800229c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800229e:	4b07      	ldr	r3, [pc, #28]	; (80022bc <FLASH_Program_Word+0x40>)
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4a06      	ldr	r2, [pc, #24]	; (80022bc <FLASH_Program_Word+0x40>)
 80022a4:	f043 0301 	orr.w	r3, r3, #1
 80022a8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	683a      	ldr	r2, [r7, #0]
 80022ae:	601a      	str	r2, [r3, #0]
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr
 80022bc:	40023c00 	.word	0x40023c00

080022c0 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80022cc:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <FLASH_Program_HalfWord+0x44>)
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	4a0c      	ldr	r2, [pc, #48]	; (8002304 <FLASH_Program_HalfWord+0x44>)
 80022d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <FLASH_Program_HalfWord+0x44>)
 80022da:	691b      	ldr	r3, [r3, #16]
 80022dc:	4a09      	ldr	r2, [pc, #36]	; (8002304 <FLASH_Program_HalfWord+0x44>)
 80022de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80022e4:	4b07      	ldr	r3, [pc, #28]	; (8002304 <FLASH_Program_HalfWord+0x44>)
 80022e6:	691b      	ldr	r3, [r3, #16]
 80022e8:	4a06      	ldr	r2, [pc, #24]	; (8002304 <FLASH_Program_HalfWord+0x44>)
 80022ea:	f043 0301 	orr.w	r3, r3, #1
 80022ee:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	887a      	ldrh	r2, [r7, #2]
 80022f4:	801a      	strh	r2, [r3, #0]
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	40023c00 	.word	0x40023c00

08002308 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002314:	4b0c      	ldr	r3, [pc, #48]	; (8002348 <FLASH_Program_Byte+0x40>)
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	4a0b      	ldr	r2, [pc, #44]	; (8002348 <FLASH_Program_Byte+0x40>)
 800231a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8002320:	4b09      	ldr	r3, [pc, #36]	; (8002348 <FLASH_Program_Byte+0x40>)
 8002322:	4a09      	ldr	r2, [pc, #36]	; (8002348 <FLASH_Program_Byte+0x40>)
 8002324:	691b      	ldr	r3, [r3, #16]
 8002326:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8002328:	4b07      	ldr	r3, [pc, #28]	; (8002348 <FLASH_Program_Byte+0x40>)
 800232a:	691b      	ldr	r3, [r3, #16]
 800232c:	4a06      	ldr	r2, [pc, #24]	; (8002348 <FLASH_Program_Byte+0x40>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	78fa      	ldrb	r2, [r7, #3]
 8002338:	701a      	strb	r2, [r3, #0]
}
 800233a:	bf00      	nop
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	40023c00 	.word	0x40023c00

0800234c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8002350:	4b2f      	ldr	r3, [pc, #188]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	f003 0310 	and.w	r3, r3, #16
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800235c:	4b2d      	ldr	r3, [pc, #180]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 800235e:	69db      	ldr	r3, [r3, #28]
 8002360:	f043 0310 	orr.w	r3, r3, #16
 8002364:	4a2b      	ldr	r2, [pc, #172]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 8002366:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8002368:	4b29      	ldr	r3, [pc, #164]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 800236a:	2210      	movs	r2, #16
 800236c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800236e:	4b28      	ldr	r3, [pc, #160]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800237a:	4b26      	ldr	r3, [pc, #152]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 800237c:	69db      	ldr	r3, [r3, #28]
 800237e:	f043 0308 	orr.w	r3, r3, #8
 8002382:	4a24      	ldr	r2, [pc, #144]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 8002384:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8002386:	4b22      	ldr	r3, [pc, #136]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 8002388:	2220      	movs	r2, #32
 800238a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800238c:	4b20      	ldr	r3, [pc, #128]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8002398:	4b1e      	ldr	r3, [pc, #120]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	f043 0304 	orr.w	r3, r3, #4
 80023a0:	4a1c      	ldr	r2, [pc, #112]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 80023a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80023a4:	4b1a      	ldr	r3, [pc, #104]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80023aa:	4b19      	ldr	r3, [pc, #100]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80023b6:	4b17      	ldr	r3, [pc, #92]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	f043 0302 	orr.w	r3, r3, #2
 80023be:	4a15      	ldr	r2, [pc, #84]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 80023c0:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80023c2:	4b13      	ldr	r3, [pc, #76]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 80023c4:	2280      	movs	r2, #128	; 0x80
 80023c6:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80023c8:	4b11      	ldr	r3, [pc, #68]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 80023ca:	68db      	ldr	r3, [r3, #12]
 80023cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d009      	beq.n	80023e8 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80023d4:	4b0f      	ldr	r3, [pc, #60]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 80023d6:	69db      	ldr	r3, [r3, #28]
 80023d8:	f043 0301 	orr.w	r3, r3, #1
 80023dc:	4a0d      	ldr	r2, [pc, #52]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 80023de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80023e0:	4b0b      	ldr	r3, [pc, #44]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 80023e2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023e6:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80023e8:	4b09      	ldr	r3, [pc, #36]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d008      	beq.n	8002406 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80023f4:	4b07      	ldr	r3, [pc, #28]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 80023f6:	69db      	ldr	r3, [r3, #28]
 80023f8:	f043 0320 	orr.w	r3, r3, #32
 80023fc:	4a05      	ldr	r2, [pc, #20]	; (8002414 <FLASH_SetErrorCode+0xc8>)
 80023fe:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8002400:	4b03      	ldr	r3, [pc, #12]	; (8002410 <FLASH_SetErrorCode+0xc4>)
 8002402:	2202      	movs	r2, #2
 8002404:	60da      	str	r2, [r3, #12]
  }
}
 8002406:	bf00      	nop
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40023c00 	.word	0x40023c00
 8002414:	20000234 	.word	0x20000234

08002418 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8002426:	2300      	movs	r3, #0
 8002428:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800242a:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <HAL_FLASHEx_Erase+0xd8>)
 800242c:	7e1b      	ldrb	r3, [r3, #24]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_FLASHEx_Erase+0x1e>
 8002432:	2302      	movs	r3, #2
 8002434:	e058      	b.n	80024e8 <HAL_FLASHEx_Erase+0xd0>
 8002436:	4b2e      	ldr	r3, [pc, #184]	; (80024f0 <HAL_FLASHEx_Erase+0xd8>)
 8002438:	2201      	movs	r2, #1
 800243a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800243c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002440:	f7ff feaa 	bl	8002198 <FLASH_WaitForLastOperation>
 8002444:	4603      	mov	r3, r0
 8002446:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8002448:	7bfb      	ldrb	r3, [r7, #15]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d148      	bne.n	80024e0 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	f04f 32ff 	mov.w	r2, #4294967295
 8002454:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d115      	bne.n	800248a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691b      	ldr	r3, [r3, #16]
 8002462:	b2da      	uxtb	r2, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	4619      	mov	r1, r3
 800246a:	4610      	mov	r0, r2
 800246c:	f000 f844 	bl	80024f8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002470:	f24c 3050 	movw	r0, #50000	; 0xc350
 8002474:	f7ff fe90 	bl	8002198 <FLASH_WaitForLastOperation>
 8002478:	4603      	mov	r3, r0
 800247a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 800247c:	4b1d      	ldr	r3, [pc, #116]	; (80024f4 <HAL_FLASHEx_Erase+0xdc>)
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	4a1c      	ldr	r2, [pc, #112]	; (80024f4 <HAL_FLASHEx_Erase+0xdc>)
 8002482:	f023 0304 	bic.w	r3, r3, #4
 8002486:	6113      	str	r3, [r2, #16]
 8002488:	e028      	b.n	80024dc <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	60bb      	str	r3, [r7, #8]
 8002490:	e01c      	b.n	80024cc <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	691b      	ldr	r3, [r3, #16]
 8002496:	b2db      	uxtb	r3, r3
 8002498:	4619      	mov	r1, r3
 800249a:	68b8      	ldr	r0, [r7, #8]
 800249c:	f000 f850 	bl	8002540 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024a0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80024a4:	f7ff fe78 	bl	8002198 <FLASH_WaitForLastOperation>
 80024a8:	4603      	mov	r3, r0
 80024aa:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <HAL_FLASHEx_Erase+0xdc>)
 80024ae:	691b      	ldr	r3, [r3, #16]
 80024b0:	4a10      	ldr	r2, [pc, #64]	; (80024f4 <HAL_FLASHEx_Erase+0xdc>)
 80024b2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80024b6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80024b8:	7bfb      	ldrb	r3, [r7, #15]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	68ba      	ldr	r2, [r7, #8]
 80024c2:	601a      	str	r2, [r3, #0]
          break;
 80024c4:	e00a      	b.n	80024dc <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80024c6:	68bb      	ldr	r3, [r7, #8]
 80024c8:	3301      	adds	r3, #1
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68da      	ldr	r2, [r3, #12]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	4413      	add	r3, r2
 80024d6:	68ba      	ldr	r2, [r7, #8]
 80024d8:	429a      	cmp	r2, r3
 80024da:	d3da      	bcc.n	8002492 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80024dc:	f000 f878 	bl	80025d0 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80024e0:	4b03      	ldr	r3, [pc, #12]	; (80024f0 <HAL_FLASHEx_Erase+0xd8>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	761a      	strb	r2, [r3, #24]

  return status;
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3710      	adds	r7, #16
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	20000234 	.word	0x20000234
 80024f4:	40023c00 	.word	0x40023c00

080024f8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	6039      	str	r1, [r7, #0]
 8002502:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002504:	4b0d      	ldr	r3, [pc, #52]	; (800253c <FLASH_MassErase+0x44>)
 8002506:	691b      	ldr	r3, [r3, #16]
 8002508:	4a0c      	ldr	r2, [pc, #48]	; (800253c <FLASH_MassErase+0x44>)
 800250a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800250e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8002510:	4b0a      	ldr	r3, [pc, #40]	; (800253c <FLASH_MassErase+0x44>)
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	4a09      	ldr	r2, [pc, #36]	; (800253c <FLASH_MassErase+0x44>)
 8002516:	f043 0304 	orr.w	r3, r3, #4
 800251a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 800251c:	4b07      	ldr	r3, [pc, #28]	; (800253c <FLASH_MassErase+0x44>)
 800251e:	691a      	ldr	r2, [r3, #16]
 8002520:	79fb      	ldrb	r3, [r7, #7]
 8002522:	021b      	lsls	r3, r3, #8
 8002524:	4313      	orrs	r3, r2
 8002526:	4a05      	ldr	r2, [pc, #20]	; (800253c <FLASH_MassErase+0x44>)
 8002528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800252c:	6113      	str	r3, [r2, #16]
}
 800252e:	bf00      	nop
 8002530:	370c      	adds	r7, #12
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	40023c00 	.word	0x40023c00

08002540 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8002540:	b480      	push	{r7}
 8002542:	b085      	sub	sp, #20
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
 8002548:	460b      	mov	r3, r1
 800254a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800254c:	2300      	movs	r3, #0
 800254e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8002550:	78fb      	ldrb	r3, [r7, #3]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d102      	bne.n	800255c <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002556:	2300      	movs	r3, #0
 8002558:	60fb      	str	r3, [r7, #12]
 800255a:	e010      	b.n	800257e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800255c:	78fb      	ldrb	r3, [r7, #3]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d103      	bne.n	800256a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8002562:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	e009      	b.n	800257e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800256a:	78fb      	ldrb	r3, [r7, #3]
 800256c:	2b02      	cmp	r3, #2
 800256e:	d103      	bne.n	8002578 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8002570:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002574:	60fb      	str	r3, [r7, #12]
 8002576:	e002      	b.n	800257e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002578:	f44f 7340 	mov.w	r3, #768	; 0x300
 800257c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800257e:	4b13      	ldr	r3, [pc, #76]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	4a12      	ldr	r2, [pc, #72]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 8002584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002588:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800258a:	4b10      	ldr	r3, [pc, #64]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 800258c:	691a      	ldr	r2, [r3, #16]
 800258e:	490f      	ldr	r1, [pc, #60]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	4313      	orrs	r3, r2
 8002594:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002596:	4b0d      	ldr	r3, [pc, #52]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	4a0c      	ldr	r2, [pc, #48]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 800259c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80025a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80025a2:	4b0a      	ldr	r3, [pc, #40]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 80025a4:	691a      	ldr	r2, [r3, #16]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	00db      	lsls	r3, r3, #3
 80025aa:	4313      	orrs	r3, r2
 80025ac:	4a07      	ldr	r2, [pc, #28]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 80025ae:	f043 0302 	orr.w	r3, r3, #2
 80025b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	4a04      	ldr	r2, [pc, #16]	; (80025cc <FLASH_Erase_Sector+0x8c>)
 80025ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025be:	6113      	str	r3, [r2, #16]
}
 80025c0:	bf00      	nop
 80025c2:	3714      	adds	r7, #20
 80025c4:	46bd      	mov	sp, r7
 80025c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ca:	4770      	bx	lr
 80025cc:	40023c00 	.word	0x40023c00

080025d0 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80025d4:	4b20      	ldr	r3, [pc, #128]	; (8002658 <FLASH_FlushCaches+0x88>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d017      	beq.n	8002610 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80025e0:	4b1d      	ldr	r3, [pc, #116]	; (8002658 <FLASH_FlushCaches+0x88>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a1c      	ldr	r2, [pc, #112]	; (8002658 <FLASH_FlushCaches+0x88>)
 80025e6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80025ea:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80025ec:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <FLASH_FlushCaches+0x88>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a19      	ldr	r2, [pc, #100]	; (8002658 <FLASH_FlushCaches+0x88>)
 80025f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025f6:	6013      	str	r3, [r2, #0]
 80025f8:	4b17      	ldr	r3, [pc, #92]	; (8002658 <FLASH_FlushCaches+0x88>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a16      	ldr	r2, [pc, #88]	; (8002658 <FLASH_FlushCaches+0x88>)
 80025fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002602:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b14      	ldr	r3, [pc, #80]	; (8002658 <FLASH_FlushCaches+0x88>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a13      	ldr	r2, [pc, #76]	; (8002658 <FLASH_FlushCaches+0x88>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800260e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8002610:	4b11      	ldr	r3, [pc, #68]	; (8002658 <FLASH_FlushCaches+0x88>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002618:	2b00      	cmp	r3, #0
 800261a:	d017      	beq.n	800264c <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <FLASH_FlushCaches+0x88>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a0d      	ldr	r2, [pc, #52]	; (8002658 <FLASH_FlushCaches+0x88>)
 8002622:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002626:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002628:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <FLASH_FlushCaches+0x88>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a0a      	ldr	r2, [pc, #40]	; (8002658 <FLASH_FlushCaches+0x88>)
 800262e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002632:	6013      	str	r3, [r2, #0]
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <FLASH_FlushCaches+0x88>)
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	4a07      	ldr	r2, [pc, #28]	; (8002658 <FLASH_FlushCaches+0x88>)
 800263a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800263e:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8002640:	4b05      	ldr	r3, [pc, #20]	; (8002658 <FLASH_FlushCaches+0x88>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	4a04      	ldr	r2, [pc, #16]	; (8002658 <FLASH_FlushCaches+0x88>)
 8002646:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800264a:	6013      	str	r3, [r2, #0]
  }
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	40023c00 	.word	0x40023c00

0800265c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800265c:	b480      	push	{r7}
 800265e:	b089      	sub	sp, #36	; 0x24
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
 8002664:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800266a:	2300      	movs	r3, #0
 800266c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800266e:	2300      	movs	r3, #0
 8002670:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002672:	2300      	movs	r3, #0
 8002674:	61fb      	str	r3, [r7, #28]
 8002676:	e159      	b.n	800292c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002678:	2201      	movs	r2, #1
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	697a      	ldr	r2, [r7, #20]
 8002688:	4013      	ands	r3, r2
 800268a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	429a      	cmp	r2, r3
 8002692:	f040 8148 	bne.w	8002926 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f003 0303 	and.w	r3, r3, #3
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d005      	beq.n	80026ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d130      	bne.n	8002710 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026b4:	69fb      	ldr	r3, [r7, #28]
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	2203      	movs	r2, #3
 80026ba:	fa02 f303 	lsl.w	r3, r2, r3
 80026be:	43db      	mvns	r3, r3
 80026c0:	69ba      	ldr	r2, [r7, #24]
 80026c2:	4013      	ands	r3, r2
 80026c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	68da      	ldr	r2, [r3, #12]
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	fa02 f303 	lsl.w	r3, r2, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4313      	orrs	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026e4:	2201      	movs	r2, #1
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	43db      	mvns	r3, r3
 80026ee:	69ba      	ldr	r2, [r7, #24]
 80026f0:	4013      	ands	r3, r2
 80026f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	091b      	lsrs	r3, r3, #4
 80026fa:	f003 0201 	and.w	r2, r3, #1
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	fa02 f303 	lsl.w	r3, r2, r3
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	4313      	orrs	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	69ba      	ldr	r2, [r7, #24]
 800270e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f003 0303 	and.w	r3, r3, #3
 8002718:	2b03      	cmp	r3, #3
 800271a:	d017      	beq.n	800274c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	68db      	ldr	r3, [r3, #12]
 8002720:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002722:	69fb      	ldr	r3, [r7, #28]
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	2203      	movs	r2, #3
 8002728:	fa02 f303 	lsl.w	r3, r2, r3
 800272c:	43db      	mvns	r3, r3
 800272e:	69ba      	ldr	r2, [r7, #24]
 8002730:	4013      	ands	r3, r2
 8002732:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	69fb      	ldr	r3, [r7, #28]
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	fa02 f303 	lsl.w	r3, r2, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4313      	orrs	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69ba      	ldr	r2, [r7, #24]
 800274a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	f003 0303 	and.w	r3, r3, #3
 8002754:	2b02      	cmp	r3, #2
 8002756:	d123      	bne.n	80027a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002758:	69fb      	ldr	r3, [r7, #28]
 800275a:	08da      	lsrs	r2, r3, #3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	3208      	adds	r2, #8
 8002760:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	f003 0307 	and.w	r3, r3, #7
 800276c:	009b      	lsls	r3, r3, #2
 800276e:	220f      	movs	r2, #15
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	43db      	mvns	r3, r3
 8002776:	69ba      	ldr	r2, [r7, #24]
 8002778:	4013      	ands	r3, r2
 800277a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	691a      	ldr	r2, [r3, #16]
 8002780:	69fb      	ldr	r3, [r7, #28]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	009b      	lsls	r3, r3, #2
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	69ba      	ldr	r2, [r7, #24]
 800278e:	4313      	orrs	r3, r2
 8002790:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	08da      	lsrs	r2, r3, #3
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	3208      	adds	r2, #8
 800279a:	69b9      	ldr	r1, [r7, #24]
 800279c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80027a6:	69fb      	ldr	r3, [r7, #28]
 80027a8:	005b      	lsls	r3, r3, #1
 80027aa:	2203      	movs	r2, #3
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	43db      	mvns	r3, r3
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	4013      	ands	r3, r2
 80027b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	f003 0203 	and.w	r2, r3, #3
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	005b      	lsls	r3, r3, #1
 80027c4:	fa02 f303 	lsl.w	r3, r2, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	69ba      	ldr	r2, [r7, #24]
 80027d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80a2 	beq.w	8002926 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	4b57      	ldr	r3, [pc, #348]	; (8002944 <HAL_GPIO_Init+0x2e8>)
 80027e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ea:	4a56      	ldr	r2, [pc, #344]	; (8002944 <HAL_GPIO_Init+0x2e8>)
 80027ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027f0:	6453      	str	r3, [r2, #68]	; 0x44
 80027f2:	4b54      	ldr	r3, [pc, #336]	; (8002944 <HAL_GPIO_Init+0x2e8>)
 80027f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027fa:	60fb      	str	r3, [r7, #12]
 80027fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027fe:	4a52      	ldr	r2, [pc, #328]	; (8002948 <HAL_GPIO_Init+0x2ec>)
 8002800:	69fb      	ldr	r3, [r7, #28]
 8002802:	089b      	lsrs	r3, r3, #2
 8002804:	3302      	adds	r3, #2
 8002806:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800280a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800280c:	69fb      	ldr	r3, [r7, #28]
 800280e:	f003 0303 	and.w	r3, r3, #3
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	220f      	movs	r2, #15
 8002816:	fa02 f303 	lsl.w	r3, r2, r3
 800281a:	43db      	mvns	r3, r3
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	4013      	ands	r3, r2
 8002820:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a49      	ldr	r2, [pc, #292]	; (800294c <HAL_GPIO_Init+0x2f0>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d019      	beq.n	800285e <HAL_GPIO_Init+0x202>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a48      	ldr	r2, [pc, #288]	; (8002950 <HAL_GPIO_Init+0x2f4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d013      	beq.n	800285a <HAL_GPIO_Init+0x1fe>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a47      	ldr	r2, [pc, #284]	; (8002954 <HAL_GPIO_Init+0x2f8>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d00d      	beq.n	8002856 <HAL_GPIO_Init+0x1fa>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a46      	ldr	r2, [pc, #280]	; (8002958 <HAL_GPIO_Init+0x2fc>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d007      	beq.n	8002852 <HAL_GPIO_Init+0x1f6>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a45      	ldr	r2, [pc, #276]	; (800295c <HAL_GPIO_Init+0x300>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d101      	bne.n	800284e <HAL_GPIO_Init+0x1f2>
 800284a:	2304      	movs	r3, #4
 800284c:	e008      	b.n	8002860 <HAL_GPIO_Init+0x204>
 800284e:	2307      	movs	r3, #7
 8002850:	e006      	b.n	8002860 <HAL_GPIO_Init+0x204>
 8002852:	2303      	movs	r3, #3
 8002854:	e004      	b.n	8002860 <HAL_GPIO_Init+0x204>
 8002856:	2302      	movs	r3, #2
 8002858:	e002      	b.n	8002860 <HAL_GPIO_Init+0x204>
 800285a:	2301      	movs	r3, #1
 800285c:	e000      	b.n	8002860 <HAL_GPIO_Init+0x204>
 800285e:	2300      	movs	r3, #0
 8002860:	69fa      	ldr	r2, [r7, #28]
 8002862:	f002 0203 	and.w	r2, r2, #3
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	4093      	lsls	r3, r2
 800286a:	69ba      	ldr	r2, [r7, #24]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002870:	4935      	ldr	r1, [pc, #212]	; (8002948 <HAL_GPIO_Init+0x2ec>)
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	089b      	lsrs	r3, r3, #2
 8002876:	3302      	adds	r3, #2
 8002878:	69ba      	ldr	r2, [r7, #24]
 800287a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800287e:	4b38      	ldr	r3, [pc, #224]	; (8002960 <HAL_GPIO_Init+0x304>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028a2:	4a2f      	ldr	r2, [pc, #188]	; (8002960 <HAL_GPIO_Init+0x304>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028a8:	4b2d      	ldr	r3, [pc, #180]	; (8002960 <HAL_GPIO_Init+0x304>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028cc:	4a24      	ldr	r2, [pc, #144]	; (8002960 <HAL_GPIO_Init+0x304>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028d2:	4b23      	ldr	r3, [pc, #140]	; (8002960 <HAL_GPIO_Init+0x304>)
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	43db      	mvns	r3, r3
 80028dc:	69ba      	ldr	r2, [r7, #24]
 80028de:	4013      	ands	r3, r2
 80028e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d003      	beq.n	80028f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	4313      	orrs	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80028f6:	4a1a      	ldr	r2, [pc, #104]	; (8002960 <HAL_GPIO_Init+0x304>)
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028fc:	4b18      	ldr	r3, [pc, #96]	; (8002960 <HAL_GPIO_Init+0x304>)
 80028fe:	68db      	ldr	r3, [r3, #12]
 8002900:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	43db      	mvns	r3, r3
 8002906:	69ba      	ldr	r2, [r7, #24]
 8002908:	4013      	ands	r3, r2
 800290a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	4313      	orrs	r3, r2
 800291e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002920:	4a0f      	ldr	r2, [pc, #60]	; (8002960 <HAL_GPIO_Init+0x304>)
 8002922:	69bb      	ldr	r3, [r7, #24]
 8002924:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	3301      	adds	r3, #1
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	69fb      	ldr	r3, [r7, #28]
 800292e:	2b0f      	cmp	r3, #15
 8002930:	f67f aea2 	bls.w	8002678 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002934:	bf00      	nop
 8002936:	bf00      	nop
 8002938:	3724      	adds	r7, #36	; 0x24
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40013800 	.word	0x40013800
 800294c:	40020000 	.word	0x40020000
 8002950:	40020400 	.word	0x40020400
 8002954:	40020800 	.word	0x40020800
 8002958:	40020c00 	.word	0x40020c00
 800295c:	40021000 	.word	0x40021000
 8002960:	40013c00 	.word	0x40013c00

08002964 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002964:	b480      	push	{r7}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	460b      	mov	r3, r1
 800296e:	807b      	strh	r3, [r7, #2]
 8002970:	4613      	mov	r3, r2
 8002972:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002974:	787b      	ldrb	r3, [r7, #1]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d003      	beq.n	8002982 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800297a:	887a      	ldrh	r2, [r7, #2]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002980:	e003      	b.n	800298a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	041a      	lsls	r2, r3, #16
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	619a      	str	r2, [r3, #24]
}
 800298a:	bf00      	nop
 800298c:	370c      	adds	r7, #12
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
	...

08002998 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b082      	sub	sp, #8
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80029a2:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029a4:	695a      	ldr	r2, [r3, #20]
 80029a6:	88fb      	ldrh	r3, [r7, #6]
 80029a8:	4013      	ands	r3, r2
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d006      	beq.n	80029bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80029ae:	4a05      	ldr	r2, [pc, #20]	; (80029c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80029b0:	88fb      	ldrh	r3, [r7, #6]
 80029b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80029b4:	88fb      	ldrh	r3, [r7, #6]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7fe fbfc 	bl	80011b4 <HAL_GPIO_EXTI_Callback>
  }
}
 80029bc:	bf00      	nop
 80029be:	3708      	adds	r7, #8
 80029c0:	46bd      	mov	sp, r7
 80029c2:	bd80      	pop	{r7, pc}
 80029c4:	40013c00 	.word	0x40013c00

080029c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d101      	bne.n	80029da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e264      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f003 0301 	and.w	r3, r3, #1
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d075      	beq.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029e6:	4ba3      	ldr	r3, [pc, #652]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 030c 	and.w	r3, r3, #12
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d00c      	beq.n	8002a0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029f2:	4ba0      	ldr	r3, [pc, #640]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80029fa:	2b08      	cmp	r3, #8
 80029fc:	d112      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029fe:	4b9d      	ldr	r3, [pc, #628]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002a0a:	d10b      	bne.n	8002a24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a0c:	4b99      	ldr	r3, [pc, #612]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d05b      	beq.n	8002ad0 <HAL_RCC_OscConfig+0x108>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d157      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002a20:	2301      	movs	r3, #1
 8002a22:	e23f      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a2c:	d106      	bne.n	8002a3c <HAL_RCC_OscConfig+0x74>
 8002a2e:	4b91      	ldr	r3, [pc, #580]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a90      	ldr	r2, [pc, #576]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a38:	6013      	str	r3, [r2, #0]
 8002a3a:	e01d      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	685b      	ldr	r3, [r3, #4]
 8002a40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002a44:	d10c      	bne.n	8002a60 <HAL_RCC_OscConfig+0x98>
 8002a46:	4b8b      	ldr	r3, [pc, #556]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4a8a      	ldr	r2, [pc, #552]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a50:	6013      	str	r3, [r2, #0]
 8002a52:	4b88      	ldr	r3, [pc, #544]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a87      	ldr	r2, [pc, #540]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	e00b      	b.n	8002a78 <HAL_RCC_OscConfig+0xb0>
 8002a60:	4b84      	ldr	r3, [pc, #528]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a83      	ldr	r2, [pc, #524]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a6a:	6013      	str	r3, [r2, #0]
 8002a6c:	4b81      	ldr	r3, [pc, #516]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a80      	ldr	r2, [pc, #512]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d013      	beq.n	8002aa8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a80:	f7ff f964 	bl	8001d4c <HAL_GetTick>
 8002a84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a88:	f7ff f960 	bl	8001d4c <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e204      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a9a:	4b76      	ldr	r3, [pc, #472]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0xc0>
 8002aa6:	e014      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002aa8:	f7ff f950 	bl	8001d4c <HAL_GetTick>
 8002aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aae:	e008      	b.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ab0:	f7ff f94c 	bl	8001d4c <HAL_GetTick>
 8002ab4:	4602      	mov	r2, r0
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	1ad3      	subs	r3, r2, r3
 8002aba:	2b64      	cmp	r3, #100	; 0x64
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e1f0      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ac2:	4b6c      	ldr	r3, [pc, #432]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f0      	bne.n	8002ab0 <HAL_RCC_OscConfig+0xe8>
 8002ace:	e000      	b.n	8002ad2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ad0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0302 	and.w	r3, r3, #2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d063      	beq.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ade:	4b65      	ldr	r3, [pc, #404]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	f003 030c 	and.w	r3, r3, #12
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d00b      	beq.n	8002b02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002aea:	4b62      	ldr	r3, [pc, #392]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002af2:	2b08      	cmp	r3, #8
 8002af4:	d11c      	bne.n	8002b30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002af6:	4b5f      	ldr	r3, [pc, #380]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d116      	bne.n	8002b30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b02:	4b5c      	ldr	r3, [pc, #368]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 0302 	and.w	r3, r3, #2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <HAL_RCC_OscConfig+0x152>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	68db      	ldr	r3, [r3, #12]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d001      	beq.n	8002b1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e1c4      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b1a:	4b56      	ldr	r3, [pc, #344]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	00db      	lsls	r3, r3, #3
 8002b28:	4952      	ldr	r1, [pc, #328]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b2a:	4313      	orrs	r3, r2
 8002b2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b2e:	e03a      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d020      	beq.n	8002b7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b38:	4b4f      	ldr	r3, [pc, #316]	; (8002c78 <HAL_RCC_OscConfig+0x2b0>)
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b3e:	f7ff f905 	bl	8001d4c <HAL_GetTick>
 8002b42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b44:	e008      	b.n	8002b58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b46:	f7ff f901 	bl	8001d4c <HAL_GetTick>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	1ad3      	subs	r3, r2, r3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d901      	bls.n	8002b58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e1a5      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b58:	4b46      	ldr	r3, [pc, #280]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f003 0302 	and.w	r3, r3, #2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d0f0      	beq.n	8002b46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b64:	4b43      	ldr	r3, [pc, #268]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	691b      	ldr	r3, [r3, #16]
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	4940      	ldr	r1, [pc, #256]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	600b      	str	r3, [r1, #0]
 8002b78:	e015      	b.n	8002ba6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b7a:	4b3f      	ldr	r3, [pc, #252]	; (8002c78 <HAL_RCC_OscConfig+0x2b0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b80:	f7ff f8e4 	bl	8001d4c <HAL_GetTick>
 8002b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b86:	e008      	b.n	8002b9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b88:	f7ff f8e0 	bl	8001d4c <HAL_GetTick>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	1ad3      	subs	r3, r2, r3
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	d901      	bls.n	8002b9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b96:	2303      	movs	r3, #3
 8002b98:	e184      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b9a:	4b36      	ldr	r3, [pc, #216]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d1f0      	bne.n	8002b88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0308 	and.w	r3, r3, #8
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d030      	beq.n	8002c14 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d016      	beq.n	8002be8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bba:	4b30      	ldr	r3, [pc, #192]	; (8002c7c <HAL_RCC_OscConfig+0x2b4>)
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bc0:	f7ff f8c4 	bl	8001d4c <HAL_GetTick>
 8002bc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bc6:	e008      	b.n	8002bda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bc8:	f7ff f8c0 	bl	8001d4c <HAL_GetTick>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	693b      	ldr	r3, [r7, #16]
 8002bd0:	1ad3      	subs	r3, r2, r3
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e164      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002bda:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002bdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d0f0      	beq.n	8002bc8 <HAL_RCC_OscConfig+0x200>
 8002be6:	e015      	b.n	8002c14 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002be8:	4b24      	ldr	r3, [pc, #144]	; (8002c7c <HAL_RCC_OscConfig+0x2b4>)
 8002bea:	2200      	movs	r2, #0
 8002bec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bee:	f7ff f8ad 	bl	8001d4c <HAL_GetTick>
 8002bf2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bf4:	e008      	b.n	8002c08 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf6:	f7ff f8a9 	bl	8001d4c <HAL_GetTick>
 8002bfa:	4602      	mov	r2, r0
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	1ad3      	subs	r3, r2, r3
 8002c00:	2b02      	cmp	r3, #2
 8002c02:	d901      	bls.n	8002c08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e14d      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c08:	4b1a      	ldr	r3, [pc, #104]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0c:	f003 0302 	and.w	r3, r3, #2
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1f0      	bne.n	8002bf6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 0304 	and.w	r3, r3, #4
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f000 80a0 	beq.w	8002d62 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c22:	2300      	movs	r3, #0
 8002c24:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c26:	4b13      	ldr	r3, [pc, #76]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d10f      	bne.n	8002c52 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c32:	2300      	movs	r3, #0
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	4b0f      	ldr	r3, [pc, #60]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3a:	4a0e      	ldr	r2, [pc, #56]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c40:	6413      	str	r3, [r2, #64]	; 0x40
 8002c42:	4b0c      	ldr	r3, [pc, #48]	; (8002c74 <HAL_RCC_OscConfig+0x2ac>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c52:	4b0b      	ldr	r3, [pc, #44]	; (8002c80 <HAL_RCC_OscConfig+0x2b8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d121      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <HAL_RCC_OscConfig+0x2b8>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <HAL_RCC_OscConfig+0x2b8>)
 8002c64:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c68:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c6a:	f7ff f86f 	bl	8001d4c <HAL_GetTick>
 8002c6e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c70:	e011      	b.n	8002c96 <HAL_RCC_OscConfig+0x2ce>
 8002c72:	bf00      	nop
 8002c74:	40023800 	.word	0x40023800
 8002c78:	42470000 	.word	0x42470000
 8002c7c:	42470e80 	.word	0x42470e80
 8002c80:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c84:	f7ff f862 	bl	8001d4c <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e106      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c96:	4b85      	ldr	r3, [pc, #532]	; (8002eac <HAL_RCC_OscConfig+0x4e4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d106      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x2f0>
 8002caa:	4b81      	ldr	r3, [pc, #516]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cae:	4a80      	ldr	r2, [pc, #512]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002cb0:	f043 0301 	orr.w	r3, r3, #1
 8002cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002cb6:	e01c      	b.n	8002cf2 <HAL_RCC_OscConfig+0x32a>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	2b05      	cmp	r3, #5
 8002cbe:	d10c      	bne.n	8002cda <HAL_RCC_OscConfig+0x312>
 8002cc0:	4b7b      	ldr	r3, [pc, #492]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc4:	4a7a      	ldr	r2, [pc, #488]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002cc6:	f043 0304 	orr.w	r3, r3, #4
 8002cca:	6713      	str	r3, [r2, #112]	; 0x70
 8002ccc:	4b78      	ldr	r3, [pc, #480]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd0:	4a77      	ldr	r2, [pc, #476]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002cd2:	f043 0301 	orr.w	r3, r3, #1
 8002cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002cd8:	e00b      	b.n	8002cf2 <HAL_RCC_OscConfig+0x32a>
 8002cda:	4b75      	ldr	r3, [pc, #468]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cde:	4a74      	ldr	r2, [pc, #464]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ce6:	4b72      	ldr	r3, [pc, #456]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cea:	4a71      	ldr	r2, [pc, #452]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002cec:	f023 0304 	bic.w	r3, r3, #4
 8002cf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d015      	beq.n	8002d26 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cfa:	f7ff f827 	bl	8001d4c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d00:	e00a      	b.n	8002d18 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d02:	f7ff f823 	bl	8001d4c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d10:	4293      	cmp	r3, r2
 8002d12:	d901      	bls.n	8002d18 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002d14:	2303      	movs	r3, #3
 8002d16:	e0c5      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d18:	4b65      	ldr	r3, [pc, #404]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d1c:	f003 0302 	and.w	r3, r3, #2
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d0ee      	beq.n	8002d02 <HAL_RCC_OscConfig+0x33a>
 8002d24:	e014      	b.n	8002d50 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d26:	f7ff f811 	bl	8001d4c <HAL_GetTick>
 8002d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d2c:	e00a      	b.n	8002d44 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002d2e:	f7ff f80d 	bl	8001d4c <HAL_GetTick>
 8002d32:	4602      	mov	r2, r0
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	1ad3      	subs	r3, r2, r3
 8002d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d901      	bls.n	8002d44 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8002d40:	2303      	movs	r3, #3
 8002d42:	e0af      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d44:	4b5a      	ldr	r3, [pc, #360]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d48:	f003 0302 	and.w	r3, r3, #2
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d1ee      	bne.n	8002d2e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d50:	7dfb      	ldrb	r3, [r7, #23]
 8002d52:	2b01      	cmp	r3, #1
 8002d54:	d105      	bne.n	8002d62 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d56:	4b56      	ldr	r3, [pc, #344]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5a:	4a55      	ldr	r2, [pc, #340]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	699b      	ldr	r3, [r3, #24]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	f000 809b 	beq.w	8002ea2 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d6c:	4b50      	ldr	r3, [pc, #320]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 030c 	and.w	r3, r3, #12
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d05c      	beq.n	8002e32 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	699b      	ldr	r3, [r3, #24]
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d141      	bne.n	8002e04 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d80:	4b4c      	ldr	r3, [pc, #304]	; (8002eb4 <HAL_RCC_OscConfig+0x4ec>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d86:	f7fe ffe1 	bl	8001d4c <HAL_GetTick>
 8002d8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d8c:	e008      	b.n	8002da0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d8e:	f7fe ffdd 	bl	8001d4c <HAL_GetTick>
 8002d92:	4602      	mov	r2, r0
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	1ad3      	subs	r3, r2, r3
 8002d98:	2b02      	cmp	r3, #2
 8002d9a:	d901      	bls.n	8002da0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	e081      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002da0:	4b43      	ldr	r3, [pc, #268]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d1f0      	bne.n	8002d8e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6a1b      	ldr	r3, [r3, #32]
 8002db4:	431a      	orrs	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dba:	019b      	lsls	r3, r3, #6
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dc2:	085b      	lsrs	r3, r3, #1
 8002dc4:	3b01      	subs	r3, #1
 8002dc6:	041b      	lsls	r3, r3, #16
 8002dc8:	431a      	orrs	r2, r3
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dce:	061b      	lsls	r3, r3, #24
 8002dd0:	4937      	ldr	r1, [pc, #220]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002dd6:	4b37      	ldr	r3, [pc, #220]	; (8002eb4 <HAL_RCC_OscConfig+0x4ec>)
 8002dd8:	2201      	movs	r2, #1
 8002dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ddc:	f7fe ffb6 	bl	8001d4c <HAL_GetTick>
 8002de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002de2:	e008      	b.n	8002df6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002de4:	f7fe ffb2 	bl	8001d4c <HAL_GetTick>
 8002de8:	4602      	mov	r2, r0
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d901      	bls.n	8002df6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002df2:	2303      	movs	r3, #3
 8002df4:	e056      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002df6:	4b2e      	ldr	r3, [pc, #184]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0f0      	beq.n	8002de4 <HAL_RCC_OscConfig+0x41c>
 8002e02:	e04e      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e04:	4b2b      	ldr	r3, [pc, #172]	; (8002eb4 <HAL_RCC_OscConfig+0x4ec>)
 8002e06:	2200      	movs	r2, #0
 8002e08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e0a:	f7fe ff9f 	bl	8001d4c <HAL_GetTick>
 8002e0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e10:	e008      	b.n	8002e24 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002e12:	f7fe ff9b 	bl	8001d4c <HAL_GetTick>
 8002e16:	4602      	mov	r2, r0
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d901      	bls.n	8002e24 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	e03f      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e24:	4b22      	ldr	r3, [pc, #136]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d1f0      	bne.n	8002e12 <HAL_RCC_OscConfig+0x44a>
 8002e30:	e037      	b.n	8002ea2 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	699b      	ldr	r3, [r3, #24]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	d101      	bne.n	8002e3e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e032      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e3e:	4b1c      	ldr	r3, [pc, #112]	; (8002eb0 <HAL_RCC_OscConfig+0x4e8>)
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	699b      	ldr	r3, [r3, #24]
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d028      	beq.n	8002e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e56:	429a      	cmp	r2, r3
 8002e58:	d121      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d11a      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e68:	68fa      	ldr	r2, [r7, #12]
 8002e6a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e6e:	4013      	ands	r3, r2
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e74:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d111      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e84:	085b      	lsrs	r3, r3, #1
 8002e86:	3b01      	subs	r3, #1
 8002e88:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d107      	bne.n	8002e9e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d001      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002e9e:	2301      	movs	r3, #1
 8002ea0:	e000      	b.n	8002ea4 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3718      	adds	r7, #24
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	40007000 	.word	0x40007000
 8002eb0:	40023800 	.word	0x40023800
 8002eb4:	42470060 	.word	0x42470060

08002eb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002eb8:	b580      	push	{r7, lr}
 8002eba:	b084      	sub	sp, #16
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d101      	bne.n	8002ecc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e0cc      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ecc:	4b68      	ldr	r3, [pc, #416]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f003 0307 	and.w	r3, r3, #7
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	d90c      	bls.n	8002ef4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002eda:	4b65      	ldr	r3, [pc, #404]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002edc:	683a      	ldr	r2, [r7, #0]
 8002ede:	b2d2      	uxtb	r2, r2
 8002ee0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ee2:	4b63      	ldr	r3, [pc, #396]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0307 	and.w	r3, r3, #7
 8002eea:	683a      	ldr	r2, [r7, #0]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	e0b8      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f003 0302 	and.w	r3, r3, #2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d020      	beq.n	8002f42 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f003 0304 	and.w	r3, r3, #4
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d005      	beq.n	8002f18 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f0c:	4b59      	ldr	r3, [pc, #356]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f0e:	689b      	ldr	r3, [r3, #8]
 8002f10:	4a58      	ldr	r2, [pc, #352]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f12:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002f16:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	f003 0308 	and.w	r3, r3, #8
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d005      	beq.n	8002f30 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f24:	4b53      	ldr	r3, [pc, #332]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f26:	689b      	ldr	r3, [r3, #8]
 8002f28:	4a52      	ldr	r2, [pc, #328]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002f2e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f30:	4b50      	ldr	r3, [pc, #320]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	494d      	ldr	r1, [pc, #308]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d044      	beq.n	8002fd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d107      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f56:	4b47      	ldr	r3, [pc, #284]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d119      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e07f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d003      	beq.n	8002f76 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f72:	2b03      	cmp	r3, #3
 8002f74:	d107      	bne.n	8002f86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f76:	4b3f      	ldr	r3, [pc, #252]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d109      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f82:	2301      	movs	r3, #1
 8002f84:	e06f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f86:	4b3b      	ldr	r3, [pc, #236]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f003 0302 	and.w	r3, r3, #2
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e067      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f96:	4b37      	ldr	r3, [pc, #220]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f023 0203 	bic.w	r2, r3, #3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	4934      	ldr	r1, [pc, #208]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fa8:	f7fe fed0 	bl	8001d4c <HAL_GetTick>
 8002fac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fae:	e00a      	b.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fb0:	f7fe fecc 	bl	8001d4c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e04f      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc6:	4b2b      	ldr	r3, [pc, #172]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc8:	689b      	ldr	r3, [r3, #8]
 8002fca:	f003 020c 	and.w	r2, r3, #12
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	685b      	ldr	r3, [r3, #4]
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d1eb      	bne.n	8002fb0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b25      	ldr	r3, [pc, #148]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d20c      	bcs.n	8003000 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b22      	ldr	r3, [pc, #136]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b20      	ldr	r3, [pc, #128]	; (8003070 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e032      	b.n	8003066 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0304 	and.w	r3, r3, #4
 8003008:	2b00      	cmp	r3, #0
 800300a:	d008      	beq.n	800301e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800300c:	4b19      	ldr	r3, [pc, #100]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800300e:	689b      	ldr	r3, [r3, #8]
 8003010:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	4916      	ldr	r1, [pc, #88]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0308 	and.w	r3, r3, #8
 8003026:	2b00      	cmp	r3, #0
 8003028:	d009      	beq.n	800303e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800302a:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800302c:	689b      	ldr	r3, [r3, #8]
 800302e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	00db      	lsls	r3, r3, #3
 8003038:	490e      	ldr	r1, [pc, #56]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	4313      	orrs	r3, r2
 800303c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800303e:	f000 f821 	bl	8003084 <HAL_RCC_GetSysClockFreq>
 8003042:	4602      	mov	r2, r0
 8003044:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	091b      	lsrs	r3, r3, #4
 800304a:	f003 030f 	and.w	r3, r3, #15
 800304e:	490a      	ldr	r1, [pc, #40]	; (8003078 <HAL_RCC_ClockConfig+0x1c0>)
 8003050:	5ccb      	ldrb	r3, [r1, r3]
 8003052:	fa22 f303 	lsr.w	r3, r2, r3
 8003056:	4a09      	ldr	r2, [pc, #36]	; (800307c <HAL_RCC_ClockConfig+0x1c4>)
 8003058:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_RCC_ClockConfig+0x1c8>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7fe fe30 	bl	8001cc4 <HAL_InitTick>

  return HAL_OK;
 8003064:	2300      	movs	r3, #0
}
 8003066:	4618      	mov	r0, r3
 8003068:	3710      	adds	r7, #16
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	40023c00 	.word	0x40023c00
 8003074:	40023800 	.word	0x40023800
 8003078:	08005b08 	.word	0x08005b08
 800307c:	20000028 	.word	0x20000028
 8003080:	2000002c 	.word	0x2000002c

08003084 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003084:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003088:	b084      	sub	sp, #16
 800308a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800308c:	2300      	movs	r3, #0
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	2300      	movs	r3, #0
 8003092:	60fb      	str	r3, [r7, #12]
 8003094:	2300      	movs	r3, #0
 8003096:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003098:	2300      	movs	r3, #0
 800309a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800309c:	4b67      	ldr	r3, [pc, #412]	; (800323c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800309e:	689b      	ldr	r3, [r3, #8]
 80030a0:	f003 030c 	and.w	r3, r3, #12
 80030a4:	2b08      	cmp	r3, #8
 80030a6:	d00d      	beq.n	80030c4 <HAL_RCC_GetSysClockFreq+0x40>
 80030a8:	2b08      	cmp	r3, #8
 80030aa:	f200 80bd 	bhi.w	8003228 <HAL_RCC_GetSysClockFreq+0x1a4>
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_RCC_GetSysClockFreq+0x34>
 80030b2:	2b04      	cmp	r3, #4
 80030b4:	d003      	beq.n	80030be <HAL_RCC_GetSysClockFreq+0x3a>
 80030b6:	e0b7      	b.n	8003228 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80030b8:	4b61      	ldr	r3, [pc, #388]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80030ba:	60bb      	str	r3, [r7, #8]
       break;
 80030bc:	e0b7      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80030be:	4b61      	ldr	r3, [pc, #388]	; (8003244 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80030c0:	60bb      	str	r3, [r7, #8]
      break;
 80030c2:	e0b4      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80030c4:	4b5d      	ldr	r3, [pc, #372]	; (800323c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030cc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80030ce:	4b5b      	ldr	r3, [pc, #364]	; (800323c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d04d      	beq.n	8003176 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030da:	4b58      	ldr	r3, [pc, #352]	; (800323c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	099b      	lsrs	r3, r3, #6
 80030e0:	461a      	mov	r2, r3
 80030e2:	f04f 0300 	mov.w	r3, #0
 80030e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80030ea:	f04f 0100 	mov.w	r1, #0
 80030ee:	ea02 0800 	and.w	r8, r2, r0
 80030f2:	ea03 0901 	and.w	r9, r3, r1
 80030f6:	4640      	mov	r0, r8
 80030f8:	4649      	mov	r1, r9
 80030fa:	f04f 0200 	mov.w	r2, #0
 80030fe:	f04f 0300 	mov.w	r3, #0
 8003102:	014b      	lsls	r3, r1, #5
 8003104:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003108:	0142      	lsls	r2, r0, #5
 800310a:	4610      	mov	r0, r2
 800310c:	4619      	mov	r1, r3
 800310e:	ebb0 0008 	subs.w	r0, r0, r8
 8003112:	eb61 0109 	sbc.w	r1, r1, r9
 8003116:	f04f 0200 	mov.w	r2, #0
 800311a:	f04f 0300 	mov.w	r3, #0
 800311e:	018b      	lsls	r3, r1, #6
 8003120:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003124:	0182      	lsls	r2, r0, #6
 8003126:	1a12      	subs	r2, r2, r0
 8003128:	eb63 0301 	sbc.w	r3, r3, r1
 800312c:	f04f 0000 	mov.w	r0, #0
 8003130:	f04f 0100 	mov.w	r1, #0
 8003134:	00d9      	lsls	r1, r3, #3
 8003136:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800313a:	00d0      	lsls	r0, r2, #3
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	eb12 0208 	adds.w	r2, r2, r8
 8003144:	eb43 0309 	adc.w	r3, r3, r9
 8003148:	f04f 0000 	mov.w	r0, #0
 800314c:	f04f 0100 	mov.w	r1, #0
 8003150:	0259      	lsls	r1, r3, #9
 8003152:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003156:	0250      	lsls	r0, r2, #9
 8003158:	4602      	mov	r2, r0
 800315a:	460b      	mov	r3, r1
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	461a      	mov	r2, r3
 8003164:	f04f 0300 	mov.w	r3, #0
 8003168:	f7fd f834 	bl	80001d4 <__aeabi_uldivmod>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4613      	mov	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
 8003174:	e04a      	b.n	800320c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003176:	4b31      	ldr	r3, [pc, #196]	; (800323c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	099b      	lsrs	r3, r3, #6
 800317c:	461a      	mov	r2, r3
 800317e:	f04f 0300 	mov.w	r3, #0
 8003182:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003186:	f04f 0100 	mov.w	r1, #0
 800318a:	ea02 0400 	and.w	r4, r2, r0
 800318e:	ea03 0501 	and.w	r5, r3, r1
 8003192:	4620      	mov	r0, r4
 8003194:	4629      	mov	r1, r5
 8003196:	f04f 0200 	mov.w	r2, #0
 800319a:	f04f 0300 	mov.w	r3, #0
 800319e:	014b      	lsls	r3, r1, #5
 80031a0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80031a4:	0142      	lsls	r2, r0, #5
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	1b00      	subs	r0, r0, r4
 80031ac:	eb61 0105 	sbc.w	r1, r1, r5
 80031b0:	f04f 0200 	mov.w	r2, #0
 80031b4:	f04f 0300 	mov.w	r3, #0
 80031b8:	018b      	lsls	r3, r1, #6
 80031ba:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80031be:	0182      	lsls	r2, r0, #6
 80031c0:	1a12      	subs	r2, r2, r0
 80031c2:	eb63 0301 	sbc.w	r3, r3, r1
 80031c6:	f04f 0000 	mov.w	r0, #0
 80031ca:	f04f 0100 	mov.w	r1, #0
 80031ce:	00d9      	lsls	r1, r3, #3
 80031d0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80031d4:	00d0      	lsls	r0, r2, #3
 80031d6:	4602      	mov	r2, r0
 80031d8:	460b      	mov	r3, r1
 80031da:	1912      	adds	r2, r2, r4
 80031dc:	eb45 0303 	adc.w	r3, r5, r3
 80031e0:	f04f 0000 	mov.w	r0, #0
 80031e4:	f04f 0100 	mov.w	r1, #0
 80031e8:	0299      	lsls	r1, r3, #10
 80031ea:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80031ee:	0290      	lsls	r0, r2, #10
 80031f0:	4602      	mov	r2, r0
 80031f2:	460b      	mov	r3, r1
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	461a      	mov	r2, r3
 80031fc:	f04f 0300 	mov.w	r3, #0
 8003200:	f7fc ffe8 	bl	80001d4 <__aeabi_uldivmod>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4613      	mov	r3, r2
 800320a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800320c:	4b0b      	ldr	r3, [pc, #44]	; (800323c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	0c1b      	lsrs	r3, r3, #16
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	3301      	adds	r3, #1
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800321c:	68fa      	ldr	r2, [r7, #12]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	fbb2 f3f3 	udiv	r3, r2, r3
 8003224:	60bb      	str	r3, [r7, #8]
      break;
 8003226:	e002      	b.n	800322e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003228:	4b05      	ldr	r3, [pc, #20]	; (8003240 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800322a:	60bb      	str	r3, [r7, #8]
      break;
 800322c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800322e:	68bb      	ldr	r3, [r7, #8]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3710      	adds	r7, #16
 8003234:	46bd      	mov	sp, r7
 8003236:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800323a:	bf00      	nop
 800323c:	40023800 	.word	0x40023800
 8003240:	00f42400 	.word	0x00f42400
 8003244:	007a1200 	.word	0x007a1200

08003248 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800324c:	4b03      	ldr	r3, [pc, #12]	; (800325c <HAL_RCC_GetHCLKFreq+0x14>)
 800324e:	681b      	ldr	r3, [r3, #0]
}
 8003250:	4618      	mov	r0, r3
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
 800325a:	bf00      	nop
 800325c:	20000028 	.word	0x20000028

08003260 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003264:	f7ff fff0 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003268:	4602      	mov	r2, r0
 800326a:	4b05      	ldr	r3, [pc, #20]	; (8003280 <HAL_RCC_GetPCLK1Freq+0x20>)
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	0a9b      	lsrs	r3, r3, #10
 8003270:	f003 0307 	and.w	r3, r3, #7
 8003274:	4903      	ldr	r1, [pc, #12]	; (8003284 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003276:	5ccb      	ldrb	r3, [r1, r3]
 8003278:	fa22 f303 	lsr.w	r3, r2, r3
}
 800327c:	4618      	mov	r0, r3
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40023800 	.word	0x40023800
 8003284:	08005b18 	.word	0x08005b18

08003288 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800328c:	f7ff ffdc 	bl	8003248 <HAL_RCC_GetHCLKFreq>
 8003290:	4602      	mov	r2, r0
 8003292:	4b05      	ldr	r3, [pc, #20]	; (80032a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	0b5b      	lsrs	r3, r3, #13
 8003298:	f003 0307 	and.w	r3, r3, #7
 800329c:	4903      	ldr	r1, [pc, #12]	; (80032ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800329e:	5ccb      	ldrb	r3, [r1, r3]
 80032a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40023800 	.word	0x40023800
 80032ac:	08005b18 	.word	0x08005b18

080032b0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b086      	sub	sp, #24
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0301 	and.w	r3, r3, #1
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d105      	bne.n	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d035      	beq.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80032d8:	4b67      	ldr	r3, [pc, #412]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80032de:	f7fe fd35 	bl	8001d4c <HAL_GetTick>
 80032e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032e4:	e008      	b.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80032e6:	f7fe fd31 	bl	8001d4c <HAL_GetTick>
 80032ea:	4602      	mov	r2, r0
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	1ad3      	subs	r3, r2, r3
 80032f0:	2b02      	cmp	r3, #2
 80032f2:	d901      	bls.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032f4:	2303      	movs	r3, #3
 80032f6:	e0ba      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80032f8:	4b60      	ldr	r3, [pc, #384]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f0      	bne.n	80032e6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	019a      	lsls	r2, r3, #6
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	689b      	ldr	r3, [r3, #8]
 800330e:	071b      	lsls	r3, r3, #28
 8003310:	495a      	ldr	r1, [pc, #360]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003312:	4313      	orrs	r3, r2
 8003314:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003318:	4b57      	ldr	r3, [pc, #348]	; (8003478 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800331a:	2201      	movs	r2, #1
 800331c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800331e:	f7fe fd15 	bl	8001d4c <HAL_GetTick>
 8003322:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003324:	e008      	b.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003326:	f7fe fd11 	bl	8001d4c <HAL_GetTick>
 800332a:	4602      	mov	r2, r0
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	1ad3      	subs	r3, r2, r3
 8003330:	2b02      	cmp	r3, #2
 8003332:	d901      	bls.n	8003338 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e09a      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003338:	4b50      	ldr	r3, [pc, #320]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003340:	2b00      	cmp	r3, #0
 8003342:	d0f0      	beq.n	8003326 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	f000 8083 	beq.w	8003458 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a48      	ldr	r2, [pc, #288]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800335c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800336e:	4b44      	ldr	r3, [pc, #272]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	4a43      	ldr	r2, [pc, #268]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003374:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003378:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800337a:	f7fe fce7 	bl	8001d4c <HAL_GetTick>
 800337e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003380:	e008      	b.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003382:	f7fe fce3 	bl	8001d4c <HAL_GetTick>
 8003386:	4602      	mov	r2, r0
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	1ad3      	subs	r3, r2, r3
 800338c:	2b02      	cmp	r3, #2
 800338e:	d901      	bls.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e06c      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003394:	4b3a      	ldr	r3, [pc, #232]	; (8003480 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0f0      	beq.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80033a0:	4b36      	ldr	r3, [pc, #216]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d02f      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d028      	beq.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033be:	4b2f      	ldr	r3, [pc, #188]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033c8:	4b2e      	ldr	r3, [pc, #184]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033ce:	4b2d      	ldr	r3, [pc, #180]	; (8003484 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80033d0:	2200      	movs	r2, #0
 80033d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80033d4:	4a29      	ldr	r2, [pc, #164]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033da:	4b28      	ldr	r3, [pc, #160]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80033dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033de:	f003 0301 	and.w	r3, r3, #1
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d114      	bne.n	8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80033e6:	f7fe fcb1 	bl	8001d4c <HAL_GetTick>
 80033ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033ec:	e00a      	b.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033ee:	f7fe fcad 	bl	8001d4c <HAL_GetTick>
 80033f2:	4602      	mov	r2, r0
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	1ad3      	subs	r3, r2, r3
 80033f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fc:	4293      	cmp	r3, r2
 80033fe:	d901      	bls.n	8003404 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e034      	b.n	800346e <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003404:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003408:	f003 0302 	and.w	r3, r3, #2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0ee      	beq.n	80033ee <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	68db      	ldr	r3, [r3, #12]
 8003414:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003418:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800341c:	d10d      	bne.n	800343a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800341e:	4b17      	ldr	r3, [pc, #92]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800342e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003432:	4912      	ldr	r1, [pc, #72]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003434:	4313      	orrs	r3, r2
 8003436:	608b      	str	r3, [r1, #8]
 8003438:	e005      	b.n	8003446 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800343a:	4b10      	ldr	r3, [pc, #64]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	4a0f      	ldr	r2, [pc, #60]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003440:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003444:	6093      	str	r3, [r2, #8]
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003448:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	68db      	ldr	r3, [r3, #12]
 800344e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003452:	490a      	ldr	r1, [pc, #40]	; (800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003454:	4313      	orrs	r3, r2
 8003456:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0308 	and.w	r3, r3, #8
 8003460:	2b00      	cmp	r3, #0
 8003462:	d003      	beq.n	800346c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	7c1a      	ldrb	r2, [r3, #16]
 8003468:	4b07      	ldr	r3, [pc, #28]	; (8003488 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800346a:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3718      	adds	r7, #24
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	42470068 	.word	0x42470068
 800347c:	40023800 	.word	0x40023800
 8003480:	40007000 	.word	0x40007000
 8003484:	42470e40 	.word	0x42470e40
 8003488:	424711e0 	.word	0x424711e0

0800348c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2b00      	cmp	r3, #0
 8003498:	d101      	bne.n	800349e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e083      	b.n	80035a6 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	7f5b      	ldrb	r3, [r3, #29]
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d105      	bne.n	80034b4 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f7fe fa3a 	bl	8001928 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2202      	movs	r2, #2
 80034b8:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	22ca      	movs	r2, #202	; 0xca
 80034c0:	625a      	str	r2, [r3, #36]	; 0x24
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	2253      	movs	r2, #83	; 0x53
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 fc26 	bl	8003d1c <RTC_EnterInitMode>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d008      	beq.n	80034e8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	22ff      	movs	r2, #255	; 0xff
 80034dc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2204      	movs	r2, #4
 80034e2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80034e4:	2301      	movs	r3, #1
 80034e6:	e05e      	b.n	80035a6 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	6812      	ldr	r2, [r2, #0]
 80034f2:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80034f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80034fa:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6899      	ldr	r1, [r3, #8]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	685a      	ldr	r2, [r3, #4]
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	431a      	orrs	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	695b      	ldr	r3, [r3, #20]
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	430a      	orrs	r2, r1
 8003518:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	68d2      	ldr	r2, [r2, #12]
 8003522:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6919      	ldr	r1, [r3, #16]
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	041a      	lsls	r2, r3, #16
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	430a      	orrs	r2, r1
 8003536:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003546:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10e      	bne.n	8003574 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 fbb8 	bl	8003ccc <HAL_RTC_WaitForSynchro>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d008      	beq.n	8003574 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	22ff      	movs	r2, #255	; 0xff
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2204      	movs	r2, #4
 800356e:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e018      	b.n	80035a6 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003582:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699a      	ldr	r2, [r3, #24]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	430a      	orrs	r2, r1
 8003594:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	22ff      	movs	r2, #255	; 0xff
 800359c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80035a4:	2300      	movs	r3, #0
  }
}
 80035a6:	4618      	mov	r0, r3
 80035a8:	3708      	adds	r7, #8
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bd80      	pop	{r7, pc}

080035ae <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035ae:	b590      	push	{r4, r7, lr}
 80035b0:	b087      	sub	sp, #28
 80035b2:	af00      	add	r7, sp, #0
 80035b4:	60f8      	str	r0, [r7, #12]
 80035b6:	60b9      	str	r1, [r7, #8]
 80035b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	7f1b      	ldrb	r3, [r3, #28]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d101      	bne.n	80035ca <HAL_RTC_SetTime+0x1c>
 80035c6:	2302      	movs	r3, #2
 80035c8:	e0aa      	b.n	8003720 <HAL_RTC_SetTime+0x172>
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	2201      	movs	r2, #1
 80035ce:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2202      	movs	r2, #2
 80035d4:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d126      	bne.n	800362a <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	689b      	ldr	r3, [r3, #8]
 80035e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d102      	bne.n	80035f0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	2200      	movs	r2, #0
 80035ee:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4618      	mov	r0, r3
 80035f6:	f000 fbbd 	bl	8003d74 <RTC_ByteToBcd2>
 80035fa:	4603      	mov	r3, r0
 80035fc:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	785b      	ldrb	r3, [r3, #1]
 8003602:	4618      	mov	r0, r3
 8003604:	f000 fbb6 	bl	8003d74 <RTC_ByteToBcd2>
 8003608:	4603      	mov	r3, r0
 800360a:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800360c:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800360e:	68bb      	ldr	r3, [r7, #8]
 8003610:	789b      	ldrb	r3, [r3, #2]
 8003612:	4618      	mov	r0, r3
 8003614:	f000 fbae 	bl	8003d74 <RTC_ByteToBcd2>
 8003618:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800361a:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	78db      	ldrb	r3, [r3, #3]
 8003622:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003624:	4313      	orrs	r3, r2
 8003626:	617b      	str	r3, [r7, #20]
 8003628:	e018      	b.n	800365c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b00      	cmp	r3, #0
 8003636:	d102      	bne.n	800363e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	2200      	movs	r2, #0
 800363c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	785b      	ldrb	r3, [r3, #1]
 8003648:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800364a:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800364c:	68ba      	ldr	r2, [r7, #8]
 800364e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003650:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8003652:	68bb      	ldr	r3, [r7, #8]
 8003654:	78db      	ldrb	r3, [r3, #3]
 8003656:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003658:	4313      	orrs	r3, r2
 800365a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	22ca      	movs	r2, #202	; 0xca
 8003662:	625a      	str	r2, [r3, #36]	; 0x24
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	2253      	movs	r2, #83	; 0x53
 800366a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fb55 	bl	8003d1c <RTC_EnterInitMode>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00b      	beq.n	8003690 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	22ff      	movs	r2, #255	; 0xff
 800367e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2204      	movs	r2, #4
 8003684:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	e047      	b.n	8003720 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	697b      	ldr	r3, [r7, #20]
 8003696:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800369a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800369e:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	689a      	ldr	r2, [r3, #8]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80036ae:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6899      	ldr	r1, [r3, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	68da      	ldr	r2, [r3, #12]
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	691b      	ldr	r3, [r3, #16]
 80036be:	431a      	orrs	r2, r3
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	430a      	orrs	r2, r1
 80036c6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	68da      	ldr	r2, [r3, #12]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036d6:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0320 	and.w	r3, r3, #32
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d111      	bne.n	800370a <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80036e6:	68f8      	ldr	r0, [r7, #12]
 80036e8:	f000 faf0 	bl	8003ccc <HAL_RTC_WaitForSynchro>
 80036ec:	4603      	mov	r3, r0
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	22ff      	movs	r2, #255	; 0xff
 80036f8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2204      	movs	r2, #4
 80036fe:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e00a      	b.n	8003720 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	22ff      	movs	r2, #255	; 0xff
 8003710:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	2201      	movs	r2, #1
 8003716:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800371e:	2300      	movs	r3, #0
  }
}
 8003720:	4618      	mov	r0, r3
 8003722:	371c      	adds	r7, #28
 8003724:	46bd      	mov	sp, r7
 8003726:	bd90      	pop	{r4, r7, pc}

08003728 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b086      	sub	sp, #24
 800372c:	af00      	add	r7, sp, #0
 800372e:	60f8      	str	r0, [r7, #12]
 8003730:	60b9      	str	r1, [r7, #8]
 8003732:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003734:	2300      	movs	r3, #0
 8003736:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 800375a:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800375e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	0c1b      	lsrs	r3, r3, #16
 8003764:	b2db      	uxtb	r3, r3
 8003766:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800376a:	b2da      	uxtb	r2, r3
 800376c:	68bb      	ldr	r3, [r7, #8]
 800376e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	0a1b      	lsrs	r3, r3, #8
 8003774:	b2db      	uxtb	r3, r3
 8003776:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800377a:	b2da      	uxtb	r2, r3
 800377c:	68bb      	ldr	r3, [r7, #8]
 800377e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	b2db      	uxtb	r3, r3
 8003784:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003788:	b2da      	uxtb	r2, r3
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	0c1b      	lsrs	r3, r3, #16
 8003792:	b2db      	uxtb	r3, r3
 8003794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003798:	b2da      	uxtb	r2, r3
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d11a      	bne.n	80037da <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80037a4:	68bb      	ldr	r3, [r7, #8]
 80037a6:	781b      	ldrb	r3, [r3, #0]
 80037a8:	4618      	mov	r0, r3
 80037aa:	f000 fb01 	bl	8003db0 <RTC_Bcd2ToByte>
 80037ae:	4603      	mov	r3, r0
 80037b0:	461a      	mov	r2, r3
 80037b2:	68bb      	ldr	r3, [r7, #8]
 80037b4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	785b      	ldrb	r3, [r3, #1]
 80037ba:	4618      	mov	r0, r3
 80037bc:	f000 faf8 	bl	8003db0 <RTC_Bcd2ToByte>
 80037c0:	4603      	mov	r3, r0
 80037c2:	461a      	mov	r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	789b      	ldrb	r3, [r3, #2]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 faef 	bl	8003db0 <RTC_Bcd2ToByte>
 80037d2:	4603      	mov	r3, r0
 80037d4:	461a      	mov	r2, r3
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80037da:	2300      	movs	r3, #0
}
 80037dc:	4618      	mov	r0, r3
 80037de:	3718      	adds	r7, #24
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}

080037e4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037e4:	b590      	push	{r4, r7, lr}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	60f8      	str	r0, [r7, #12]
 80037ec:	60b9      	str	r1, [r7, #8]
 80037ee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80037f0:	2300      	movs	r3, #0
 80037f2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	7f1b      	ldrb	r3, [r3, #28]
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_RTC_SetDate+0x1c>
 80037fc:	2302      	movs	r3, #2
 80037fe:	e094      	b.n	800392a <HAL_RTC_SetDate+0x146>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2201      	movs	r2, #1
 8003804:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2202      	movs	r2, #2
 800380a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d10e      	bne.n	8003830 <HAL_RTC_SetDate+0x4c>
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	785b      	ldrb	r3, [r3, #1]
 8003816:	f003 0310 	and.w	r3, r3, #16
 800381a:	2b00      	cmp	r3, #0
 800381c:	d008      	beq.n	8003830 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	785b      	ldrb	r3, [r3, #1]
 8003822:	f023 0310 	bic.w	r3, r3, #16
 8003826:	b2db      	uxtb	r3, r3
 8003828:	330a      	adds	r3, #10
 800382a:	b2da      	uxtb	r2, r3
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d11c      	bne.n	8003870 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	78db      	ldrb	r3, [r3, #3]
 800383a:	4618      	mov	r0, r3
 800383c:	f000 fa9a 	bl	8003d74 <RTC_ByteToBcd2>
 8003840:	4603      	mov	r3, r0
 8003842:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	785b      	ldrb	r3, [r3, #1]
 8003848:	4618      	mov	r0, r3
 800384a:	f000 fa93 	bl	8003d74 <RTC_ByteToBcd2>
 800384e:	4603      	mov	r3, r0
 8003850:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003852:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	789b      	ldrb	r3, [r3, #2]
 8003858:	4618      	mov	r0, r3
 800385a:	f000 fa8b 	bl	8003d74 <RTC_ByteToBcd2>
 800385e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003860:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003864:	68bb      	ldr	r3, [r7, #8]
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800386a:	4313      	orrs	r3, r2
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e00e      	b.n	800388e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	78db      	ldrb	r3, [r3, #3]
 8003874:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	785b      	ldrb	r3, [r3, #1]
 800387a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800387c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800387e:	68ba      	ldr	r2, [r7, #8]
 8003880:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8003882:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	22ca      	movs	r2, #202	; 0xca
 8003894:	625a      	str	r2, [r3, #36]	; 0x24
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2253      	movs	r2, #83	; 0x53
 800389c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800389e:	68f8      	ldr	r0, [r7, #12]
 80038a0:	f000 fa3c 	bl	8003d1c <RTC_EnterInitMode>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00b      	beq.n	80038c2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	22ff      	movs	r2, #255	; 0xff
 80038b0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2204      	movs	r2, #4
 80038b6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	2200      	movs	r2, #0
 80038bc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80038be:	2301      	movs	r3, #1
 80038c0:	e033      	b.n	800392a <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80038cc:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80038d0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68da      	ldr	r2, [r3, #12]
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038e0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0320 	and.w	r3, r3, #32
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d111      	bne.n	8003914 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038f0:	68f8      	ldr	r0, [r7, #12]
 80038f2:	f000 f9eb 	bl	8003ccc <HAL_RTC_WaitForSynchro>
 80038f6:	4603      	mov	r3, r0
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00b      	beq.n	8003914 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	22ff      	movs	r2, #255	; 0xff
 8003902:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2204      	movs	r2, #4
 8003908:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2200      	movs	r2, #0
 800390e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e00a      	b.n	800392a <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	22ff      	movs	r2, #255	; 0xff
 800391a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	2201      	movs	r2, #1
 8003920:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2200      	movs	r2, #0
 8003926:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003928:	2300      	movs	r3, #0
  }
}
 800392a:	4618      	mov	r0, r3
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	bd90      	pop	{r4, r7, pc}

08003932 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b086      	sub	sp, #24
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800393e:	2300      	movs	r3, #0
 8003940:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800394c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003950:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	0c1b      	lsrs	r3, r3, #16
 8003956:	b2da      	uxtb	r2, r3
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	0a1b      	lsrs	r3, r3, #8
 8003960:	b2db      	uxtb	r3, r3
 8003962:	f003 031f 	and.w	r3, r3, #31
 8003966:	b2da      	uxtb	r2, r3
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	b2db      	uxtb	r3, r3
 8003970:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003974:	b2da      	uxtb	r2, r3
 8003976:	68bb      	ldr	r3, [r7, #8]
 8003978:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	0b5b      	lsrs	r3, r3, #13
 800397e:	b2db      	uxtb	r3, r3
 8003980:	f003 0307 	and.w	r3, r3, #7
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d11a      	bne.n	80039c6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	78db      	ldrb	r3, [r3, #3]
 8003994:	4618      	mov	r0, r3
 8003996:	f000 fa0b 	bl	8003db0 <RTC_Bcd2ToByte>
 800399a:	4603      	mov	r3, r0
 800399c:	461a      	mov	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	785b      	ldrb	r3, [r3, #1]
 80039a6:	4618      	mov	r0, r3
 80039a8:	f000 fa02 	bl	8003db0 <RTC_Bcd2ToByte>
 80039ac:	4603      	mov	r3, r0
 80039ae:	461a      	mov	r2, r3
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	789b      	ldrb	r3, [r3, #2]
 80039b8:	4618      	mov	r0, r3
 80039ba:	f000 f9f9 	bl	8003db0 <RTC_Bcd2ToByte>
 80039be:	4603      	mov	r3, r0
 80039c0:	461a      	mov	r2, r3
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	3718      	adds	r7, #24
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80039d0:	b590      	push	{r4, r7, lr}
 80039d2:	b089      	sub	sp, #36	; 0x24
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	60f8      	str	r0, [r7, #12]
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
 80039e0:	2300      	movs	r3, #0
 80039e2:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80039e4:	4b93      	ldr	r3, [pc, #588]	; (8003c34 <HAL_RTC_SetAlarm_IT+0x264>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a93      	ldr	r2, [pc, #588]	; (8003c38 <HAL_RTC_SetAlarm_IT+0x268>)
 80039ea:	fba2 2303 	umull	r2, r3, r2, r3
 80039ee:	0adb      	lsrs	r3, r3, #11
 80039f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80039f4:	fb02 f303 	mul.w	r3, r2, r3
 80039f8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	7f1b      	ldrb	r3, [r3, #28]
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d101      	bne.n	8003a06 <HAL_RTC_SetAlarm_IT+0x36>
 8003a02:	2302      	movs	r3, #2
 8003a04:	e111      	b.n	8003c2a <HAL_RTC_SetAlarm_IT+0x25a>
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d137      	bne.n	8003a88 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d102      	bne.n	8003a2c <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f000 f99f 	bl	8003d74 <RTC_ByteToBcd2>
 8003a36:	4603      	mov	r3, r0
 8003a38:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	785b      	ldrb	r3, [r3, #1]
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 f998 	bl	8003d74 <RTC_ByteToBcd2>
 8003a44:	4603      	mov	r3, r0
 8003a46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003a48:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	789b      	ldrb	r3, [r3, #2]
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 f990 	bl	8003d74 <RTC_ByteToBcd2>
 8003a54:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003a56:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	78db      	ldrb	r3, [r3, #3]
 8003a5e:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003a60:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	f000 f982 	bl	8003d74 <RTC_ByteToBcd2>
 8003a70:	4603      	mov	r3, r0
 8003a72:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003a74:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003a7c:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	e023      	b.n	8003ad0 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d102      	bne.n	8003a9c <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	2200      	movs	r2, #0
 8003a9a:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	781b      	ldrb	r3, [r3, #0]
 8003aa0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	785b      	ldrb	r3, [r3, #1]
 8003aa6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003aa8:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003aaa:	68ba      	ldr	r2, [r7, #8]
 8003aac:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003aae:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	78db      	ldrb	r3, [r3, #3]
 8003ab4:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8003ab6:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003abe:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003ac0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003ac6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8003ac8:	68bb      	ldr	r3, [r7, #8]
 8003aca:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003acc:	4313      	orrs	r3, r2
 8003ace:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	685a      	ldr	r2, [r3, #4]
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	22ca      	movs	r2, #202	; 0xca
 8003ae2:	625a      	str	r2, [r3, #36]	; 0x24
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2253      	movs	r2, #83	; 0x53
 8003aea:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003af4:	d141      	bne.n	8003b7a <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	689a      	ldr	r2, [r3, #8]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003b04:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	b2da      	uxtb	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003b16:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003b18:	697b      	ldr	r3, [r7, #20]
 8003b1a:	1e5a      	subs	r2, r3, #1
 8003b1c:	617a      	str	r2, [r7, #20]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d10b      	bne.n	8003b3a <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	22ff      	movs	r2, #255	; 0xff
 8003b28:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2203      	movs	r2, #3
 8003b2e:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2200      	movs	r2, #0
 8003b34:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e077      	b.n	8003c2a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0301 	and.w	r3, r3, #1
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d0e7      	beq.n	8003b18 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	69fa      	ldr	r2, [r7, #28]
 8003b4e:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	69ba      	ldr	r2, [r7, #24]
 8003b56:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689a      	ldr	r2, [r3, #8]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b66:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003b76:	609a      	str	r2, [r3, #8]
 8003b78:	e040      	b.n	8003bfc <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689a      	ldr	r2, [r3, #8]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b88:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	b2da      	uxtb	r2, r3
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003b9a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	1e5a      	subs	r2, r3, #1
 8003ba0:	617a      	str	r2, [r7, #20]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d10b      	bne.n	8003bbe <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	22ff      	movs	r2, #255	; 0xff
 8003bac:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2203      	movs	r2, #3
 8003bb2:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003bba:	2303      	movs	r3, #3
 8003bbc:	e035      	b.n	8003c2a <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	f003 0302 	and.w	r3, r3, #2
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d0e7      	beq.n	8003b9c <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69fa      	ldr	r2, [r7, #28]
 8003bd2:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69ba      	ldr	r2, [r7, #24]
 8003bda:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	689a      	ldr	r2, [r3, #8]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bea:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	689a      	ldr	r2, [r3, #8]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003bfa:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8003bfc:	4b0f      	ldr	r3, [pc, #60]	; (8003c3c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	4a0e      	ldr	r2, [pc, #56]	; (8003c3c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003c02:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c06:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003c08:	4b0c      	ldr	r3, [pc, #48]	; (8003c3c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003c0a:	689b      	ldr	r3, [r3, #8]
 8003c0c:	4a0b      	ldr	r2, [pc, #44]	; (8003c3c <HAL_RTC_SetAlarm_IT+0x26c>)
 8003c0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c12:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	22ff      	movs	r2, #255	; 0xff
 8003c1a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2201      	movs	r2, #1
 8003c20:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3724      	adds	r7, #36	; 0x24
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd90      	pop	{r4, r7, pc}
 8003c32:	bf00      	nop
 8003c34:	20000028 	.word	0x20000028
 8003c38:	10624dd3 	.word	0x10624dd3
 8003c3c:	40013c00 	.word	0x40013c00

08003c40 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689b      	ldr	r3, [r3, #8]
 8003c4e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d012      	beq.n	8003c7c <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d00b      	beq.n	8003c7c <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fd fa43 	bl	80010f0 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	68db      	ldr	r3, [r3, #12]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003c7a:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d012      	beq.n	8003cb0 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d00b      	beq.n	8003cb0 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f8a7 	bl	8003dec <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	b2da      	uxtb	r2, r3
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003cae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 8003cb0:	4b05      	ldr	r3, [pc, #20]	; (8003cc8 <HAL_RTC_AlarmIRQHandler+0x88>)
 8003cb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003cb6:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	2201      	movs	r2, #1
 8003cbc:	775a      	strb	r2, [r3, #29]
}
 8003cbe:	bf00      	nop
 8003cc0:	3708      	adds	r7, #8
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ce6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003ce8:	f7fe f830 	bl	8001d4c <HAL_GetTick>
 8003cec:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003cee:	e009      	b.n	8003d04 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003cf0:	f7fe f82c 	bl	8001d4c <HAL_GetTick>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003cfe:	d901      	bls.n	8003d04 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8003d00:	2303      	movs	r3, #3
 8003d02:	e007      	b.n	8003d14 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68db      	ldr	r3, [r3, #12]
 8003d0a:	f003 0320 	and.w	r3, r3, #32
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d0ee      	beq.n	8003cf0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8003d12:	2300      	movs	r3, #0
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	3710      	adds	r7, #16
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}

08003d1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b084      	sub	sp, #16
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d24:	2300      	movs	r3, #0
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d119      	bne.n	8003d6a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d3e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003d40:	f7fe f804 	bl	8001d4c <HAL_GetTick>
 8003d44:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d46:	e009      	b.n	8003d5c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003d48:	f7fe f800 	bl	8001d4c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d56:	d901      	bls.n	8003d5c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003d58:	2303      	movs	r3, #3
 8003d5a:	e007      	b.n	8003d6c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d0ee      	beq.n	8003d48 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003d6a:	2300      	movs	r3, #0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	4603      	mov	r3, r0
 8003d7c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8003d82:	e005      	b.n	8003d90 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	3b0a      	subs	r3, #10
 8003d8e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8003d90:	79fb      	ldrb	r3, [r7, #7]
 8003d92:	2b09      	cmp	r3, #9
 8003d94:	d8f6      	bhi.n	8003d84 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	011b      	lsls	r3, r3, #4
 8003d9c:	b2da      	uxtb	r2, r3
 8003d9e:	79fb      	ldrb	r3, [r7, #7]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	b2db      	uxtb	r3, r3
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b085      	sub	sp, #20
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	4603      	mov	r3, r0
 8003db8:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003dbe:	79fb      	ldrb	r3, [r7, #7]
 8003dc0:	091b      	lsrs	r3, r3, #4
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4413      	add	r3, r2
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003dd0:	79fb      	ldrb	r3, [r7, #7]
 8003dd2:	f003 030f 	and.w	r3, r3, #15
 8003dd6:	b2da      	uxtb	r2, r3
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	4413      	add	r3, r2
 8003dde:	b2db      	uxtb	r3, r3
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3714      	adds	r7, #20
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8003dec:	b480      	push	{r7}
 8003dee:	b083      	sub	sp, #12
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003e00:	b580      	push	{r7, lr}
 8003e02:	b082      	sub	sp, #8
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d101      	bne.n	8003e12 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	e041      	b.n	8003e96 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d106      	bne.n	8003e2c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	2200      	movs	r2, #0
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f7fd fdb2 	bl	8001990 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2202      	movs	r2, #2
 8003e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681a      	ldr	r2, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	3304      	adds	r3, #4
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f000 fb24 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2201      	movs	r2, #1
 8003e88:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b082      	sub	sp, #8
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d101      	bne.n	8003eb0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	e041      	b.n	8003f34 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d106      	bne.n	8003eca <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f839 	bl	8003f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2202      	movs	r2, #2
 8003ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681a      	ldr	r2, [r3, #0]
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	3304      	adds	r3, #4
 8003eda:	4619      	mov	r1, r3
 8003edc:	4610      	mov	r0, r2
 8003ede:	f000 fad5 	bl	800448c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	2201      	movs	r2, #1
 8003ee6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2201      	movs	r2, #1
 8003eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	2201      	movs	r2, #1
 8003ef6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	2201      	movs	r2, #1
 8003f16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2201      	movs	r2, #1
 8003f26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f32:	2300      	movs	r3, #0
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	3708      	adds	r7, #8
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f44:	bf00      	nop
 8003f46:	370c      	adds	r7, #12
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b084      	sub	sp, #16
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
 8003f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d109      	bne.n	8003f74 <HAL_TIM_PWM_Start+0x24>
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	bf14      	ite	ne
 8003f6c:	2301      	movne	r3, #1
 8003f6e:	2300      	moveq	r3, #0
 8003f70:	b2db      	uxtb	r3, r3
 8003f72:	e022      	b.n	8003fba <HAL_TIM_PWM_Start+0x6a>
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b04      	cmp	r3, #4
 8003f78:	d109      	bne.n	8003f8e <HAL_TIM_PWM_Start+0x3e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	2b01      	cmp	r3, #1
 8003f84:	bf14      	ite	ne
 8003f86:	2301      	movne	r3, #1
 8003f88:	2300      	moveq	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	e015      	b.n	8003fba <HAL_TIM_PWM_Start+0x6a>
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	2b08      	cmp	r3, #8
 8003f92:	d109      	bne.n	8003fa8 <HAL_TIM_PWM_Start+0x58>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003f9a:	b2db      	uxtb	r3, r3
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	bf14      	ite	ne
 8003fa0:	2301      	movne	r3, #1
 8003fa2:	2300      	moveq	r3, #0
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	e008      	b.n	8003fba <HAL_TIM_PWM_Start+0x6a>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003fae:	b2db      	uxtb	r3, r3
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	bf14      	ite	ne
 8003fb4:	2301      	movne	r3, #1
 8003fb6:	2300      	moveq	r3, #0
 8003fb8:	b2db      	uxtb	r3, r3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d001      	beq.n	8003fc2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	e068      	b.n	8004094 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d104      	bne.n	8003fd2 <HAL_TIM_PWM_Start+0x82>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fd0:	e013      	b.n	8003ffa <HAL_TIM_PWM_Start+0xaa>
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	2b04      	cmp	r3, #4
 8003fd6:	d104      	bne.n	8003fe2 <HAL_TIM_PWM_Start+0x92>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	2202      	movs	r2, #2
 8003fdc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe0:	e00b      	b.n	8003ffa <HAL_TIM_PWM_Start+0xaa>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d104      	bne.n	8003ff2 <HAL_TIM_PWM_Start+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2202      	movs	r2, #2
 8003fec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff0:	e003      	b.n	8003ffa <HAL_TIM_PWM_Start+0xaa>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	2201      	movs	r2, #1
 8004000:	6839      	ldr	r1, [r7, #0]
 8004002:	4618      	mov	r0, r3
 8004004:	f000 fce8 	bl	80049d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a23      	ldr	r2, [pc, #140]	; (800409c <HAL_TIM_PWM_Start+0x14c>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d107      	bne.n	8004022 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004020:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1d      	ldr	r2, [pc, #116]	; (800409c <HAL_TIM_PWM_Start+0x14c>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d018      	beq.n	800405e <HAL_TIM_PWM_Start+0x10e>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d013      	beq.n	800405e <HAL_TIM_PWM_Start+0x10e>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <HAL_TIM_PWM_Start+0x150>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d00e      	beq.n	800405e <HAL_TIM_PWM_Start+0x10e>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a17      	ldr	r2, [pc, #92]	; (80040a4 <HAL_TIM_PWM_Start+0x154>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d009      	beq.n	800405e <HAL_TIM_PWM_Start+0x10e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a16      	ldr	r2, [pc, #88]	; (80040a8 <HAL_TIM_PWM_Start+0x158>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d004      	beq.n	800405e <HAL_TIM_PWM_Start+0x10e>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a14      	ldr	r2, [pc, #80]	; (80040ac <HAL_TIM_PWM_Start+0x15c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d111      	bne.n	8004082 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0307 	and.w	r3, r3, #7
 8004068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b06      	cmp	r3, #6
 800406e:	d010      	beq.n	8004092 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f042 0201 	orr.w	r2, r2, #1
 800407e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004080:	e007      	b.n	8004092 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f042 0201 	orr.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	3710      	adds	r7, #16
 8004098:	46bd      	mov	sp, r7
 800409a:	bd80      	pop	{r7, pc}
 800409c:	40010000 	.word	0x40010000
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00
 80040ac:	40014000 	.word	0x40014000

080040b0 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b082      	sub	sp, #8
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
 80040b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	2200      	movs	r2, #0
 80040c0:	6839      	ldr	r1, [r7, #0]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fc88 	bl	80049d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	4a29      	ldr	r2, [pc, #164]	; (8004174 <HAL_TIM_PWM_Stop+0xc4>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d117      	bne.n	8004102 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	6a1a      	ldr	r2, [r3, #32]
 80040d8:	f241 1311 	movw	r3, #4369	; 0x1111
 80040dc:	4013      	ands	r3, r2
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d10f      	bne.n	8004102 <HAL_TIM_PWM_Stop+0x52>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	6a1a      	ldr	r2, [r3, #32]
 80040e8:	f240 4344 	movw	r3, #1092	; 0x444
 80040ec:	4013      	ands	r3, r2
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d107      	bne.n	8004102 <HAL_TIM_PWM_Stop+0x52>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004100:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	6a1a      	ldr	r2, [r3, #32]
 8004108:	f241 1311 	movw	r3, #4369	; 0x1111
 800410c:	4013      	ands	r3, r2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d10f      	bne.n	8004132 <HAL_TIM_PWM_Stop+0x82>
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	6a1a      	ldr	r2, [r3, #32]
 8004118:	f240 4344 	movw	r3, #1092	; 0x444
 800411c:	4013      	ands	r3, r2
 800411e:	2b00      	cmp	r3, #0
 8004120:	d107      	bne.n	8004132 <HAL_TIM_PWM_Stop+0x82>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 0201 	bic.w	r2, r2, #1
 8004130:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d104      	bne.n	8004142 <HAL_TIM_PWM_Stop+0x92>
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2201      	movs	r2, #1
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004140:	e013      	b.n	800416a <HAL_TIM_PWM_Stop+0xba>
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	2b04      	cmp	r3, #4
 8004146:	d104      	bne.n	8004152 <HAL_TIM_PWM_Stop+0xa2>
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2201      	movs	r2, #1
 800414c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004150:	e00b      	b.n	800416a <HAL_TIM_PWM_Stop+0xba>
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	2b08      	cmp	r3, #8
 8004156:	d104      	bne.n	8004162 <HAL_TIM_PWM_Stop+0xb2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004160:	e003      	b.n	800416a <HAL_TIM_PWM_Stop+0xba>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2201      	movs	r2, #1
 8004166:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
}
 800416c:	4618      	mov	r0, r3
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40010000 	.word	0x40010000

08004178 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b086      	sub	sp, #24
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004184:	2300      	movs	r3, #0
 8004186:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800418e:	2b01      	cmp	r3, #1
 8004190:	d101      	bne.n	8004196 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004192:	2302      	movs	r3, #2
 8004194:	e0ae      	b.n	80042f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2201      	movs	r2, #1
 800419a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2b0c      	cmp	r3, #12
 80041a2:	f200 809f 	bhi.w	80042e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80041a6:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080041e1 	.word	0x080041e1
 80041b0:	080042e5 	.word	0x080042e5
 80041b4:	080042e5 	.word	0x080042e5
 80041b8:	080042e5 	.word	0x080042e5
 80041bc:	08004221 	.word	0x08004221
 80041c0:	080042e5 	.word	0x080042e5
 80041c4:	080042e5 	.word	0x080042e5
 80041c8:	080042e5 	.word	0x080042e5
 80041cc:	08004263 	.word	0x08004263
 80041d0:	080042e5 	.word	0x080042e5
 80041d4:	080042e5 	.word	0x080042e5
 80041d8:	080042e5 	.word	0x080042e5
 80041dc:	080042a3 	.word	0x080042a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f000 f9d0 	bl	800458c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	699a      	ldr	r2, [r3, #24]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f042 0208 	orr.w	r2, r2, #8
 80041fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	699a      	ldr	r2, [r3, #24]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f022 0204 	bic.w	r2, r2, #4
 800420a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6999      	ldr	r1, [r3, #24]
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	691a      	ldr	r2, [r3, #16]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	430a      	orrs	r2, r1
 800421c:	619a      	str	r2, [r3, #24]
      break;
 800421e:	e064      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	68b9      	ldr	r1, [r7, #8]
 8004226:	4618      	mov	r0, r3
 8004228:	f000 fa16 	bl	8004658 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699a      	ldr	r2, [r3, #24]
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800423a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	699a      	ldr	r2, [r3, #24]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800424a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	6999      	ldr	r1, [r3, #24]
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	691b      	ldr	r3, [r3, #16]
 8004256:	021a      	lsls	r2, r3, #8
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	619a      	str	r2, [r3, #24]
      break;
 8004260:	e043      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	68b9      	ldr	r1, [r7, #8]
 8004268:	4618      	mov	r0, r3
 800426a:	f000 fa61 	bl	8004730 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	69da      	ldr	r2, [r3, #28]
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f042 0208 	orr.w	r2, r2, #8
 800427c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	69da      	ldr	r2, [r3, #28]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f022 0204 	bic.w	r2, r2, #4
 800428c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	69d9      	ldr	r1, [r3, #28]
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	691a      	ldr	r2, [r3, #16]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	430a      	orrs	r2, r1
 800429e:	61da      	str	r2, [r3, #28]
      break;
 80042a0:	e023      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68b9      	ldr	r1, [r7, #8]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f000 faab 	bl	8004804 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	69da      	ldr	r2, [r3, #28]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	69da      	ldr	r2, [r3, #28]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	69d9      	ldr	r1, [r3, #28]
 80042d4:	68bb      	ldr	r3, [r7, #8]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	021a      	lsls	r2, r3, #8
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	430a      	orrs	r2, r1
 80042e0:	61da      	str	r2, [r3, #28]
      break;
 80042e2:	e002      	b.n	80042ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	75fb      	strb	r3, [r7, #23]
      break;
 80042e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3718      	adds	r7, #24
 80042f8:	46bd      	mov	sp, r7
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b084      	sub	sp, #16
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004310:	2b01      	cmp	r3, #1
 8004312:	d101      	bne.n	8004318 <HAL_TIM_ConfigClockSource+0x1c>
 8004314:	2302      	movs	r3, #2
 8004316:	e0b4      	b.n	8004482 <HAL_TIM_ConfigClockSource+0x186>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2202      	movs	r2, #2
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	689b      	ldr	r3, [r3, #8]
 800432e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004336:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800433e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004350:	d03e      	beq.n	80043d0 <HAL_TIM_ConfigClockSource+0xd4>
 8004352:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004356:	f200 8087 	bhi.w	8004468 <HAL_TIM_ConfigClockSource+0x16c>
 800435a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800435e:	f000 8086 	beq.w	800446e <HAL_TIM_ConfigClockSource+0x172>
 8004362:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004366:	d87f      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x16c>
 8004368:	2b70      	cmp	r3, #112	; 0x70
 800436a:	d01a      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0xa6>
 800436c:	2b70      	cmp	r3, #112	; 0x70
 800436e:	d87b      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x16c>
 8004370:	2b60      	cmp	r3, #96	; 0x60
 8004372:	d050      	beq.n	8004416 <HAL_TIM_ConfigClockSource+0x11a>
 8004374:	2b60      	cmp	r3, #96	; 0x60
 8004376:	d877      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x16c>
 8004378:	2b50      	cmp	r3, #80	; 0x50
 800437a:	d03c      	beq.n	80043f6 <HAL_TIM_ConfigClockSource+0xfa>
 800437c:	2b50      	cmp	r3, #80	; 0x50
 800437e:	d873      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x16c>
 8004380:	2b40      	cmp	r3, #64	; 0x40
 8004382:	d058      	beq.n	8004436 <HAL_TIM_ConfigClockSource+0x13a>
 8004384:	2b40      	cmp	r3, #64	; 0x40
 8004386:	d86f      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x16c>
 8004388:	2b30      	cmp	r3, #48	; 0x30
 800438a:	d064      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15a>
 800438c:	2b30      	cmp	r3, #48	; 0x30
 800438e:	d86b      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x16c>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d060      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15a>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d867      	bhi.n	8004468 <HAL_TIM_ConfigClockSource+0x16c>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d05c      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15a>
 800439c:	2b10      	cmp	r3, #16
 800439e:	d05a      	beq.n	8004456 <HAL_TIM_ConfigClockSource+0x15a>
 80043a0:	e062      	b.n	8004468 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6899      	ldr	r1, [r3, #8]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	685a      	ldr	r2, [r3, #4]
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	f000 faf1 	bl	8004998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689b      	ldr	r3, [r3, #8]
 80043bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80043be:	68bb      	ldr	r3, [r7, #8]
 80043c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80043c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	68ba      	ldr	r2, [r7, #8]
 80043cc:	609a      	str	r2, [r3, #8]
      break;
 80043ce:	e04f      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6818      	ldr	r0, [r3, #0]
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	6899      	ldr	r1, [r3, #8]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	685a      	ldr	r2, [r3, #4]
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	68db      	ldr	r3, [r3, #12]
 80043e0:	f000 fada 	bl	8004998 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	689a      	ldr	r2, [r3, #8]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043f2:	609a      	str	r2, [r3, #8]
      break;
 80043f4:	e03c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6818      	ldr	r0, [r3, #0]
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	6859      	ldr	r1, [r3, #4]
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	461a      	mov	r2, r3
 8004404:	f000 fa4e 	bl	80048a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	2150      	movs	r1, #80	; 0x50
 800440e:	4618      	mov	r0, r3
 8004410:	f000 faa7 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004414:	e02c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6818      	ldr	r0, [r3, #0]
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	6859      	ldr	r1, [r3, #4]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	68db      	ldr	r3, [r3, #12]
 8004422:	461a      	mov	r2, r3
 8004424:	f000 fa6d 	bl	8004902 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	2160      	movs	r1, #96	; 0x60
 800442e:	4618      	mov	r0, r3
 8004430:	f000 fa97 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004434:	e01c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6818      	ldr	r0, [r3, #0]
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	6859      	ldr	r1, [r3, #4]
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	68db      	ldr	r3, [r3, #12]
 8004442:	461a      	mov	r2, r3
 8004444:	f000 fa2e 	bl	80048a4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2140      	movs	r1, #64	; 0x40
 800444e:	4618      	mov	r0, r3
 8004450:	f000 fa87 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004454:	e00c      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	4619      	mov	r1, r3
 8004460:	4610      	mov	r0, r2
 8004462:	f000 fa7e 	bl	8004962 <TIM_ITRx_SetConfig>
      break;
 8004466:	e003      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	73fb      	strb	r3, [r7, #15]
      break;
 800446c:	e000      	b.n	8004470 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800446e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3710      	adds	r7, #16
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	4a34      	ldr	r2, [pc, #208]	; (8004570 <TIM_Base_SetConfig+0xe4>)
 80044a0:	4293      	cmp	r3, r2
 80044a2:	d00f      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044aa:	d00b      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	4a31      	ldr	r2, [pc, #196]	; (8004574 <TIM_Base_SetConfig+0xe8>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d007      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	4a30      	ldr	r2, [pc, #192]	; (8004578 <TIM_Base_SetConfig+0xec>)
 80044b8:	4293      	cmp	r3, r2
 80044ba:	d003      	beq.n	80044c4 <TIM_Base_SetConfig+0x38>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	4a2f      	ldr	r2, [pc, #188]	; (800457c <TIM_Base_SetConfig+0xf0>)
 80044c0:	4293      	cmp	r3, r2
 80044c2:	d108      	bne.n	80044d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	4a25      	ldr	r2, [pc, #148]	; (8004570 <TIM_Base_SetConfig+0xe4>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d01b      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d017      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a22      	ldr	r2, [pc, #136]	; (8004574 <TIM_Base_SetConfig+0xe8>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d013      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	4a21      	ldr	r2, [pc, #132]	; (8004578 <TIM_Base_SetConfig+0xec>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00f      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	4a20      	ldr	r2, [pc, #128]	; (800457c <TIM_Base_SetConfig+0xf0>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00b      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	4a1f      	ldr	r2, [pc, #124]	; (8004580 <TIM_Base_SetConfig+0xf4>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d007      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	4a1e      	ldr	r2, [pc, #120]	; (8004584 <TIM_Base_SetConfig+0xf8>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d003      	beq.n	8004516 <TIM_Base_SetConfig+0x8a>
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4a1d      	ldr	r2, [pc, #116]	; (8004588 <TIM_Base_SetConfig+0xfc>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d108      	bne.n	8004528 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800451c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	68db      	ldr	r3, [r3, #12]
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	4313      	orrs	r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	695b      	ldr	r3, [r3, #20]
 8004532:	4313      	orrs	r3, r2
 8004534:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	68fa      	ldr	r2, [r7, #12]
 800453a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681a      	ldr	r2, [r3, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	4a08      	ldr	r2, [pc, #32]	; (8004570 <TIM_Base_SetConfig+0xe4>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d103      	bne.n	800455c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	691a      	ldr	r2, [r3, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	615a      	str	r2, [r3, #20]
}
 8004562:	bf00      	nop
 8004564:	3714      	adds	r7, #20
 8004566:	46bd      	mov	sp, r7
 8004568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456c:	4770      	bx	lr
 800456e:	bf00      	nop
 8004570:	40010000 	.word	0x40010000
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	40000c00 	.word	0x40000c00
 8004580:	40014000 	.word	0x40014000
 8004584:	40014400 	.word	0x40014400
 8004588:	40014800 	.word	0x40014800

0800458c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800458c:	b480      	push	{r7}
 800458e:	b087      	sub	sp, #28
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
 8004594:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	f023 0201 	bic.w	r2, r3, #1
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6a1b      	ldr	r3, [r3, #32]
 80045a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	699b      	ldr	r3, [r3, #24]
 80045b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	f023 0303 	bic.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	f023 0302 	bic.w	r3, r3, #2
 80045d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4a1c      	ldr	r2, [pc, #112]	; (8004654 <TIM_OC1_SetConfig+0xc8>)
 80045e4:	4293      	cmp	r3, r2
 80045e6:	d10c      	bne.n	8004602 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0308 	bic.w	r3, r3, #8
 80045ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	68db      	ldr	r3, [r3, #12]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	4313      	orrs	r3, r2
 80045f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	f023 0304 	bic.w	r3, r3, #4
 8004600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	4a13      	ldr	r2, [pc, #76]	; (8004654 <TIM_OC1_SetConfig+0xc8>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d111      	bne.n	800462e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800460a:	693b      	ldr	r3, [r7, #16]
 800460c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004610:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004618:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	695b      	ldr	r3, [r3, #20]
 800461e:	693a      	ldr	r2, [r7, #16]
 8004620:	4313      	orrs	r3, r2
 8004622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	699b      	ldr	r3, [r3, #24]
 8004628:	693a      	ldr	r2, [r7, #16]
 800462a:	4313      	orrs	r3, r2
 800462c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	685a      	ldr	r2, [r3, #4]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	697a      	ldr	r2, [r7, #20]
 8004646:	621a      	str	r2, [r3, #32]
}
 8004648:	bf00      	nop
 800464a:	371c      	adds	r7, #28
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr
 8004654:	40010000 	.word	0x40010000

08004658 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004658:	b480      	push	{r7}
 800465a:	b087      	sub	sp, #28
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
 8004660:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6a1b      	ldr	r3, [r3, #32]
 8004666:	f023 0210 	bic.w	r2, r3, #16
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004686:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	021b      	lsls	r3, r3, #8
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	4313      	orrs	r3, r2
 800469a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f023 0320 	bic.w	r3, r3, #32
 80046a2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	011b      	lsls	r3, r3, #4
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a1e      	ldr	r2, [pc, #120]	; (800472c <TIM_OC2_SetConfig+0xd4>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d10d      	bne.n	80046d4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80046b8:	697b      	ldr	r3, [r7, #20]
 80046ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	68db      	ldr	r3, [r3, #12]
 80046c4:	011b      	lsls	r3, r3, #4
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046d2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	4a15      	ldr	r2, [pc, #84]	; (800472c <TIM_OC2_SetConfig+0xd4>)
 80046d8:	4293      	cmp	r3, r2
 80046da:	d113      	bne.n	8004704 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046dc:	693b      	ldr	r3, [r7, #16]
 80046de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046f8:	683b      	ldr	r3, [r7, #0]
 80046fa:	699b      	ldr	r3, [r3, #24]
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	685a      	ldr	r2, [r3, #4]
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	697a      	ldr	r2, [r7, #20]
 800471c:	621a      	str	r2, [r3, #32]
}
 800471e:	bf00      	nop
 8004720:	371c      	adds	r7, #28
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000

08004730 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004730:	b480      	push	{r7}
 8004732:	b087      	sub	sp, #28
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
 8004738:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6a1b      	ldr	r3, [r3, #32]
 800473e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a1b      	ldr	r3, [r3, #32]
 800474a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	685b      	ldr	r3, [r3, #4]
 8004750:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800475e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f023 0303 	bic.w	r3, r3, #3
 8004766:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004768:	683b      	ldr	r3, [r7, #0]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	4313      	orrs	r3, r2
 8004770:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004778:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	021b      	lsls	r3, r3, #8
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a1d      	ldr	r2, [pc, #116]	; (8004800 <TIM_OC3_SetConfig+0xd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d10d      	bne.n	80047aa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004794:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	68db      	ldr	r3, [r3, #12]
 800479a:	021b      	lsls	r3, r3, #8
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	4313      	orrs	r3, r2
 80047a0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80047a8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a14      	ldr	r2, [pc, #80]	; (8004800 <TIM_OC3_SetConfig+0xd0>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d113      	bne.n	80047da <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80047b2:	693b      	ldr	r3, [r7, #16]
 80047b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80047ba:	693b      	ldr	r3, [r7, #16]
 80047bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	011b      	lsls	r3, r3, #4
 80047c8:	693a      	ldr	r2, [r7, #16]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	699b      	ldr	r3, [r3, #24]
 80047d2:	011b      	lsls	r3, r3, #4
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047e6:	683b      	ldr	r3, [r7, #0]
 80047e8:	685a      	ldr	r2, [r3, #4]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	621a      	str	r2, [r3, #32]
}
 80047f4:	bf00      	nop
 80047f6:	371c      	adds	r7, #28
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	40010000 	.word	0x40010000

08004804 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004804:	b480      	push	{r7}
 8004806:	b087      	sub	sp, #28
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	69db      	ldr	r3, [r3, #28]
 800482a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004832:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800483a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	021b      	lsls	r3, r3, #8
 8004842:	68fa      	ldr	r2, [r7, #12]
 8004844:	4313      	orrs	r3, r2
 8004846:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800484e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	031b      	lsls	r3, r3, #12
 8004856:	693a      	ldr	r2, [r7, #16]
 8004858:	4313      	orrs	r3, r2
 800485a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	4a10      	ldr	r2, [pc, #64]	; (80048a0 <TIM_OC4_SetConfig+0x9c>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d109      	bne.n	8004878 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800486a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	019b      	lsls	r3, r3, #6
 8004872:	697a      	ldr	r2, [r7, #20]
 8004874:	4313      	orrs	r3, r2
 8004876:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	697a      	ldr	r2, [r7, #20]
 800487c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004884:	683b      	ldr	r3, [r7, #0]
 8004886:	685a      	ldr	r2, [r3, #4]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	693a      	ldr	r2, [r7, #16]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	40010000 	.word	0x40010000

080048a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	60f8      	str	r0, [r7, #12]
 80048ac:	60b9      	str	r1, [r7, #8]
 80048ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6a1b      	ldr	r3, [r3, #32]
 80048ba:	f023 0201 	bic.w	r2, r3, #1
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	699b      	ldr	r3, [r3, #24]
 80048c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	011b      	lsls	r3, r3, #4
 80048d4:	693a      	ldr	r2, [r7, #16]
 80048d6:	4313      	orrs	r3, r2
 80048d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048da:	697b      	ldr	r3, [r7, #20]
 80048dc:	f023 030a 	bic.w	r3, r3, #10
 80048e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048e2:	697a      	ldr	r2, [r7, #20]
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	697a      	ldr	r2, [r7, #20]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004902:	b480      	push	{r7}
 8004904:	b087      	sub	sp, #28
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	6a1b      	ldr	r3, [r3, #32]
 8004912:	f023 0210 	bic.w	r2, r3, #16
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	699b      	ldr	r3, [r3, #24]
 800491e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	6a1b      	ldr	r3, [r3, #32]
 8004924:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004926:	697b      	ldr	r3, [r7, #20]
 8004928:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800492c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	031b      	lsls	r3, r3, #12
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800493e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	011b      	lsls	r3, r3, #4
 8004944:	693a      	ldr	r2, [r7, #16]
 8004946:	4313      	orrs	r3, r2
 8004948:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	697a      	ldr	r2, [r7, #20]
 800494e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	693a      	ldr	r2, [r7, #16]
 8004954:	621a      	str	r2, [r3, #32]
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr

08004962 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004962:	b480      	push	{r7}
 8004964:	b085      	sub	sp, #20
 8004966:	af00      	add	r7, sp, #0
 8004968:	6078      	str	r0, [r7, #4]
 800496a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
 8004970:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004978:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800497a:	683a      	ldr	r2, [r7, #0]
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4313      	orrs	r3, r2
 8004980:	f043 0307 	orr.w	r3, r3, #7
 8004984:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	609a      	str	r2, [r3, #8]
}
 800498c:	bf00      	nop
 800498e:	3714      	adds	r7, #20
 8004990:	46bd      	mov	sp, r7
 8004992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004996:	4770      	bx	lr

08004998 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004998:	b480      	push	{r7}
 800499a:	b087      	sub	sp, #28
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	607a      	str	r2, [r7, #4]
 80049a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80049b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	021a      	lsls	r2, r3, #8
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	431a      	orrs	r2, r3
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	4313      	orrs	r3, r2
 80049c0:	697a      	ldr	r2, [r7, #20]
 80049c2:	4313      	orrs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	697a      	ldr	r2, [r7, #20]
 80049ca:	609a      	str	r2, [r3, #8]
}
 80049cc:	bf00      	nop
 80049ce:	371c      	adds	r7, #28
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr

080049d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049d8:	b480      	push	{r7}
 80049da:	b087      	sub	sp, #28
 80049dc:	af00      	add	r7, sp, #0
 80049de:	60f8      	str	r0, [r7, #12]
 80049e0:	60b9      	str	r1, [r7, #8]
 80049e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2201      	movs	r2, #1
 80049ec:	fa02 f303 	lsl.w	r3, r2, r3
 80049f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6a1a      	ldr	r2, [r3, #32]
 80049f6:	697b      	ldr	r3, [r7, #20]
 80049f8:	43db      	mvns	r3, r3
 80049fa:	401a      	ands	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	6a1a      	ldr	r2, [r3, #32]
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	f003 031f 	and.w	r3, r3, #31
 8004a0a:	6879      	ldr	r1, [r7, #4]
 8004a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a10:	431a      	orrs	r2, r3
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	621a      	str	r2, [r3, #32]
}
 8004a16:	bf00      	nop
 8004a18:	371c      	adds	r7, #28
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004a24:	b480      	push	{r7}
 8004a26:	b085      	sub	sp, #20
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
 8004a2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d101      	bne.n	8004a3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a38:	2302      	movs	r3, #2
 8004a3a:	e050      	b.n	8004ade <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2201      	movs	r2, #1
 8004a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	685b      	ldr	r3, [r3, #4]
 8004a52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a64:	683b      	ldr	r3, [r7, #0]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a1c      	ldr	r2, [pc, #112]	; (8004aec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d018      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a88:	d013      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a18      	ldr	r2, [pc, #96]	; (8004af0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d00e      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	4a16      	ldr	r2, [pc, #88]	; (8004af4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a9a:	4293      	cmp	r3, r2
 8004a9c:	d009      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	4a15      	ldr	r2, [pc, #84]	; (8004af8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004aa4:	4293      	cmp	r3, r2
 8004aa6:	d004      	beq.n	8004ab2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d10c      	bne.n	8004acc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ab8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2201      	movs	r2, #1
 8004ad0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004adc:	2300      	movs	r3, #0
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3714      	adds	r7, #20
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae8:	4770      	bx	lr
 8004aea:	bf00      	nop
 8004aec:	40010000 	.word	0x40010000
 8004af0:	40000400 	.word	0x40000400
 8004af4:	40000800 	.word	0x40000800
 8004af8:	40000c00 	.word	0x40000c00
 8004afc:	40014000 	.word	0x40014000

08004b00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d101      	bne.n	8004b12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e03f      	b.n	8004b92 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b18:	b2db      	uxtb	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d106      	bne.n	8004b2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f7fc ffa4 	bl	8001a74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2224      	movs	r2, #36	; 0x24
 8004b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	68da      	ldr	r2, [r3, #12]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b44:	6878      	ldr	r0, [r7, #4]
 8004b46:	f000 fddb 	bl	8005700 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695a      	ldr	r2, [r3, #20]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2220      	movs	r2, #32
 8004b84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2220      	movs	r2, #32
 8004b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b08a      	sub	sp, #40	; 0x28
 8004b9e:	af02      	add	r7, sp, #8
 8004ba0:	60f8      	str	r0, [r7, #12]
 8004ba2:	60b9      	str	r1, [r7, #8]
 8004ba4:	603b      	str	r3, [r7, #0]
 8004ba6:	4613      	mov	r3, r2
 8004ba8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004baa:	2300      	movs	r3, #0
 8004bac:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d17c      	bne.n	8004cb4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d002      	beq.n	8004bc6 <HAL_UART_Transmit+0x2c>
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d101      	bne.n	8004bca <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e075      	b.n	8004cb6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d101      	bne.n	8004bd8 <HAL_UART_Transmit+0x3e>
 8004bd4:	2302      	movs	r3, #2
 8004bd6:	e06e      	b.n	8004cb6 <HAL_UART_Transmit+0x11c>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	2200      	movs	r2, #0
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2221      	movs	r2, #33	; 0x21
 8004bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004bee:	f7fd f8ad 	bl	8001d4c <HAL_GetTick>
 8004bf2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	88fa      	ldrh	r2, [r7, #6]
 8004bf8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	88fa      	ldrh	r2, [r7, #6]
 8004bfe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c08:	d108      	bne.n	8004c1c <HAL_UART_Transmit+0x82>
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	691b      	ldr	r3, [r3, #16]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d104      	bne.n	8004c1c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004c12:	2300      	movs	r3, #0
 8004c14:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	61bb      	str	r3, [r7, #24]
 8004c1a:	e003      	b.n	8004c24 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004c20:	2300      	movs	r3, #0
 8004c22:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004c2c:	e02a      	b.n	8004c84 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	9300      	str	r3, [sp, #0]
 8004c32:	697b      	ldr	r3, [r7, #20]
 8004c34:	2200      	movs	r2, #0
 8004c36:	2180      	movs	r1, #128	; 0x80
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 fb1f 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d001      	beq.n	8004c48 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e036      	b.n	8004cb6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004c48:	69fb      	ldr	r3, [r7, #28]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10b      	bne.n	8004c66 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004c4e:	69bb      	ldr	r3, [r7, #24]
 8004c50:	881b      	ldrh	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004c5c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	3302      	adds	r3, #2
 8004c62:	61bb      	str	r3, [r7, #24]
 8004c64:	e007      	b.n	8004c76 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	781a      	ldrb	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	3301      	adds	r3, #1
 8004c74:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	3b01      	subs	r3, #1
 8004c7e:	b29a      	uxth	r2, r3
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004c88:	b29b      	uxth	r3, r3
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1cf      	bne.n	8004c2e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c8e:	683b      	ldr	r3, [r7, #0]
 8004c90:	9300      	str	r3, [sp, #0]
 8004c92:	697b      	ldr	r3, [r7, #20]
 8004c94:	2200      	movs	r2, #0
 8004c96:	2140      	movs	r1, #64	; 0x40
 8004c98:	68f8      	ldr	r0, [r7, #12]
 8004c9a:	f000 faef 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 8004c9e:	4603      	mov	r3, r0
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d001      	beq.n	8004ca8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004ca4:	2303      	movs	r3, #3
 8004ca6:	e006      	b.n	8004cb6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	e000      	b.n	8004cb6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004cb4:	2302      	movs	r3, #2
  }
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3720      	adds	r7, #32
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	60f8      	str	r0, [r7, #12]
 8004cc6:	60b9      	str	r1, [r7, #8]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004cd2:	b2db      	uxtb	r3, r3
 8004cd4:	2b20      	cmp	r3, #32
 8004cd6:	d11d      	bne.n	8004d14 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d002      	beq.n	8004ce4 <HAL_UART_Receive_IT+0x26>
 8004cde:	88fb      	ldrh	r3, [r7, #6]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e016      	b.n	8004d16 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cee:	2b01      	cmp	r3, #1
 8004cf0:	d101      	bne.n	8004cf6 <HAL_UART_Receive_IT+0x38>
 8004cf2:	2302      	movs	r3, #2
 8004cf4:	e00f      	b.n	8004d16 <HAL_UART_Receive_IT+0x58>
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004d04:	88fb      	ldrh	r3, [r7, #6]
 8004d06:	461a      	mov	r2, r3
 8004d08:	68b9      	ldr	r1, [r7, #8]
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f000 fb24 	bl	8005358 <UART_Start_Receive_IT>
 8004d10:	4603      	mov	r3, r0
 8004d12:	e000      	b.n	8004d16 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004d14:	2302      	movs	r3, #2
  }
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3710      	adds	r7, #16
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b0ba      	sub	sp, #232	; 0xe8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	68db      	ldr	r3, [r3, #12]
 8004d38:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	695b      	ldr	r3, [r3, #20]
 8004d42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004d46:	2300      	movs	r3, #0
 8004d48:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004d52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d56:	f003 030f 	and.w	r3, r3, #15
 8004d5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004d5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10f      	bne.n	8004d86 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d009      	beq.n	8004d86 <HAL_UART_IRQHandler+0x66>
 8004d72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d76:	f003 0320 	and.w	r3, r3, #32
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f000 fc03 	bl	800558a <UART_Receive_IT>
      return;
 8004d84:	e256      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d86:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 80de 	beq.w	8004f4c <HAL_UART_IRQHandler+0x22c>
 8004d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d94:	f003 0301 	and.w	r3, r3, #1
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d106      	bne.n	8004daa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004da0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	f000 80d1 	beq.w	8004f4c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d00b      	beq.n	8004dce <HAL_UART_IRQHandler+0xae>
 8004db6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0201 	orr.w	r2, r3, #1
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd2:	f003 0304 	and.w	r3, r3, #4
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d00b      	beq.n	8004df2 <HAL_UART_IRQHandler+0xd2>
 8004dda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d005      	beq.n	8004df2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dea:	f043 0202 	orr.w	r2, r3, #2
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004df2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df6:	f003 0302 	and.w	r3, r3, #2
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00b      	beq.n	8004e16 <HAL_UART_IRQHandler+0xf6>
 8004dfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e02:	f003 0301 	and.w	r3, r3, #1
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d005      	beq.n	8004e16 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0e:	f043 0204 	orr.w	r2, r3, #4
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004e16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e1a:	f003 0308 	and.w	r3, r3, #8
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d011      	beq.n	8004e46 <HAL_UART_IRQHandler+0x126>
 8004e22:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e26:	f003 0320 	and.w	r3, r3, #32
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d105      	bne.n	8004e3a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004e2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e3e:	f043 0208 	orr.w	r2, r3, #8
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 81ed 	beq.w	800522a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004e50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e54:	f003 0320 	and.w	r3, r3, #32
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_UART_IRQHandler+0x14e>
 8004e5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e60:	f003 0320 	and.w	r3, r3, #32
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d002      	beq.n	8004e6e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 fb8e 	bl	800558a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e78:	2b40      	cmp	r3, #64	; 0x40
 8004e7a:	bf0c      	ite	eq
 8004e7c:	2301      	moveq	r3, #1
 8004e7e:	2300      	movne	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 0308 	and.w	r3, r3, #8
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d103      	bne.n	8004e9a <HAL_UART_IRQHandler+0x17a>
 8004e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d04f      	beq.n	8004f3a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 fa96 	bl	80053cc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	695b      	ldr	r3, [r3, #20]
 8004ea6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eaa:	2b40      	cmp	r3, #64	; 0x40
 8004eac:	d141      	bne.n	8004f32 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004ebc:	e853 3f00 	ldrex	r3, [r3]
 8004ec0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004ec4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004ec8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ecc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	3314      	adds	r3, #20
 8004ed6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004eda:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ede:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004ee6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004eea:	e841 2300 	strex	r3, r2, [r1]
 8004eee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004ef2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d1d9      	bne.n	8004eae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d013      	beq.n	8004f2a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f06:	4a7d      	ldr	r2, [pc, #500]	; (80050fc <HAL_UART_IRQHandler+0x3dc>)
 8004f08:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f7fd f8a9 	bl	8002066 <HAL_DMA_Abort_IT>
 8004f14:	4603      	mov	r3, r0
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d016      	beq.n	8004f48 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004f24:	4610      	mov	r0, r2
 8004f26:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f28:	e00e      	b.n	8004f48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f000 f990 	bl	8005250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f30:	e00a      	b.n	8004f48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f98c 	bl	8005250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f38:	e006      	b.n	8004f48 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f3a:	6878      	ldr	r0, [r7, #4]
 8004f3c:	f000 f988 	bl	8005250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2200      	movs	r2, #0
 8004f44:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004f46:	e170      	b.n	800522a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	bf00      	nop
    return;
 8004f4a:	e16e      	b.n	800522a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	f040 814a 	bne.w	80051ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004f56:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f5a:	f003 0310 	and.w	r3, r3, #16
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8143 	beq.w	80051ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f68:	f003 0310 	and.w	r3, r3, #16
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	f000 813c 	beq.w	80051ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004f72:	2300      	movs	r3, #0
 8004f74:	60bb      	str	r3, [r7, #8]
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	60bb      	str	r3, [r7, #8]
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	695b      	ldr	r3, [r3, #20]
 8004f8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f92:	2b40      	cmp	r3, #64	; 0x40
 8004f94:	f040 80b4 	bne.w	8005100 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004fa4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	f000 8140 	beq.w	800522e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004fb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fb6:	429a      	cmp	r2, r3
 8004fb8:	f080 8139 	bcs.w	800522e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004fc2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fce:	f000 8088 	beq.w	80050e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	330c      	adds	r3, #12
 8004fd8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fdc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004fe8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004fec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	330c      	adds	r3, #12
 8004ffa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ffe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005006:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800500a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005016:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1d9      	bne.n	8004fd2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3314      	adds	r3, #20
 8005024:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800502e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3314      	adds	r3, #20
 800503e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8005042:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8005046:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005048:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800504a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800504e:	e841 2300 	strex	r3, r2, [r1]
 8005052:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005054:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005056:	2b00      	cmp	r3, #0
 8005058:	d1e1      	bne.n	800501e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	3314      	adds	r3, #20
 8005060:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800506a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800506c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005070:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	3314      	adds	r3, #20
 800507a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800507e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005080:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005084:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800508c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e3      	bne.n	800505a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2220      	movs	r2, #32
 8005096:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	330c      	adds	r3, #12
 80050a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80050b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050b2:	f023 0310 	bic.w	r3, r3, #16
 80050b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	330c      	adds	r3, #12
 80050c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80050c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80050c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80050ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80050cc:	e841 2300 	strex	r3, r2, [r1]
 80050d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80050d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d1e3      	bne.n	80050a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050dc:	4618      	mov	r0, r3
 80050de:	f7fc ff52 	bl	8001f86 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80050ea:	b29b      	uxth	r3, r3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	b29b      	uxth	r3, r3
 80050f0:	4619      	mov	r1, r3
 80050f2:	6878      	ldr	r0, [r7, #4]
 80050f4:	f000 f8b6 	bl	8005264 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050f8:	e099      	b.n	800522e <HAL_UART_IRQHandler+0x50e>
 80050fa:	bf00      	nop
 80050fc:	08005493 	.word	0x08005493
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005108:	b29b      	uxth	r3, r3
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005114:	b29b      	uxth	r3, r3
 8005116:	2b00      	cmp	r3, #0
 8005118:	f000 808b 	beq.w	8005232 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800511c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 8086 	beq.w	8005232 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	330c      	adds	r3, #12
 800512c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005130:	e853 3f00 	ldrex	r3, [r3]
 8005134:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800513c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800514a:	647a      	str	r2, [r7, #68]	; 0x44
 800514c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005150:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e3      	bne.n	8005126 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3314      	adds	r3, #20
 8005164:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	623b      	str	r3, [r7, #32]
   return(result);
 800516e:	6a3b      	ldr	r3, [r7, #32]
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	3314      	adds	r3, #20
 800517e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005182:	633a      	str	r2, [r7, #48]	; 0x30
 8005184:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005186:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005188:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800518a:	e841 2300 	strex	r3, r2, [r1]
 800518e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005192:	2b00      	cmp	r3, #0
 8005194:	d1e3      	bne.n	800515e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2220      	movs	r2, #32
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	330c      	adds	r3, #12
 80051aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	e853 3f00 	ldrex	r3, [r3]
 80051b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	f023 0310 	bic.w	r3, r3, #16
 80051ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	330c      	adds	r3, #12
 80051c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80051c8:	61fa      	str	r2, [r7, #28]
 80051ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051cc:	69b9      	ldr	r1, [r7, #24]
 80051ce:	69fa      	ldr	r2, [r7, #28]
 80051d0:	e841 2300 	strex	r3, r2, [r1]
 80051d4:	617b      	str	r3, [r7, #20]
   return(result);
 80051d6:	697b      	ldr	r3, [r7, #20]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d1e3      	bne.n	80051a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80051dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80051e0:	4619      	mov	r1, r3
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f000 f83e 	bl	8005264 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80051e8:	e023      	b.n	8005232 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80051ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d009      	beq.n	800520a <HAL_UART_IRQHandler+0x4ea>
 80051f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80051fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f959 	bl	80054ba <UART_Transmit_IT>
    return;
 8005208:	e014      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800520a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800520e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005212:	2b00      	cmp	r3, #0
 8005214:	d00e      	beq.n	8005234 <HAL_UART_IRQHandler+0x514>
 8005216:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f999 	bl	800555a <UART_EndTransmit_IT>
    return;
 8005228:	e004      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
    return;
 800522a:	bf00      	nop
 800522c:	e002      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
      return;
 800522e:	bf00      	nop
 8005230:	e000      	b.n	8005234 <HAL_UART_IRQHandler+0x514>
      return;
 8005232:	bf00      	nop
  }
}
 8005234:	37e8      	adds	r7, #232	; 0xe8
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop

0800523c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800523c:	b480      	push	{r7}
 800523e:	b083      	sub	sp, #12
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005244:	bf00      	nop
 8005246:	370c      	adds	r7, #12
 8005248:	46bd      	mov	sp, r7
 800524a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800524e:	4770      	bx	lr

08005250 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b083      	sub	sp, #12
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005258:	bf00      	nop
 800525a:	370c      	adds	r7, #12
 800525c:	46bd      	mov	sp, r7
 800525e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005262:	4770      	bx	lr

08005264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
 800526c:	460b      	mov	r3, r1
 800526e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005270:	bf00      	nop
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b090      	sub	sp, #64	; 0x40
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528c:	e050      	b.n	8005330 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d04c      	beq.n	8005330 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <UART_WaitOnFlagUntilTimeout+0x30>
 800529c:	f7fc fd56 	bl	8001d4c <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d241      	bcs.n	8005330 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	330c      	adds	r3, #12
 80052b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052b6:	e853 3f00 	ldrex	r3, [r3]
 80052ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052be:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80052c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80052cc:	637a      	str	r2, [r7, #52]	; 0x34
 80052ce:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80052d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052d4:	e841 2300 	strex	r3, r2, [r1]
 80052d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80052da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d1e5      	bne.n	80052ac <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	3314      	adds	r3, #20
 80052e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	e853 3f00 	ldrex	r3, [r3]
 80052ee:	613b      	str	r3, [r7, #16]
   return(result);
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	f023 0301 	bic.w	r3, r3, #1
 80052f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3314      	adds	r3, #20
 80052fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005300:	623a      	str	r2, [r7, #32]
 8005302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005304:	69f9      	ldr	r1, [r7, #28]
 8005306:	6a3a      	ldr	r2, [r7, #32]
 8005308:	e841 2300 	strex	r3, r2, [r1]
 800530c:	61bb      	str	r3, [r7, #24]
   return(result);
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1e5      	bne.n	80052e0 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	2220      	movs	r2, #32
 8005318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	2220      	movs	r2, #32
 8005320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2200      	movs	r2, #0
 8005328:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800532c:	2303      	movs	r3, #3
 800532e:	e00f      	b.n	8005350 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	68bb      	ldr	r3, [r7, #8]
 8005338:	4013      	ands	r3, r2
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	429a      	cmp	r2, r3
 800533e:	bf0c      	ite	eq
 8005340:	2301      	moveq	r3, #1
 8005342:	2300      	movne	r3, #0
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	79fb      	ldrb	r3, [r7, #7]
 800534a:	429a      	cmp	r2, r3
 800534c:	d09f      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800534e:	2300      	movs	r3, #0
}
 8005350:	4618      	mov	r0, r3
 8005352:	3740      	adds	r7, #64	; 0x40
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005358:	b480      	push	{r7}
 800535a:	b085      	sub	sp, #20
 800535c:	af00      	add	r7, sp, #0
 800535e:	60f8      	str	r0, [r7, #12]
 8005360:	60b9      	str	r1, [r7, #8]
 8005362:	4613      	mov	r3, r2
 8005364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	68ba      	ldr	r2, [r7, #8]
 800536a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	88fa      	ldrh	r2, [r7, #6]
 8005370:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	88fa      	ldrh	r2, [r7, #6]
 8005376:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	2200      	movs	r2, #0
 800537c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2222      	movs	r2, #34	; 0x22
 8005382:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	2200      	movs	r2, #0
 800538a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68da      	ldr	r2, [r3, #12]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800539c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	695a      	ldr	r2, [r3, #20]
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f042 0201 	orr.w	r2, r2, #1
 80053ac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	68da      	ldr	r2, [r3, #12]
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f042 0220 	orr.w	r2, r2, #32
 80053bc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80053be:	2300      	movs	r3, #0
}
 80053c0:	4618      	mov	r0, r3
 80053c2:	3714      	adds	r7, #20
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b095      	sub	sp, #84	; 0x54
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	330c      	adds	r3, #12
 80053da:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053de:	e853 3f00 	ldrex	r3, [r3]
 80053e2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80053ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	330c      	adds	r3, #12
 80053f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053f4:	643a      	str	r2, [r7, #64]	; 0x40
 80053f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053f8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053fa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053fc:	e841 2300 	strex	r3, r2, [r1]
 8005400:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005404:	2b00      	cmp	r3, #0
 8005406:	d1e5      	bne.n	80053d4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	3314      	adds	r3, #20
 800540e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005410:	6a3b      	ldr	r3, [r7, #32]
 8005412:	e853 3f00 	ldrex	r3, [r3]
 8005416:	61fb      	str	r3, [r7, #28]
   return(result);
 8005418:	69fb      	ldr	r3, [r7, #28]
 800541a:	f023 0301 	bic.w	r3, r3, #1
 800541e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	3314      	adds	r3, #20
 8005426:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005428:	62fa      	str	r2, [r7, #44]	; 0x2c
 800542a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800542c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800542e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005430:	e841 2300 	strex	r3, r2, [r1]
 8005434:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1e5      	bne.n	8005408 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	2b01      	cmp	r3, #1
 8005442:	d119      	bne.n	8005478 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	330c      	adds	r3, #12
 800544a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	e853 3f00 	ldrex	r3, [r3]
 8005452:	60bb      	str	r3, [r7, #8]
   return(result);
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	f023 0310 	bic.w	r3, r3, #16
 800545a:	647b      	str	r3, [r7, #68]	; 0x44
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	330c      	adds	r3, #12
 8005462:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005464:	61ba      	str	r2, [r7, #24]
 8005466:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005468:	6979      	ldr	r1, [r7, #20]
 800546a:	69ba      	ldr	r2, [r7, #24]
 800546c:	e841 2300 	strex	r3, r2, [r1]
 8005470:	613b      	str	r3, [r7, #16]
   return(result);
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	2b00      	cmp	r3, #0
 8005476:	d1e5      	bne.n	8005444 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2220      	movs	r2, #32
 800547c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005486:	bf00      	nop
 8005488:	3754      	adds	r7, #84	; 0x54
 800548a:	46bd      	mov	sp, r7
 800548c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005490:	4770      	bx	lr

08005492 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b084      	sub	sp, #16
 8005496:	af00      	add	r7, sp, #0
 8005498:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800549e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	2200      	movs	r2, #0
 80054aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054ac:	68f8      	ldr	r0, [r7, #12]
 80054ae:	f7ff fecf 	bl	8005250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054b2:	bf00      	nop
 80054b4:	3710      	adds	r7, #16
 80054b6:	46bd      	mov	sp, r7
 80054b8:	bd80      	pop	{r7, pc}

080054ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b085      	sub	sp, #20
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054c8:	b2db      	uxtb	r3, r3
 80054ca:	2b21      	cmp	r3, #33	; 0x21
 80054cc:	d13e      	bne.n	800554c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d6:	d114      	bne.n	8005502 <UART_Transmit_IT+0x48>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	691b      	ldr	r3, [r3, #16]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d110      	bne.n	8005502 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6a1b      	ldr	r3, [r3, #32]
 80054e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	881b      	ldrh	r3, [r3, #0]
 80054ea:	461a      	mov	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80054f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	6a1b      	ldr	r3, [r3, #32]
 80054fa:	1c9a      	adds	r2, r3, #2
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	621a      	str	r2, [r3, #32]
 8005500:	e008      	b.n	8005514 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	6a1b      	ldr	r3, [r3, #32]
 8005506:	1c59      	adds	r1, r3, #1
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	6211      	str	r1, [r2, #32]
 800550c:	781a      	ldrb	r2, [r3, #0]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005518:	b29b      	uxth	r3, r3
 800551a:	3b01      	subs	r3, #1
 800551c:	b29b      	uxth	r3, r3
 800551e:	687a      	ldr	r2, [r7, #4]
 8005520:	4619      	mov	r1, r3
 8005522:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005524:	2b00      	cmp	r3, #0
 8005526:	d10f      	bne.n	8005548 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	68da      	ldr	r2, [r3, #12]
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005536:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	68da      	ldr	r2, [r3, #12]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005546:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005548:	2300      	movs	r3, #0
 800554a:	e000      	b.n	800554e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800554c:	2302      	movs	r3, #2
  }
}
 800554e:	4618      	mov	r0, r3
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr

0800555a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800555a:	b580      	push	{r7, lr}
 800555c:	b082      	sub	sp, #8
 800555e:	af00      	add	r7, sp, #0
 8005560:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	68da      	ldr	r2, [r3, #12]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005570:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2220      	movs	r2, #32
 8005576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800557a:	6878      	ldr	r0, [r7, #4]
 800557c:	f7ff fe5e 	bl	800523c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005580:	2300      	movs	r3, #0
}
 8005582:	4618      	mov	r0, r3
 8005584:	3708      	adds	r7, #8
 8005586:	46bd      	mov	sp, r7
 8005588:	bd80      	pop	{r7, pc}

0800558a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800558a:	b580      	push	{r7, lr}
 800558c:	b08c      	sub	sp, #48	; 0x30
 800558e:	af00      	add	r7, sp, #0
 8005590:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b22      	cmp	r3, #34	; 0x22
 800559c:	f040 80ab 	bne.w	80056f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a8:	d117      	bne.n	80055da <UART_Receive_IT+0x50>
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d113      	bne.n	80055da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80055b2:	2300      	movs	r3, #0
 80055b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	685b      	ldr	r3, [r3, #4]
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c8:	b29a      	uxth	r2, r3
 80055ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055d2:	1c9a      	adds	r2, r3, #2
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	629a      	str	r2, [r3, #40]	; 0x28
 80055d8:	e026      	b.n	8005628 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055de:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80055e0:	2300      	movs	r3, #0
 80055e2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ec:	d007      	beq.n	80055fe <UART_Receive_IT+0x74>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	689b      	ldr	r3, [r3, #8]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10a      	bne.n	800560c <UART_Receive_IT+0x82>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d106      	bne.n	800560c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	b2da      	uxtb	r2, r3
 8005606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	e008      	b.n	800561e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	b2db      	uxtb	r3, r3
 8005614:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005618:	b2da      	uxtb	r2, r3
 800561a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005622:	1c5a      	adds	r2, r3, #1
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29b      	uxth	r3, r3
 8005632:	687a      	ldr	r2, [r7, #4]
 8005634:	4619      	mov	r1, r3
 8005636:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005638:	2b00      	cmp	r3, #0
 800563a:	d15a      	bne.n	80056f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68da      	ldr	r2, [r3, #12]
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f022 0220 	bic.w	r2, r2, #32
 800564a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	68da      	ldr	r2, [r3, #12]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800565a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695a      	ldr	r2, [r3, #20]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f022 0201 	bic.w	r2, r2, #1
 800566a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2220      	movs	r2, #32
 8005670:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005678:	2b01      	cmp	r3, #1
 800567a:	d135      	bne.n	80056e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2200      	movs	r2, #0
 8005680:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	330c      	adds	r3, #12
 8005688:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800568a:	697b      	ldr	r3, [r7, #20]
 800568c:	e853 3f00 	ldrex	r3, [r3]
 8005690:	613b      	str	r3, [r7, #16]
   return(result);
 8005692:	693b      	ldr	r3, [r7, #16]
 8005694:	f023 0310 	bic.w	r3, r3, #16
 8005698:	627b      	str	r3, [r7, #36]	; 0x24
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	330c      	adds	r3, #12
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	623a      	str	r2, [r7, #32]
 80056a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a6:	69f9      	ldr	r1, [r7, #28]
 80056a8:	6a3a      	ldr	r2, [r7, #32]
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80056b0:	69bb      	ldr	r3, [r7, #24]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e5      	bne.n	8005682 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f003 0310 	and.w	r3, r3, #16
 80056c0:	2b10      	cmp	r3, #16
 80056c2:	d10a      	bne.n	80056da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80056c4:	2300      	movs	r3, #0
 80056c6:	60fb      	str	r3, [r7, #12]
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	60fb      	str	r3, [r7, #12]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	685b      	ldr	r3, [r3, #4]
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80056de:	4619      	mov	r1, r3
 80056e0:	6878      	ldr	r0, [r7, #4]
 80056e2:	f7ff fdbf 	bl	8005264 <HAL_UARTEx_RxEventCallback>
 80056e6:	e002      	b.n	80056ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80056e8:	6878      	ldr	r0, [r7, #4]
 80056ea:	f7fb fcd7 	bl	800109c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80056ee:	2300      	movs	r3, #0
 80056f0:	e002      	b.n	80056f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80056f2:	2300      	movs	r3, #0
 80056f4:	e000      	b.n	80056f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80056f6:	2302      	movs	r3, #2
  }
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3730      	adds	r7, #48	; 0x30
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005704:	b09f      	sub	sp, #124	; 0x7c
 8005706:	af00      	add	r7, sp, #0
 8005708:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800570a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	691b      	ldr	r3, [r3, #16]
 8005710:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005714:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005716:	68d9      	ldr	r1, [r3, #12]
 8005718:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800571a:	681a      	ldr	r2, [r3, #0]
 800571c:	ea40 0301 	orr.w	r3, r0, r1
 8005720:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005722:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005724:	689a      	ldr	r2, [r3, #8]
 8005726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	431a      	orrs	r2, r3
 800572c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800572e:	695b      	ldr	r3, [r3, #20]
 8005730:	431a      	orrs	r2, r3
 8005732:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	4313      	orrs	r3, r2
 8005738:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800573a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	68db      	ldr	r3, [r3, #12]
 8005740:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005744:	f021 010c 	bic.w	r1, r1, #12
 8005748:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800574e:	430b      	orrs	r3, r1
 8005750:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005752:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695b      	ldr	r3, [r3, #20]
 8005758:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800575c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800575e:	6999      	ldr	r1, [r3, #24]
 8005760:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005762:	681a      	ldr	r2, [r3, #0]
 8005764:	ea40 0301 	orr.w	r3, r0, r1
 8005768:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800576a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4bc5      	ldr	r3, [pc, #788]	; (8005a84 <UART_SetConfig+0x384>)
 8005770:	429a      	cmp	r2, r3
 8005772:	d004      	beq.n	800577e <UART_SetConfig+0x7e>
 8005774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005776:	681a      	ldr	r2, [r3, #0]
 8005778:	4bc3      	ldr	r3, [pc, #780]	; (8005a88 <UART_SetConfig+0x388>)
 800577a:	429a      	cmp	r2, r3
 800577c:	d103      	bne.n	8005786 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800577e:	f7fd fd83 	bl	8003288 <HAL_RCC_GetPCLK2Freq>
 8005782:	6778      	str	r0, [r7, #116]	; 0x74
 8005784:	e002      	b.n	800578c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005786:	f7fd fd6b 	bl	8003260 <HAL_RCC_GetPCLK1Freq>
 800578a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800578c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800578e:	69db      	ldr	r3, [r3, #28]
 8005790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005794:	f040 80b6 	bne.w	8005904 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005798:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800579a:	461c      	mov	r4, r3
 800579c:	f04f 0500 	mov.w	r5, #0
 80057a0:	4622      	mov	r2, r4
 80057a2:	462b      	mov	r3, r5
 80057a4:	1891      	adds	r1, r2, r2
 80057a6:	6439      	str	r1, [r7, #64]	; 0x40
 80057a8:	415b      	adcs	r3, r3
 80057aa:	647b      	str	r3, [r7, #68]	; 0x44
 80057ac:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057b0:	1912      	adds	r2, r2, r4
 80057b2:	eb45 0303 	adc.w	r3, r5, r3
 80057b6:	f04f 0000 	mov.w	r0, #0
 80057ba:	f04f 0100 	mov.w	r1, #0
 80057be:	00d9      	lsls	r1, r3, #3
 80057c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057c4:	00d0      	lsls	r0, r2, #3
 80057c6:	4602      	mov	r2, r0
 80057c8:	460b      	mov	r3, r1
 80057ca:	1911      	adds	r1, r2, r4
 80057cc:	6639      	str	r1, [r7, #96]	; 0x60
 80057ce:	416b      	adcs	r3, r5
 80057d0:	667b      	str	r3, [r7, #100]	; 0x64
 80057d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	461a      	mov	r2, r3
 80057d8:	f04f 0300 	mov.w	r3, #0
 80057dc:	1891      	adds	r1, r2, r2
 80057de:	63b9      	str	r1, [r7, #56]	; 0x38
 80057e0:	415b      	adcs	r3, r3
 80057e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057e4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057e8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80057ec:	f7fa fcf2 	bl	80001d4 <__aeabi_uldivmod>
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	4ba5      	ldr	r3, [pc, #660]	; (8005a8c <UART_SetConfig+0x38c>)
 80057f6:	fba3 2302 	umull	r2, r3, r3, r2
 80057fa:	095b      	lsrs	r3, r3, #5
 80057fc:	011e      	lsls	r6, r3, #4
 80057fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005800:	461c      	mov	r4, r3
 8005802:	f04f 0500 	mov.w	r5, #0
 8005806:	4622      	mov	r2, r4
 8005808:	462b      	mov	r3, r5
 800580a:	1891      	adds	r1, r2, r2
 800580c:	6339      	str	r1, [r7, #48]	; 0x30
 800580e:	415b      	adcs	r3, r3
 8005810:	637b      	str	r3, [r7, #52]	; 0x34
 8005812:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005816:	1912      	adds	r2, r2, r4
 8005818:	eb45 0303 	adc.w	r3, r5, r3
 800581c:	f04f 0000 	mov.w	r0, #0
 8005820:	f04f 0100 	mov.w	r1, #0
 8005824:	00d9      	lsls	r1, r3, #3
 8005826:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800582a:	00d0      	lsls	r0, r2, #3
 800582c:	4602      	mov	r2, r0
 800582e:	460b      	mov	r3, r1
 8005830:	1911      	adds	r1, r2, r4
 8005832:	65b9      	str	r1, [r7, #88]	; 0x58
 8005834:	416b      	adcs	r3, r5
 8005836:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	461a      	mov	r2, r3
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	1891      	adds	r1, r2, r2
 8005844:	62b9      	str	r1, [r7, #40]	; 0x28
 8005846:	415b      	adcs	r3, r3
 8005848:	62fb      	str	r3, [r7, #44]	; 0x2c
 800584a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800584e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005852:	f7fa fcbf 	bl	80001d4 <__aeabi_uldivmod>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4b8c      	ldr	r3, [pc, #560]	; (8005a8c <UART_SetConfig+0x38c>)
 800585c:	fba3 1302 	umull	r1, r3, r3, r2
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	2164      	movs	r1, #100	; 0x64
 8005864:	fb01 f303 	mul.w	r3, r1, r3
 8005868:	1ad3      	subs	r3, r2, r3
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	3332      	adds	r3, #50	; 0x32
 800586e:	4a87      	ldr	r2, [pc, #540]	; (8005a8c <UART_SetConfig+0x38c>)
 8005870:	fba2 2303 	umull	r2, r3, r2, r3
 8005874:	095b      	lsrs	r3, r3, #5
 8005876:	005b      	lsls	r3, r3, #1
 8005878:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800587c:	441e      	add	r6, r3
 800587e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005880:	4618      	mov	r0, r3
 8005882:	f04f 0100 	mov.w	r1, #0
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	1894      	adds	r4, r2, r2
 800588c:	623c      	str	r4, [r7, #32]
 800588e:	415b      	adcs	r3, r3
 8005890:	627b      	str	r3, [r7, #36]	; 0x24
 8005892:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005896:	1812      	adds	r2, r2, r0
 8005898:	eb41 0303 	adc.w	r3, r1, r3
 800589c:	f04f 0400 	mov.w	r4, #0
 80058a0:	f04f 0500 	mov.w	r5, #0
 80058a4:	00dd      	lsls	r5, r3, #3
 80058a6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80058aa:	00d4      	lsls	r4, r2, #3
 80058ac:	4622      	mov	r2, r4
 80058ae:	462b      	mov	r3, r5
 80058b0:	1814      	adds	r4, r2, r0
 80058b2:	653c      	str	r4, [r7, #80]	; 0x50
 80058b4:	414b      	adcs	r3, r1
 80058b6:	657b      	str	r3, [r7, #84]	; 0x54
 80058b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	461a      	mov	r2, r3
 80058be:	f04f 0300 	mov.w	r3, #0
 80058c2:	1891      	adds	r1, r2, r2
 80058c4:	61b9      	str	r1, [r7, #24]
 80058c6:	415b      	adcs	r3, r3
 80058c8:	61fb      	str	r3, [r7, #28]
 80058ca:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80058ce:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80058d2:	f7fa fc7f 	bl	80001d4 <__aeabi_uldivmod>
 80058d6:	4602      	mov	r2, r0
 80058d8:	460b      	mov	r3, r1
 80058da:	4b6c      	ldr	r3, [pc, #432]	; (8005a8c <UART_SetConfig+0x38c>)
 80058dc:	fba3 1302 	umull	r1, r3, r3, r2
 80058e0:	095b      	lsrs	r3, r3, #5
 80058e2:	2164      	movs	r1, #100	; 0x64
 80058e4:	fb01 f303 	mul.w	r3, r1, r3
 80058e8:	1ad3      	subs	r3, r2, r3
 80058ea:	00db      	lsls	r3, r3, #3
 80058ec:	3332      	adds	r3, #50	; 0x32
 80058ee:	4a67      	ldr	r2, [pc, #412]	; (8005a8c <UART_SetConfig+0x38c>)
 80058f0:	fba2 2303 	umull	r2, r3, r2, r3
 80058f4:	095b      	lsrs	r3, r3, #5
 80058f6:	f003 0207 	and.w	r2, r3, #7
 80058fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	4432      	add	r2, r6
 8005900:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005902:	e0b9      	b.n	8005a78 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005906:	461c      	mov	r4, r3
 8005908:	f04f 0500 	mov.w	r5, #0
 800590c:	4622      	mov	r2, r4
 800590e:	462b      	mov	r3, r5
 8005910:	1891      	adds	r1, r2, r2
 8005912:	6139      	str	r1, [r7, #16]
 8005914:	415b      	adcs	r3, r3
 8005916:	617b      	str	r3, [r7, #20]
 8005918:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800591c:	1912      	adds	r2, r2, r4
 800591e:	eb45 0303 	adc.w	r3, r5, r3
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f04f 0100 	mov.w	r1, #0
 800592a:	00d9      	lsls	r1, r3, #3
 800592c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005930:	00d0      	lsls	r0, r2, #3
 8005932:	4602      	mov	r2, r0
 8005934:	460b      	mov	r3, r1
 8005936:	eb12 0804 	adds.w	r8, r2, r4
 800593a:	eb43 0905 	adc.w	r9, r3, r5
 800593e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	4618      	mov	r0, r3
 8005944:	f04f 0100 	mov.w	r1, #0
 8005948:	f04f 0200 	mov.w	r2, #0
 800594c:	f04f 0300 	mov.w	r3, #0
 8005950:	008b      	lsls	r3, r1, #2
 8005952:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005956:	0082      	lsls	r2, r0, #2
 8005958:	4640      	mov	r0, r8
 800595a:	4649      	mov	r1, r9
 800595c:	f7fa fc3a 	bl	80001d4 <__aeabi_uldivmod>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	4b49      	ldr	r3, [pc, #292]	; (8005a8c <UART_SetConfig+0x38c>)
 8005966:	fba3 2302 	umull	r2, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	011e      	lsls	r6, r3, #4
 800596e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005970:	4618      	mov	r0, r3
 8005972:	f04f 0100 	mov.w	r1, #0
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	1894      	adds	r4, r2, r2
 800597c:	60bc      	str	r4, [r7, #8]
 800597e:	415b      	adcs	r3, r3
 8005980:	60fb      	str	r3, [r7, #12]
 8005982:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005986:	1812      	adds	r2, r2, r0
 8005988:	eb41 0303 	adc.w	r3, r1, r3
 800598c:	f04f 0400 	mov.w	r4, #0
 8005990:	f04f 0500 	mov.w	r5, #0
 8005994:	00dd      	lsls	r5, r3, #3
 8005996:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800599a:	00d4      	lsls	r4, r2, #3
 800599c:	4622      	mov	r2, r4
 800599e:	462b      	mov	r3, r5
 80059a0:	1814      	adds	r4, r2, r0
 80059a2:	64bc      	str	r4, [r7, #72]	; 0x48
 80059a4:	414b      	adcs	r3, r1
 80059a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80059a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	4618      	mov	r0, r3
 80059ae:	f04f 0100 	mov.w	r1, #0
 80059b2:	f04f 0200 	mov.w	r2, #0
 80059b6:	f04f 0300 	mov.w	r3, #0
 80059ba:	008b      	lsls	r3, r1, #2
 80059bc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80059c0:	0082      	lsls	r2, r0, #2
 80059c2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80059c6:	f7fa fc05 	bl	80001d4 <__aeabi_uldivmod>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4b2f      	ldr	r3, [pc, #188]	; (8005a8c <UART_SetConfig+0x38c>)
 80059d0:	fba3 1302 	umull	r1, r3, r3, r2
 80059d4:	095b      	lsrs	r3, r3, #5
 80059d6:	2164      	movs	r1, #100	; 0x64
 80059d8:	fb01 f303 	mul.w	r3, r1, r3
 80059dc:	1ad3      	subs	r3, r2, r3
 80059de:	011b      	lsls	r3, r3, #4
 80059e0:	3332      	adds	r3, #50	; 0x32
 80059e2:	4a2a      	ldr	r2, [pc, #168]	; (8005a8c <UART_SetConfig+0x38c>)
 80059e4:	fba2 2303 	umull	r2, r3, r2, r3
 80059e8:	095b      	lsrs	r3, r3, #5
 80059ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059ee:	441e      	add	r6, r3
 80059f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059f2:	4618      	mov	r0, r3
 80059f4:	f04f 0100 	mov.w	r1, #0
 80059f8:	4602      	mov	r2, r0
 80059fa:	460b      	mov	r3, r1
 80059fc:	1894      	adds	r4, r2, r2
 80059fe:	603c      	str	r4, [r7, #0]
 8005a00:	415b      	adcs	r3, r3
 8005a02:	607b      	str	r3, [r7, #4]
 8005a04:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a08:	1812      	adds	r2, r2, r0
 8005a0a:	eb41 0303 	adc.w	r3, r1, r3
 8005a0e:	f04f 0400 	mov.w	r4, #0
 8005a12:	f04f 0500 	mov.w	r5, #0
 8005a16:	00dd      	lsls	r5, r3, #3
 8005a18:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005a1c:	00d4      	lsls	r4, r2, #3
 8005a1e:	4622      	mov	r2, r4
 8005a20:	462b      	mov	r3, r5
 8005a22:	eb12 0a00 	adds.w	sl, r2, r0
 8005a26:	eb43 0b01 	adc.w	fp, r3, r1
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	4618      	mov	r0, r3
 8005a30:	f04f 0100 	mov.w	r1, #0
 8005a34:	f04f 0200 	mov.w	r2, #0
 8005a38:	f04f 0300 	mov.w	r3, #0
 8005a3c:	008b      	lsls	r3, r1, #2
 8005a3e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005a42:	0082      	lsls	r2, r0, #2
 8005a44:	4650      	mov	r0, sl
 8005a46:	4659      	mov	r1, fp
 8005a48:	f7fa fbc4 	bl	80001d4 <__aeabi_uldivmod>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	460b      	mov	r3, r1
 8005a50:	4b0e      	ldr	r3, [pc, #56]	; (8005a8c <UART_SetConfig+0x38c>)
 8005a52:	fba3 1302 	umull	r1, r3, r3, r2
 8005a56:	095b      	lsrs	r3, r3, #5
 8005a58:	2164      	movs	r1, #100	; 0x64
 8005a5a:	fb01 f303 	mul.w	r3, r1, r3
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	011b      	lsls	r3, r3, #4
 8005a62:	3332      	adds	r3, #50	; 0x32
 8005a64:	4a09      	ldr	r2, [pc, #36]	; (8005a8c <UART_SetConfig+0x38c>)
 8005a66:	fba2 2303 	umull	r2, r3, r2, r3
 8005a6a:	095b      	lsrs	r3, r3, #5
 8005a6c:	f003 020f 	and.w	r2, r3, #15
 8005a70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4432      	add	r2, r6
 8005a76:	609a      	str	r2, [r3, #8]
}
 8005a78:	bf00      	nop
 8005a7a:	377c      	adds	r7, #124	; 0x7c
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a82:	bf00      	nop
 8005a84:	40011000 	.word	0x40011000
 8005a88:	40011400 	.word	0x40011400
 8005a8c:	51eb851f 	.word	0x51eb851f

08005a90 <__libc_init_array>:
 8005a90:	b570      	push	{r4, r5, r6, lr}
 8005a92:	4d0d      	ldr	r5, [pc, #52]	; (8005ac8 <__libc_init_array+0x38>)
 8005a94:	4c0d      	ldr	r4, [pc, #52]	; (8005acc <__libc_init_array+0x3c>)
 8005a96:	1b64      	subs	r4, r4, r5
 8005a98:	10a4      	asrs	r4, r4, #2
 8005a9a:	2600      	movs	r6, #0
 8005a9c:	42a6      	cmp	r6, r4
 8005a9e:	d109      	bne.n	8005ab4 <__libc_init_array+0x24>
 8005aa0:	4d0b      	ldr	r5, [pc, #44]	; (8005ad0 <__libc_init_array+0x40>)
 8005aa2:	4c0c      	ldr	r4, [pc, #48]	; (8005ad4 <__libc_init_array+0x44>)
 8005aa4:	f000 f820 	bl	8005ae8 <_init>
 8005aa8:	1b64      	subs	r4, r4, r5
 8005aaa:	10a4      	asrs	r4, r4, #2
 8005aac:	2600      	movs	r6, #0
 8005aae:	42a6      	cmp	r6, r4
 8005ab0:	d105      	bne.n	8005abe <__libc_init_array+0x2e>
 8005ab2:	bd70      	pop	{r4, r5, r6, pc}
 8005ab4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ab8:	4798      	blx	r3
 8005aba:	3601      	adds	r6, #1
 8005abc:	e7ee      	b.n	8005a9c <__libc_init_array+0xc>
 8005abe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ac2:	4798      	blx	r3
 8005ac4:	3601      	adds	r6, #1
 8005ac6:	e7f2      	b.n	8005aae <__libc_init_array+0x1e>
 8005ac8:	08005b28 	.word	0x08005b28
 8005acc:	08005b28 	.word	0x08005b28
 8005ad0:	08005b28 	.word	0x08005b28
 8005ad4:	08005b2c 	.word	0x08005b2c

08005ad8 <memset>:
 8005ad8:	4402      	add	r2, r0
 8005ada:	4603      	mov	r3, r0
 8005adc:	4293      	cmp	r3, r2
 8005ade:	d100      	bne.n	8005ae2 <memset+0xa>
 8005ae0:	4770      	bx	lr
 8005ae2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ae6:	e7f9      	b.n	8005adc <memset+0x4>

08005ae8 <_init>:
 8005ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005aea:	bf00      	nop
 8005aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005aee:	bc08      	pop	{r3}
 8005af0:	469e      	mov	lr, r3
 8005af2:	4770      	bx	lr

08005af4 <_fini>:
 8005af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005af6:	bf00      	nop
 8005af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005afa:	bc08      	pop	{r3}
 8005afc:	469e      	mov	lr, r3
 8005afe:	4770      	bx	lr
