
firmware-pill-dispenser.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005468  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080055fc  080055fc  000155fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005614  08005614  00020034  2**0
                  CONTENTS
  4 .ARM          00000008  08005614  08005614  00015614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800561c  0800561c  00020034  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800561c  0800561c  0001561c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000034  20000000  08005624  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001e4  20000034  08005658  00020034  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000218  08005658  00020218  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012091  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e4  00000000  00000000  000320f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000348e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fb8  00000000  00000000  00035990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016c5d  00000000  00000000  00036948  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012c2e  00000000  00000000  0004d5a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090225  00000000  00000000  000601d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f03f8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004630  00000000  00000000  000f044c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000034 	.word	0x20000034
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080055e4 	.word	0x080055e4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000038 	.word	0x20000038
 80001d0:	080055e4 	.word	0x080055e4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96e 	b.w	80004c8 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468c      	mov	ip, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	f040 8083 	bne.w	800031a <__udivmoddi4+0x116>
 8000214:	428a      	cmp	r2, r1
 8000216:	4617      	mov	r7, r2
 8000218:	d947      	bls.n	80002aa <__udivmoddi4+0xa6>
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	b142      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 8000220:	f1c2 0020 	rsb	r0, r2, #32
 8000224:	fa24 f000 	lsr.w	r0, r4, r0
 8000228:	4091      	lsls	r1, r2
 800022a:	4097      	lsls	r7, r2
 800022c:	ea40 0c01 	orr.w	ip, r0, r1
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbbc f6f8 	udiv	r6, ip, r8
 800023c:	fa1f fe87 	uxth.w	lr, r7
 8000240:	fb08 c116 	mls	r1, r8, r6, ip
 8000244:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000248:	fb06 f10e 	mul.w	r1, r6, lr
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18fb      	adds	r3, r7, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 8119 	bcs.w	800048c <__udivmoddi4+0x288>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8116 	bls.w	800048c <__udivmoddi4+0x288>
 8000260:	3e02      	subs	r6, #2
 8000262:	443b      	add	r3, r7
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fe0e 	mul.w	lr, r0, lr
 8000278:	45a6      	cmp	lr, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	193c      	adds	r4, r7, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000282:	f080 8105 	bcs.w	8000490 <__udivmoddi4+0x28c>
 8000286:	45a6      	cmp	lr, r4
 8000288:	f240 8102 	bls.w	8000490 <__udivmoddi4+0x28c>
 800028c:	3802      	subs	r0, #2
 800028e:	443c      	add	r4, r7
 8000290:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000294:	eba4 040e 	sub.w	r4, r4, lr
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	b902      	cbnz	r2, 80002ae <__udivmoddi4+0xaa>
 80002ac:	deff      	udf	#255	; 0xff
 80002ae:	fab2 f282 	clz	r2, r2
 80002b2:	2a00      	cmp	r2, #0
 80002b4:	d150      	bne.n	8000358 <__udivmoddi4+0x154>
 80002b6:	1bcb      	subs	r3, r1, r7
 80002b8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002bc:	fa1f f887 	uxth.w	r8, r7
 80002c0:	2601      	movs	r6, #1
 80002c2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002c6:	0c21      	lsrs	r1, r4, #16
 80002c8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d0:	fb08 f30c 	mul.w	r3, r8, ip
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d907      	bls.n	80002e8 <__udivmoddi4+0xe4>
 80002d8:	1879      	adds	r1, r7, r1
 80002da:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002de:	d202      	bcs.n	80002e6 <__udivmoddi4+0xe2>
 80002e0:	428b      	cmp	r3, r1
 80002e2:	f200 80e9 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 80002e6:	4684      	mov	ip, r0
 80002e8:	1ac9      	subs	r1, r1, r3
 80002ea:	b2a3      	uxth	r3, r4
 80002ec:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f0:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002f8:	fb08 f800 	mul.w	r8, r8, r0
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	d907      	bls.n	8000310 <__udivmoddi4+0x10c>
 8000300:	193c      	adds	r4, r7, r4
 8000302:	f100 33ff 	add.w	r3, r0, #4294967295
 8000306:	d202      	bcs.n	800030e <__udivmoddi4+0x10a>
 8000308:	45a0      	cmp	r8, r4
 800030a:	f200 80d9 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 800030e:	4618      	mov	r0, r3
 8000310:	eba4 0408 	sub.w	r4, r4, r8
 8000314:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000318:	e7bf      	b.n	800029a <__udivmoddi4+0x96>
 800031a:	428b      	cmp	r3, r1
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x12e>
 800031e:	2d00      	cmp	r5, #0
 8000320:	f000 80b1 	beq.w	8000486 <__udivmoddi4+0x282>
 8000324:	2600      	movs	r6, #0
 8000326:	e9c5 0100 	strd	r0, r1, [r5]
 800032a:	4630      	mov	r0, r6
 800032c:	4631      	mov	r1, r6
 800032e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000332:	fab3 f683 	clz	r6, r3
 8000336:	2e00      	cmp	r6, #0
 8000338:	d14a      	bne.n	80003d0 <__udivmoddi4+0x1cc>
 800033a:	428b      	cmp	r3, r1
 800033c:	d302      	bcc.n	8000344 <__udivmoddi4+0x140>
 800033e:	4282      	cmp	r2, r0
 8000340:	f200 80b8 	bhi.w	80004b4 <__udivmoddi4+0x2b0>
 8000344:	1a84      	subs	r4, r0, r2
 8000346:	eb61 0103 	sbc.w	r1, r1, r3
 800034a:	2001      	movs	r0, #1
 800034c:	468c      	mov	ip, r1
 800034e:	2d00      	cmp	r5, #0
 8000350:	d0a8      	beq.n	80002a4 <__udivmoddi4+0xa0>
 8000352:	e9c5 4c00 	strd	r4, ip, [r5]
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000358:	f1c2 0320 	rsb	r3, r2, #32
 800035c:	fa20 f603 	lsr.w	r6, r0, r3
 8000360:	4097      	lsls	r7, r2
 8000362:	fa01 f002 	lsl.w	r0, r1, r2
 8000366:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036a:	40d9      	lsrs	r1, r3
 800036c:	4330      	orrs	r0, r6
 800036e:	0c03      	lsrs	r3, r0, #16
 8000370:	fbb1 f6fe 	udiv	r6, r1, lr
 8000374:	fa1f f887 	uxth.w	r8, r7
 8000378:	fb0e 1116 	mls	r1, lr, r6, r1
 800037c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000380:	fb06 f108 	mul.w	r1, r6, r8
 8000384:	4299      	cmp	r1, r3
 8000386:	fa04 f402 	lsl.w	r4, r4, r2
 800038a:	d909      	bls.n	80003a0 <__udivmoddi4+0x19c>
 800038c:	18fb      	adds	r3, r7, r3
 800038e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000392:	f080 808d 	bcs.w	80004b0 <__udivmoddi4+0x2ac>
 8000396:	4299      	cmp	r1, r3
 8000398:	f240 808a 	bls.w	80004b0 <__udivmoddi4+0x2ac>
 800039c:	3e02      	subs	r6, #2
 800039e:	443b      	add	r3, r7
 80003a0:	1a5b      	subs	r3, r3, r1
 80003a2:	b281      	uxth	r1, r0
 80003a4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003a8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b0:	fb00 f308 	mul.w	r3, r0, r8
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d907      	bls.n	80003c8 <__udivmoddi4+0x1c4>
 80003b8:	1879      	adds	r1, r7, r1
 80003ba:	f100 3cff 	add.w	ip, r0, #4294967295
 80003be:	d273      	bcs.n	80004a8 <__udivmoddi4+0x2a4>
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d971      	bls.n	80004a8 <__udivmoddi4+0x2a4>
 80003c4:	3802      	subs	r0, #2
 80003c6:	4439      	add	r1, r7
 80003c8:	1acb      	subs	r3, r1, r3
 80003ca:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003ce:	e778      	b.n	80002c2 <__udivmoddi4+0xbe>
 80003d0:	f1c6 0c20 	rsb	ip, r6, #32
 80003d4:	fa03 f406 	lsl.w	r4, r3, r6
 80003d8:	fa22 f30c 	lsr.w	r3, r2, ip
 80003dc:	431c      	orrs	r4, r3
 80003de:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e2:	fa01 f306 	lsl.w	r3, r1, r6
 80003e6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ea:	fa21 f10c 	lsr.w	r1, r1, ip
 80003ee:	431f      	orrs	r7, r3
 80003f0:	0c3b      	lsrs	r3, r7, #16
 80003f2:	fbb1 f9fe 	udiv	r9, r1, lr
 80003f6:	fa1f f884 	uxth.w	r8, r4
 80003fa:	fb0e 1119 	mls	r1, lr, r9, r1
 80003fe:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000402:	fb09 fa08 	mul.w	sl, r9, r8
 8000406:	458a      	cmp	sl, r1
 8000408:	fa02 f206 	lsl.w	r2, r2, r6
 800040c:	fa00 f306 	lsl.w	r3, r0, r6
 8000410:	d908      	bls.n	8000424 <__udivmoddi4+0x220>
 8000412:	1861      	adds	r1, r4, r1
 8000414:	f109 30ff 	add.w	r0, r9, #4294967295
 8000418:	d248      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800041a:	458a      	cmp	sl, r1
 800041c:	d946      	bls.n	80004ac <__udivmoddi4+0x2a8>
 800041e:	f1a9 0902 	sub.w	r9, r9, #2
 8000422:	4421      	add	r1, r4
 8000424:	eba1 010a 	sub.w	r1, r1, sl
 8000428:	b2bf      	uxth	r7, r7
 800042a:	fbb1 f0fe 	udiv	r0, r1, lr
 800042e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000432:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000436:	fb00 f808 	mul.w	r8, r0, r8
 800043a:	45b8      	cmp	r8, r7
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x24a>
 800043e:	19e7      	adds	r7, r4, r7
 8000440:	f100 31ff 	add.w	r1, r0, #4294967295
 8000444:	d22e      	bcs.n	80004a4 <__udivmoddi4+0x2a0>
 8000446:	45b8      	cmp	r8, r7
 8000448:	d92c      	bls.n	80004a4 <__udivmoddi4+0x2a0>
 800044a:	3802      	subs	r0, #2
 800044c:	4427      	add	r7, r4
 800044e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000452:	eba7 0708 	sub.w	r7, r7, r8
 8000456:	fba0 8902 	umull	r8, r9, r0, r2
 800045a:	454f      	cmp	r7, r9
 800045c:	46c6      	mov	lr, r8
 800045e:	4649      	mov	r1, r9
 8000460:	d31a      	bcc.n	8000498 <__udivmoddi4+0x294>
 8000462:	d017      	beq.n	8000494 <__udivmoddi4+0x290>
 8000464:	b15d      	cbz	r5, 800047e <__udivmoddi4+0x27a>
 8000466:	ebb3 020e 	subs.w	r2, r3, lr
 800046a:	eb67 0701 	sbc.w	r7, r7, r1
 800046e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000472:	40f2      	lsrs	r2, r6
 8000474:	ea4c 0202 	orr.w	r2, ip, r2
 8000478:	40f7      	lsrs	r7, r6
 800047a:	e9c5 2700 	strd	r2, r7, [r5]
 800047e:	2600      	movs	r6, #0
 8000480:	4631      	mov	r1, r6
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	462e      	mov	r6, r5
 8000488:	4628      	mov	r0, r5
 800048a:	e70b      	b.n	80002a4 <__udivmoddi4+0xa0>
 800048c:	4606      	mov	r6, r0
 800048e:	e6e9      	b.n	8000264 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fd      	b.n	8000290 <__udivmoddi4+0x8c>
 8000494:	4543      	cmp	r3, r8
 8000496:	d2e5      	bcs.n	8000464 <__udivmoddi4+0x260>
 8000498:	ebb8 0e02 	subs.w	lr, r8, r2
 800049c:	eb69 0104 	sbc.w	r1, r9, r4
 80004a0:	3801      	subs	r0, #1
 80004a2:	e7df      	b.n	8000464 <__udivmoddi4+0x260>
 80004a4:	4608      	mov	r0, r1
 80004a6:	e7d2      	b.n	800044e <__udivmoddi4+0x24a>
 80004a8:	4660      	mov	r0, ip
 80004aa:	e78d      	b.n	80003c8 <__udivmoddi4+0x1c4>
 80004ac:	4681      	mov	r9, r0
 80004ae:	e7b9      	b.n	8000424 <__udivmoddi4+0x220>
 80004b0:	4666      	mov	r6, ip
 80004b2:	e775      	b.n	80003a0 <__udivmoddi4+0x19c>
 80004b4:	4630      	mov	r0, r6
 80004b6:	e74a      	b.n	800034e <__udivmoddi4+0x14a>
 80004b8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004bc:	4439      	add	r1, r7
 80004be:	e713      	b.n	80002e8 <__udivmoddi4+0xe4>
 80004c0:	3802      	subs	r0, #2
 80004c2:	443c      	add	r4, r7
 80004c4:	e724      	b.n	8000310 <__udivmoddi4+0x10c>
 80004c6:	bf00      	nop

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <EE_Init>:
  * @param  None.
  * @retval - Flash error code: on write Flash error
  *         - FLASH_COMPLETE: on success
  */
uint16_t EE_Init(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b08a      	sub	sp, #40	; 0x28
 80004d0:	af00      	add	r7, sp, #0
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 80004d2:	2306      	movs	r3, #6
 80004d4:	847b      	strh	r3, [r7, #34]	; 0x22
 80004d6:	2306      	movs	r3, #6
 80004d8:	843b      	strh	r3, [r7, #32]
  uint16_t VarIdx = 0;
 80004da:	2300      	movs	r3, #0
 80004dc:	84fb      	strh	r3, [r7, #38]	; 0x26
  uint16_t EepromStatus = 0, ReadStatus = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	83fb      	strh	r3, [r7, #30]
 80004e2:	2300      	movs	r3, #0
 80004e4:	83bb      	strh	r3, [r7, #28]
  int16_t x = -1;
 80004e6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004ea:	84bb      	strh	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef  FlashStatus;
  uint32_t SectorError = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]
  FLASH_EraseInitTypeDef pEraseInit;


  /* Get Page0 status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 80004f0:	4ba1      	ldr	r3, [pc, #644]	; (8000778 <EE_Init+0x2ac>)
 80004f2:	881b      	ldrh	r3, [r3, #0]
 80004f4:	847b      	strh	r3, [r7, #34]	; 0x22
  /* Get Page1 status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 80004f6:	4ba1      	ldr	r3, [pc, #644]	; (800077c <EE_Init+0x2b0>)
 80004f8:	881b      	ldrh	r3, [r3, #0]
 80004fa:	843b      	strh	r3, [r7, #32]

  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80004fc:	2300      	movs	r3, #0
 80004fe:	603b      	str	r3, [r7, #0]
  pEraseInit.Sector = PAGE0_ID;
 8000500:	2302      	movs	r3, #2
 8000502:	60bb      	str	r3, [r7, #8]
  pEraseInit.NbSectors = 1;
 8000504:	2301      	movs	r3, #1
 8000506:	60fb      	str	r3, [r7, #12]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000508:	2302      	movs	r3, #2
 800050a:	613b      	str	r3, [r7, #16]
  
  /* Check for invalid header states and repair if necessary */
  switch (PageStatus0)
 800050c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800050e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000512:	4293      	cmp	r3, r2
 8000514:	d00b      	beq.n	800052e <EE_Init+0x62>
 8000516:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800051a:	f280 8196 	bge.w	800084a <EE_Init+0x37e>
 800051e:	2b00      	cmp	r3, #0
 8000520:	f000 80f8 	beq.w	8000714 <EE_Init+0x248>
 8000524:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000528:	4293      	cmp	r3, r2
 800052a:	d050      	beq.n	80005ce <EE_Init+0x102>
 800052c:	e18d      	b.n	800084a <EE_Init+0x37e>
  {
    case ERASED:
      if (PageStatus1 == VALID_PAGE) /* Page0 erased, Page1 valid */
 800052e:	8c3b      	ldrh	r3, [r7, #32]
 8000530:	2b00      	cmp	r3, #0
 8000532:	d116      	bne.n	8000562 <EE_Init+0x96>
      {
          /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000534:	4890      	ldr	r0, [pc, #576]	; (8000778 <EE_Init+0x2ac>)
 8000536:	f000 f9a9 	bl	800088c <EE_VerifyPageFullyErased>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	f040 818e 	bne.w	800085e <EE_Init+0x392>
        {
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000542:	f107 0214 	add.w	r2, r7, #20
 8000546:	463b      	mov	r3, r7
 8000548:	4611      	mov	r1, r2
 800054a:	4618      	mov	r0, r3
 800054c:	f001 fce2 	bl	8001f14 <HAL_FLASHEx_Erase>
 8000550:	4603      	mov	r3, r0
 8000552:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000554:	7efb      	ldrb	r3, [r7, #27]
 8000556:	2b00      	cmp	r3, #0
 8000558:	f000 8181 	beq.w	800085e <EE_Init+0x392>
          {
            return FlashStatus;
 800055c:	7efb      	ldrb	r3, [r7, #27]
 800055e:	b29b      	uxth	r3, r3
 8000560:	e185      	b.n	800086e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == RECEIVE_DATA) /* Page0 erased, Page1 receive */
 8000562:	8c3b      	ldrh	r3, [r7, #32]
 8000564:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000568:	4293      	cmp	r3, r2
 800056a:	d125      	bne.n	80005b8 <EE_Init+0xec>
      {
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800056c:	4882      	ldr	r0, [pc, #520]	; (8000778 <EE_Init+0x2ac>)
 800056e:	f000 f98d 	bl	800088c <EE_VerifyPageFullyErased>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d10e      	bne.n	8000596 <EE_Init+0xca>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000578:	f107 0214 	add.w	r2, r7, #20
 800057c:	463b      	mov	r3, r7
 800057e:	4611      	mov	r1, r2
 8000580:	4618      	mov	r0, r3
 8000582:	f001 fcc7 	bl	8001f14 <HAL_FLASHEx_Erase>
 8000586:	4603      	mov	r3, r0
 8000588:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800058a:	7efb      	ldrb	r3, [r7, #27]
 800058c:	2b00      	cmp	r3, #0
 800058e:	d002      	beq.n	8000596 <EE_Init+0xca>
          {
            return FlashStatus;
 8000590:	7efb      	ldrb	r3, [r7, #27]
 8000592:	b29b      	uxth	r3, r3
 8000594:	e16b      	b.n	800086e <EE_Init+0x3a2>
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);
 8000596:	f04f 0200 	mov.w	r2, #0
 800059a:	f04f 0300 	mov.w	r3, #0
 800059e:	4977      	ldr	r1, [pc, #476]	; (800077c <EE_Init+0x2b0>)
 80005a0:	2001      	movs	r0, #1
 80005a2:	f001 fb01 	bl	8001ba8 <HAL_FLASH_Program>
 80005a6:	4603      	mov	r3, r0
 80005a8:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80005aa:	7efb      	ldrb	r3, [r7, #27]
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	f000 8156 	beq.w	800085e <EE_Init+0x392>
        {
          return FlashStatus;
 80005b2:	7efb      	ldrb	r3, [r7, #27]
 80005b4:	b29b      	uxth	r3, r3
 80005b6:	e15a      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else /* First EEPROM access (Page0&1 are erased) or invalid state -> format EEPROM */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80005b8:	f000 f9d8 	bl	800096c <EE_Format>
 80005bc:	4603      	mov	r3, r0
 80005be:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80005c0:	7efb      	ldrb	r3, [r7, #27]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	f000 814b 	beq.w	800085e <EE_Init+0x392>
        {
          return FlashStatus;
 80005c8:	7efb      	ldrb	r3, [r7, #27]
 80005ca:	b29b      	uxth	r3, r3
 80005cc:	e14f      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      break;

    case RECEIVE_DATA:
      if (PageStatus1 == VALID_PAGE) /* Page0 receive, Page1 valid */
 80005ce:	8c3b      	ldrh	r3, [r7, #32]
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d163      	bne.n	800069c <EE_Init+0x1d0>
      {
        /* Transfer data from Page1 to Page0 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80005d4:	2300      	movs	r3, #0
 80005d6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80005d8:	e030      	b.n	800063c <EE_Init+0x170>
        {
          if (( *(__IO uint16_t*)(PAGE0_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 80005da:	4b69      	ldr	r3, [pc, #420]	; (8000780 <EE_Init+0x2b4>)
 80005dc:	881b      	ldrh	r3, [r3, #0]
 80005de:	b29a      	uxth	r2, r3
 80005e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005e2:	4968      	ldr	r1, [pc, #416]	; (8000784 <EE_Init+0x2b8>)
 80005e4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 80005e8:	429a      	cmp	r2, r3
 80005ea:	d101      	bne.n	80005f0 <EE_Init+0x124>
          {
            x = VarIdx;
 80005ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005ee:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80005f0:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80005f2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80005f6:	429a      	cmp	r2, r3
 80005f8:	d01d      	beq.n	8000636 <EE_Init+0x16a>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80005fa:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80005fc:	4a61      	ldr	r2, [pc, #388]	; (8000784 <EE_Init+0x2b8>)
 80005fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000602:	4961      	ldr	r1, [pc, #388]	; (8000788 <EE_Init+0x2bc>)
 8000604:	4618      	mov	r0, r3
 8000606:	f000 f967 	bl	80008d8 <EE_ReadVariable>
 800060a:	4603      	mov	r3, r0
 800060c:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 800060e:	8bbb      	ldrh	r3, [r7, #28]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d010      	beq.n	8000636 <EE_Init+0x16a>
            {
              /* Transfer the variable to the Page0 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 8000614:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000616:	4a5b      	ldr	r2, [pc, #364]	; (8000784 <EE_Init+0x2b8>)
 8000618:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800061c:	4a5a      	ldr	r2, [pc, #360]	; (8000788 <EE_Init+0x2bc>)
 800061e:	8812      	ldrh	r2, [r2, #0]
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f000 fa3a 	bl	8000a9c <EE_VerifyPageFullWriteVariable>
 8000628:	4603      	mov	r3, r0
 800062a:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 800062c:	8bfb      	ldrh	r3, [r7, #30]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <EE_Init+0x16a>
              {
                return EepromStatus;
 8000632:	8bfb      	ldrh	r3, [r7, #30]
 8000634:	e11b      	b.n	800086e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000636:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000638:	3301      	adds	r3, #1
 800063a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800063c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800063e:	2b13      	cmp	r3, #19
 8000640:	d9cb      	bls.n	80005da <EE_Init+0x10e>
              }
            }
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 8000642:	f04f 0200 	mov.w	r2, #0
 8000646:	f04f 0300 	mov.w	r3, #0
 800064a:	494b      	ldr	r1, [pc, #300]	; (8000778 <EE_Init+0x2ac>)
 800064c:	2001      	movs	r0, #1
 800064e:	f001 faab 	bl	8001ba8 <HAL_FLASH_Program>
 8000652:	4603      	mov	r3, r0
 8000654:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000656:	7efb      	ldrb	r3, [r7, #27]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <EE_Init+0x196>
        {
          return FlashStatus;
 800065c:	7efb      	ldrb	r3, [r7, #27]
 800065e:	b29b      	uxth	r3, r3
 8000660:	e105      	b.n	800086e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE1_ID;
 8000662:	2303      	movs	r3, #3
 8000664:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000666:	2301      	movs	r3, #1
 8000668:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800066a:	2302      	movs	r3, #2
 800066c:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 800066e:	4843      	ldr	r0, [pc, #268]	; (800077c <EE_Init+0x2b0>)
 8000670:	f000 f90c 	bl	800088c <EE_VerifyPageFullyErased>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	f040 80f3 	bne.w	8000862 <EE_Init+0x396>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800067c:	f107 0214 	add.w	r2, r7, #20
 8000680:	463b      	mov	r3, r7
 8000682:	4611      	mov	r1, r2
 8000684:	4618      	mov	r0, r3
 8000686:	f001 fc45 	bl	8001f14 <HAL_FLASHEx_Erase>
 800068a:	4603      	mov	r3, r0
 800068c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800068e:	7efb      	ldrb	r3, [r7, #27]
 8000690:	2b00      	cmp	r3, #0
 8000692:	f000 80e6 	beq.w	8000862 <EE_Init+0x396>
          {
            return FlashStatus;
 8000696:	7efb      	ldrb	r3, [r7, #27]
 8000698:	b29b      	uxth	r3, r3
 800069a:	e0e8      	b.n	800086e <EE_Init+0x3a2>
          }
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 receive, Page1 erased */
 800069c:	8c3b      	ldrh	r3, [r7, #32]
 800069e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006a2:	4293      	cmp	r3, r2
 80006a4:	d12b      	bne.n	80006fe <EE_Init+0x232>
      {
        pEraseInit.Sector = PAGE1_ID;
 80006a6:	2303      	movs	r3, #3
 80006a8:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 80006aa:	2301      	movs	r3, #1
 80006ac:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 80006ae:	2302      	movs	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80006b2:	4832      	ldr	r0, [pc, #200]	; (800077c <EE_Init+0x2b0>)
 80006b4:	f000 f8ea 	bl	800088c <EE_VerifyPageFullyErased>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10e      	bne.n	80006dc <EE_Init+0x210>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 80006be:	f107 0214 	add.w	r2, r7, #20
 80006c2:	463b      	mov	r3, r7
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f001 fc24 	bl	8001f14 <HAL_FLASHEx_Erase>
 80006cc:	4603      	mov	r3, r0
 80006ce:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 80006d0:	7efb      	ldrb	r3, [r7, #27]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d002      	beq.n	80006dc <EE_Init+0x210>
          {
            return FlashStatus;
 80006d6:	7efb      	ldrb	r3, [r7, #27]
 80006d8:	b29b      	uxth	r3, r3
 80006da:	e0c8      	b.n	800086e <EE_Init+0x3a2>
          }
        }
        /* Mark Page0 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE);
 80006dc:	f04f 0200 	mov.w	r2, #0
 80006e0:	f04f 0300 	mov.w	r3, #0
 80006e4:	4924      	ldr	r1, [pc, #144]	; (8000778 <EE_Init+0x2ac>)
 80006e6:	2001      	movs	r0, #1
 80006e8:	f001 fa5e 	bl	8001ba8 <HAL_FLASH_Program>
 80006ec:	4603      	mov	r3, r0
 80006ee:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 80006f0:	7efb      	ldrb	r3, [r7, #27]
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	f000 80b5 	beq.w	8000862 <EE_Init+0x396>
        {
          return FlashStatus;
 80006f8:	7efb      	ldrb	r3, [r7, #27]
 80006fa:	b29b      	uxth	r3, r3
 80006fc:	e0b7      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else /* Invalid state -> format eeprom */
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 80006fe:	f000 f935 	bl	800096c <EE_Format>
 8000702:	4603      	mov	r3, r0
 8000704:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000706:	7efb      	ldrb	r3, [r7, #27]
 8000708:	2b00      	cmp	r3, #0
 800070a:	f000 80aa 	beq.w	8000862 <EE_Init+0x396>
        {
          return FlashStatus;
 800070e:	7efb      	ldrb	r3, [r7, #27]
 8000710:	b29b      	uxth	r3, r3
 8000712:	e0ac      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      break;

    case VALID_PAGE:
      if (PageStatus1 == VALID_PAGE) /* Invalid state -> format eeprom */
 8000714:	8c3b      	ldrh	r3, [r7, #32]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d10a      	bne.n	8000730 <EE_Init+0x264>
      {
        /* Erase both Page0 and Page1 and set Page0 as valid page */
        FlashStatus = EE_Format();
 800071a:	f000 f927 	bl	800096c <EE_Format>
 800071e:	4603      	mov	r3, r0
 8000720:	76fb      	strb	r3, [r7, #27]
        /* If erase/program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000722:	7efb      	ldrb	r3, [r7, #27]
 8000724:	2b00      	cmp	r3, #0
 8000726:	f000 809e 	beq.w	8000866 <EE_Init+0x39a>
        {
          return FlashStatus;
 800072a:	7efb      	ldrb	r3, [r7, #27]
 800072c:	b29b      	uxth	r3, r3
 800072e:	e09e      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else if (PageStatus1 == ERASED) /* Page0 valid, Page1 erased */
 8000730:	8c3b      	ldrh	r3, [r7, #32]
 8000732:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000736:	4293      	cmp	r3, r2
 8000738:	d11b      	bne.n	8000772 <EE_Init+0x2a6>
      {
        pEraseInit.Sector = PAGE1_ID;
 800073a:	2303      	movs	r3, #3
 800073c:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 800073e:	2301      	movs	r3, #1
 8000740:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000742:	2302      	movs	r3, #2
 8000744:	613b      	str	r3, [r7, #16]
        /* Erase Page1 */
        if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 8000746:	480d      	ldr	r0, [pc, #52]	; (800077c <EE_Init+0x2b0>)
 8000748:	f000 f8a0 	bl	800088c <EE_VerifyPageFullyErased>
 800074c:	4603      	mov	r3, r0
 800074e:	2b00      	cmp	r3, #0
 8000750:	f040 8089 	bne.w	8000866 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 8000754:	f107 0214 	add.w	r2, r7, #20
 8000758:	463b      	mov	r3, r7
 800075a:	4611      	mov	r1, r2
 800075c:	4618      	mov	r0, r3
 800075e:	f001 fbd9 	bl	8001f14 <HAL_FLASHEx_Erase>
 8000762:	4603      	mov	r3, r0
 8000764:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 8000766:	7efb      	ldrb	r3, [r7, #27]
 8000768:	2b00      	cmp	r3, #0
 800076a:	d07c      	beq.n	8000866 <EE_Init+0x39a>
          {
            return FlashStatus;
 800076c:	7efb      	ldrb	r3, [r7, #27]
 800076e:	b29b      	uxth	r3, r3
 8000770:	e07d      	b.n	800086e <EE_Init+0x3a2>
        }
      }
      else /* Page0 valid, Page1 receive */
      {
        /* Transfer data from Page0 to Page1 */
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 8000772:	2300      	movs	r3, #0
 8000774:	84fb      	strh	r3, [r7, #38]	; 0x26
 8000776:	e03a      	b.n	80007ee <EE_Init+0x322>
 8000778:	08008000 	.word	0x08008000
 800077c:	0800c000 	.word	0x0800c000
 8000780:	08008006 	.word	0x08008006
 8000784:	20000000 	.word	0x20000000
 8000788:	20000050 	.word	0x20000050
        {
          if ((*(__IO uint16_t*)(PAGE1_BASE_ADDRESS + 6)) == VirtAddVarTab[VarIdx])
 800078c:	4b3a      	ldr	r3, [pc, #232]	; (8000878 <EE_Init+0x3ac>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	b29a      	uxth	r2, r3
 8000792:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8000794:	4939      	ldr	r1, [pc, #228]	; (800087c <EE_Init+0x3b0>)
 8000796:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800079a:	429a      	cmp	r2, r3
 800079c:	d101      	bne.n	80007a2 <EE_Init+0x2d6>
          {
            x = VarIdx;
 800079e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007a0:	84bb      	strh	r3, [r7, #36]	; 0x24
          }
          if (VarIdx != x)
 80007a2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80007a4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80007a8:	429a      	cmp	r2, r3
 80007aa:	d01d      	beq.n	80007e8 <EE_Init+0x31c>
          {
            /* Read the last variables' updates */
            ReadStatus = EE_ReadVariable(VirtAddVarTab[VarIdx], &DataVar);
 80007ac:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ae:	4a33      	ldr	r2, [pc, #204]	; (800087c <EE_Init+0x3b0>)
 80007b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007b4:	4932      	ldr	r1, [pc, #200]	; (8000880 <EE_Init+0x3b4>)
 80007b6:	4618      	mov	r0, r3
 80007b8:	f000 f88e 	bl	80008d8 <EE_ReadVariable>
 80007bc:	4603      	mov	r3, r0
 80007be:	83bb      	strh	r3, [r7, #28]
            /* In case variable corresponding to the virtual address was found */
            if (ReadStatus != 0x1)
 80007c0:	8bbb      	ldrh	r3, [r7, #28]
 80007c2:	2b01      	cmp	r3, #1
 80007c4:	d010      	beq.n	80007e8 <EE_Init+0x31c>
            {
              /* Transfer the variable to the Page1 */
              EepromStatus = EE_VerifyPageFullWriteVariable(VirtAddVarTab[VarIdx], DataVar);
 80007c6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007c8:	4a2c      	ldr	r2, [pc, #176]	; (800087c <EE_Init+0x3b0>)
 80007ca:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80007ce:	4a2c      	ldr	r2, [pc, #176]	; (8000880 <EE_Init+0x3b4>)
 80007d0:	8812      	ldrh	r2, [r2, #0]
 80007d2:	4611      	mov	r1, r2
 80007d4:	4618      	mov	r0, r3
 80007d6:	f000 f961 	bl	8000a9c <EE_VerifyPageFullWriteVariable>
 80007da:	4603      	mov	r3, r0
 80007dc:	83fb      	strh	r3, [r7, #30]
              /* If program operation was failed, a Flash error code is returned */
              if (EepromStatus != HAL_OK)
 80007de:	8bfb      	ldrh	r3, [r7, #30]
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <EE_Init+0x31c>
              {
                return EepromStatus;
 80007e4:	8bfb      	ldrh	r3, [r7, #30]
 80007e6:	e042      	b.n	800086e <EE_Init+0x3a2>
        for (VarIdx = 0; VarIdx < NB_OF_VAR; VarIdx++)
 80007e8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007ea:	3301      	adds	r3, #1
 80007ec:	84fb      	strh	r3, [r7, #38]	; 0x26
 80007ee:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80007f0:	2b13      	cmp	r3, #19
 80007f2:	d9cb      	bls.n	800078c <EE_Init+0x2c0>
              }
            }
          }
        }
        /* Mark Page1 as valid */
        FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE1_BASE_ADDRESS, VALID_PAGE);        
 80007f4:	f04f 0200 	mov.w	r2, #0
 80007f8:	f04f 0300 	mov.w	r3, #0
 80007fc:	4921      	ldr	r1, [pc, #132]	; (8000884 <EE_Init+0x3b8>)
 80007fe:	2001      	movs	r0, #1
 8000800:	f001 f9d2 	bl	8001ba8 <HAL_FLASH_Program>
 8000804:	4603      	mov	r3, r0
 8000806:	76fb      	strb	r3, [r7, #27]
        /* If program operation was failed, a Flash error code is returned */
        if (FlashStatus != HAL_OK)
 8000808:	7efb      	ldrb	r3, [r7, #27]
 800080a:	2b00      	cmp	r3, #0
 800080c:	d002      	beq.n	8000814 <EE_Init+0x348>
        {
          return FlashStatus;
 800080e:	7efb      	ldrb	r3, [r7, #27]
 8000810:	b29b      	uxth	r3, r3
 8000812:	e02c      	b.n	800086e <EE_Init+0x3a2>
        }
        pEraseInit.Sector = PAGE0_ID;
 8000814:	2302      	movs	r3, #2
 8000816:	60bb      	str	r3, [r7, #8]
        pEraseInit.NbSectors = 1;
 8000818:	2301      	movs	r3, #1
 800081a:	60fb      	str	r3, [r7, #12]
        pEraseInit.VoltageRange = VOLTAGE_RANGE;
 800081c:	2302      	movs	r3, #2
 800081e:	613b      	str	r3, [r7, #16]
        /* Erase Page0 */
        if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 8000820:	4819      	ldr	r0, [pc, #100]	; (8000888 <EE_Init+0x3bc>)
 8000822:	f000 f833 	bl	800088c <EE_VerifyPageFullyErased>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d11c      	bne.n	8000866 <EE_Init+0x39a>
        { 
          FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError);
 800082c:	f107 0214 	add.w	r2, r7, #20
 8000830:	463b      	mov	r3, r7
 8000832:	4611      	mov	r1, r2
 8000834:	4618      	mov	r0, r3
 8000836:	f001 fb6d 	bl	8001f14 <HAL_FLASHEx_Erase>
 800083a:	4603      	mov	r3, r0
 800083c:	76fb      	strb	r3, [r7, #27]
          /* If erase operation was failed, a Flash error code is returned */
          if (FlashStatus != HAL_OK)
 800083e:	7efb      	ldrb	r3, [r7, #27]
 8000840:	2b00      	cmp	r3, #0
 8000842:	d010      	beq.n	8000866 <EE_Init+0x39a>
          {
            return FlashStatus;
 8000844:	7efb      	ldrb	r3, [r7, #27]
 8000846:	b29b      	uxth	r3, r3
 8000848:	e011      	b.n	800086e <EE_Init+0x3a2>
      }
      break;

    default:  /* Any other state -> format eeprom */
      /* Erase both Page0 and Page1 and set Page0 as valid page */
      FlashStatus = EE_Format();
 800084a:	f000 f88f 	bl	800096c <EE_Format>
 800084e:	4603      	mov	r3, r0
 8000850:	76fb      	strb	r3, [r7, #27]
      /* If erase/program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000852:	7efb      	ldrb	r3, [r7, #27]
 8000854:	2b00      	cmp	r3, #0
 8000856:	d008      	beq.n	800086a <EE_Init+0x39e>
      {
        return FlashStatus;
 8000858:	7efb      	ldrb	r3, [r7, #27]
 800085a:	b29b      	uxth	r3, r3
 800085c:	e007      	b.n	800086e <EE_Init+0x3a2>
      break;
 800085e:	bf00      	nop
 8000860:	e004      	b.n	800086c <EE_Init+0x3a0>
      break;
 8000862:	bf00      	nop
 8000864:	e002      	b.n	800086c <EE_Init+0x3a0>
      break;
 8000866:	bf00      	nop
 8000868:	e000      	b.n	800086c <EE_Init+0x3a0>
      }
      break;
 800086a:	bf00      	nop
  }

  return HAL_OK;
 800086c:	2300      	movs	r3, #0
}
 800086e:	4618      	mov	r0, r3
 8000870:	3728      	adds	r7, #40	; 0x28
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	0800c006 	.word	0x0800c006
 800087c:	20000000 	.word	0x20000000
 8000880:	20000050 	.word	0x20000050
 8000884:	0800c000 	.word	0x0800c000
 8000888:	08008000 	.word	0x08008000

0800088c <EE_VerifyPageFullyErased>:
  * @retval page fully erased status:
  *           - 0: if Page not erased
  *           - 1: if Page erased
  */
uint16_t EE_VerifyPageFullyErased(uint32_t Address)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  uint32_t ReadStatus = 1;
 8000894:	2301      	movs	r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
  uint16_t AddressValue = 0x5555;
 8000898:	f245 5355 	movw	r3, #21845	; 0x5555
 800089c:	817b      	strh	r3, [r7, #10]
    
  /* Check each active page address starting from end */
  while (Address <= PAGE0_END_ADDRESS)
 800089e:	e00d      	b.n	80008bc <EE_VerifyPageFullyErased+0x30>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	881b      	ldrh	r3, [r3, #0]
 80008a4:	817b      	strh	r3, [r7, #10]

    /* Compare the read address with the virtual address */
    if (AddressValue != ERASED)
 80008a6:	897b      	ldrh	r3, [r7, #10]
 80008a8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d002      	beq.n	80008b6 <EE_VerifyPageFullyErased+0x2a>
    {
      
      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 80008b0:	2300      	movs	r3, #0
 80008b2:	60fb      	str	r3, [r7, #12]

      break;
 80008b4:	e006      	b.n	80008c4 <EE_VerifyPageFullyErased+0x38>
    }
    /* Next address location */
    Address = Address + 4;
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	3304      	adds	r3, #4
 80008ba:	607b      	str	r3, [r7, #4]
  while (Address <= PAGE0_END_ADDRESS)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <EE_VerifyPageFullyErased+0x48>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d3ed      	bcc.n	80008a0 <EE_VerifyPageFullyErased+0x14>
  }
  
  /* Return ReadStatus value: (0: Page not erased, 1: Sector erased) */
  return ReadStatus;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	b29b      	uxth	r3, r3
}
 80008c8:	4618      	mov	r0, r3
 80008ca:	3714      	adds	r7, #20
 80008cc:	46bd      	mov	sp, r7
 80008ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d2:	4770      	bx	lr
 80008d4:	0800c000 	.word	0x0800c000

080008d8 <EE_ReadVariable>:
  *           - 0: if variable was found
  *           - 1: if the variable was not found
  *           - NO_VALID_PAGE: if no valid page was found.
  */
uint16_t EE_ReadVariable(uint16_t VirtAddress, uint16_t* Data)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b086      	sub	sp, #24
 80008dc:	af00      	add	r7, sp, #0
 80008de:	4603      	mov	r3, r0
 80008e0:	6039      	str	r1, [r7, #0]
 80008e2:	80fb      	strh	r3, [r7, #6]
  uint16_t ValidPage = PAGE0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	81fb      	strh	r3, [r7, #14]
  uint16_t AddressValue = 0x5555, ReadStatus = 1;
 80008e8:	f245 5355 	movw	r3, #21845	; 0x5555
 80008ec:	81bb      	strh	r3, [r7, #12]
 80008ee:	2301      	movs	r3, #1
 80008f0:	82fb      	strh	r3, [r7, #22]
  uint32_t Address = EEPROM_START_ADDRESS, PageStartAddress = EEPROM_START_ADDRESS;
 80008f2:	4b1c      	ldr	r3, [pc, #112]	; (8000964 <EE_ReadVariable+0x8c>)
 80008f4:	613b      	str	r3, [r7, #16]
 80008f6:	4b1b      	ldr	r3, [pc, #108]	; (8000964 <EE_ReadVariable+0x8c>)
 80008f8:	60bb      	str	r3, [r7, #8]

  /* Get active Page for read operation */
  ValidPage = EE_FindValidPage(READ_FROM_VALID_PAGE);
 80008fa:	2000      	movs	r0, #0
 80008fc:	f000 f888 	bl	8000a10 <EE_FindValidPage>
 8000900:	4603      	mov	r3, r0
 8000902:	81fb      	strh	r3, [r7, #14]

  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000904:	89fb      	ldrh	r3, [r7, #14]
 8000906:	2bab      	cmp	r3, #171	; 0xab
 8000908:	d101      	bne.n	800090e <EE_ReadVariable+0x36>
  {
    return  NO_VALID_PAGE;
 800090a:	23ab      	movs	r3, #171	; 0xab
 800090c:	e025      	b.n	800095a <EE_ReadVariable+0x82>
  }

  /* Get the valid Page start Address */
  PageStartAddress = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 800090e:	89fb      	ldrh	r3, [r7, #14]
 8000910:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000914:	3302      	adds	r3, #2
 8000916:	039b      	lsls	r3, r3, #14
 8000918:	60bb      	str	r3, [r7, #8]

  /* Get the valid Page end Address */
  Address = (uint32_t)((EEPROM_START_ADDRESS - 2) + (uint32_t)((1 + ValidPage) * PAGE_SIZE));
 800091a:	89fb      	ldrh	r3, [r7, #14]
 800091c:	3301      	adds	r3, #1
 800091e:	039a      	lsls	r2, r3, #14
 8000920:	4b11      	ldr	r3, [pc, #68]	; (8000968 <EE_ReadVariable+0x90>)
 8000922:	4413      	add	r3, r2
 8000924:	613b      	str	r3, [r7, #16]

  /* Check each active page address starting from end */
  while (Address > (PageStartAddress + 2))
 8000926:	e012      	b.n	800094e <EE_ReadVariable+0x76>
  {
    /* Get the current location content to be compared with virtual address */
    AddressValue = (*(__IO uint16_t*)Address);
 8000928:	693b      	ldr	r3, [r7, #16]
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	81bb      	strh	r3, [r7, #12]

    /* Compare the read address with the virtual address */
    if (AddressValue == VirtAddress)
 800092e:	89ba      	ldrh	r2, [r7, #12]
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	429a      	cmp	r2, r3
 8000934:	d108      	bne.n	8000948 <EE_ReadVariable+0x70>
    {
      /* Get content of Address-2 which is variable value */
      *Data = (*(__IO uint16_t*)(Address - 2));
 8000936:	693b      	ldr	r3, [r7, #16]
 8000938:	3b02      	subs	r3, #2
 800093a:	881b      	ldrh	r3, [r3, #0]
 800093c:	b29a      	uxth	r2, r3
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	801a      	strh	r2, [r3, #0]

      /* In case variable value is read, reset ReadStatus flag */
      ReadStatus = 0;
 8000942:	2300      	movs	r3, #0
 8000944:	82fb      	strh	r3, [r7, #22]

      break;
 8000946:	e007      	b.n	8000958 <EE_ReadVariable+0x80>
    }
    else
    {
      /* Next address location */
      Address = Address - 4;
 8000948:	693b      	ldr	r3, [r7, #16]
 800094a:	3b04      	subs	r3, #4
 800094c:	613b      	str	r3, [r7, #16]
  while (Address > (PageStartAddress + 2))
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	3302      	adds	r3, #2
 8000952:	693a      	ldr	r2, [r7, #16]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8e7      	bhi.n	8000928 <EE_ReadVariable+0x50>
    }
  }

  /* Return ReadStatus value: (0: variable exist, 1: variable doesn't exist) */
  return ReadStatus;
 8000958:	8afb      	ldrh	r3, [r7, #22]
}
 800095a:	4618      	mov	r0, r3
 800095c:	3718      	adds	r7, #24
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	08008000 	.word	0x08008000
 8000968:	08007ffe 	.word	0x08007ffe

0800096c <EE_Format>:
  * @param  None
  * @retval Status of the last operation (Flash write or erase) done during
  *         EEPROM formating
  */
static HAL_StatusTypeDef EE_Format(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b088      	sub	sp, #32
 8000970:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000972:	2300      	movs	r3, #0
 8000974:	77fb      	strb	r3, [r7, #31]
  uint32_t SectorError = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	61bb      	str	r3, [r7, #24]
  FLASH_EraseInitTypeDef pEraseInit;

  pEraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;  
 800097a:	2300      	movs	r3, #0
 800097c:	607b      	str	r3, [r7, #4]
  pEraseInit.Sector = PAGE0_ID;
 800097e:	2302      	movs	r3, #2
 8000980:	60fb      	str	r3, [r7, #12]
  pEraseInit.NbSectors = 1;
 8000982:	2301      	movs	r3, #1
 8000984:	613b      	str	r3, [r7, #16]
  pEraseInit.VoltageRange = VOLTAGE_RANGE;
 8000986:	2302      	movs	r3, #2
 8000988:	617b      	str	r3, [r7, #20]
  /* Erase Page0 */
  if(!EE_VerifyPageFullyErased(PAGE0_BASE_ADDRESS))
 800098a:	481f      	ldr	r0, [pc, #124]	; (8000a08 <EE_Format+0x9c>)
 800098c:	f7ff ff7e 	bl	800088c <EE_VerifyPageFullyErased>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d10d      	bne.n	80009b2 <EE_Format+0x46>
  {
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 8000996:	f107 0218 	add.w	r2, r7, #24
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	4611      	mov	r1, r2
 800099e:	4618      	mov	r0, r3
 80009a0:	f001 fab8 	bl	8001f14 <HAL_FLASHEx_Erase>
 80009a4:	4603      	mov	r3, r0
 80009a6:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80009a8:	7ffb      	ldrb	r3, [r7, #31]
 80009aa:	2b00      	cmp	r3, #0
 80009ac:	d001      	beq.n	80009b2 <EE_Format+0x46>
    {
      return FlashStatus;
 80009ae:	7ffb      	ldrb	r3, [r7, #31]
 80009b0:	e025      	b.n	80009fe <EE_Format+0x92>
    }
  }
  /* Set Page0 as valid page: Write VALID_PAGE at Page0 base address */
  FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, PAGE0_BASE_ADDRESS, VALID_PAGE); 
 80009b2:	f04f 0200 	mov.w	r2, #0
 80009b6:	f04f 0300 	mov.w	r3, #0
 80009ba:	4913      	ldr	r1, [pc, #76]	; (8000a08 <EE_Format+0x9c>)
 80009bc:	2001      	movs	r0, #1
 80009be:	f001 f8f3 	bl	8001ba8 <HAL_FLASH_Program>
 80009c2:	4603      	mov	r3, r0
 80009c4:	77fb      	strb	r3, [r7, #31]
  /* If program operation was failed, a Flash error code is returned */
  if (FlashStatus != HAL_OK)
 80009c6:	7ffb      	ldrb	r3, [r7, #31]
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <EE_Format+0x64>
  {
    return FlashStatus;
 80009cc:	7ffb      	ldrb	r3, [r7, #31]
 80009ce:	e016      	b.n	80009fe <EE_Format+0x92>
  }

  pEraseInit.Sector = PAGE1_ID;
 80009d0:	2303      	movs	r3, #3
 80009d2:	60fb      	str	r3, [r7, #12]
  /* Erase Page1 */
  if(!EE_VerifyPageFullyErased(PAGE1_BASE_ADDRESS))
 80009d4:	480d      	ldr	r0, [pc, #52]	; (8000a0c <EE_Format+0xa0>)
 80009d6:	f7ff ff59 	bl	800088c <EE_VerifyPageFullyErased>
 80009da:	4603      	mov	r3, r0
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d10d      	bne.n	80009fc <EE_Format+0x90>
  {  
    FlashStatus = HAL_FLASHEx_Erase(&pEraseInit, &SectorError); 
 80009e0:	f107 0218 	add.w	r2, r7, #24
 80009e4:	1d3b      	adds	r3, r7, #4
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f001 fa93 	bl	8001f14 <HAL_FLASHEx_Erase>
 80009ee:	4603      	mov	r3, r0
 80009f0:	77fb      	strb	r3, [r7, #31]
    /* If erase operation was failed, a Flash error code is returned */
    if (FlashStatus != HAL_OK)
 80009f2:	7ffb      	ldrb	r3, [r7, #31]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <EE_Format+0x90>
    {
      return FlashStatus;
 80009f8:	7ffb      	ldrb	r3, [r7, #31]
 80009fa:	e000      	b.n	80009fe <EE_Format+0x92>
    }
  }
  
  return HAL_OK;
 80009fc:	2300      	movs	r3, #0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3720      	adds	r7, #32
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	08008000 	.word	0x08008000
 8000a0c:	0800c000 	.word	0x0800c000

08000a10 <EE_FindValidPage>:
  *     @arg WRITE_IN_VALID_PAGE: write operation from valid page
  * @retval Valid page number (PAGE or PAGE1) or NO_VALID_PAGE in case
  *   of no valid page was found
  */
static uint16_t EE_FindValidPage(uint8_t Operation)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	71fb      	strb	r3, [r7, #7]
  uint16_t PageStatus0 = 6, PageStatus1 = 6;
 8000a1a:	2306      	movs	r3, #6
 8000a1c:	81fb      	strh	r3, [r7, #14]
 8000a1e:	2306      	movs	r3, #6
 8000a20:	81bb      	strh	r3, [r7, #12]

  /* Get Page0 actual status */
  PageStatus0 = (*(__IO uint16_t*)PAGE0_BASE_ADDRESS);
 8000a22:	4b1c      	ldr	r3, [pc, #112]	; (8000a94 <EE_FindValidPage+0x84>)
 8000a24:	881b      	ldrh	r3, [r3, #0]
 8000a26:	81fb      	strh	r3, [r7, #14]

  /* Get Page1 actual status */
  PageStatus1 = (*(__IO uint16_t*)PAGE1_BASE_ADDRESS);
 8000a28:	4b1b      	ldr	r3, [pc, #108]	; (8000a98 <EE_FindValidPage+0x88>)
 8000a2a:	881b      	ldrh	r3, [r3, #0]
 8000a2c:	81bb      	strh	r3, [r7, #12]

  /* Write or read operation */
  switch (Operation)
 8000a2e:	79fb      	ldrb	r3, [r7, #7]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d01b      	beq.n	8000a6c <EE_FindValidPage+0x5c>
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d125      	bne.n	8000a84 <EE_FindValidPage+0x74>
  {
    case WRITE_IN_VALID_PAGE:   /* ---- Write operation ---- */
      if (PageStatus1 == VALID_PAGE)
 8000a38:	89bb      	ldrh	r3, [r7, #12]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d108      	bne.n	8000a50 <EE_FindValidPage+0x40>
      {
        /* Page0 receiving data */
        if (PageStatus0 == RECEIVE_DATA)
 8000a3e:	89fb      	ldrh	r3, [r7, #14]
 8000a40:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000a44:	4293      	cmp	r3, r2
 8000a46:	d101      	bne.n	8000a4c <EE_FindValidPage+0x3c>
        {
          return PAGE0;         /* Page0 valid */
 8000a48:	2300      	movs	r3, #0
 8000a4a:	e01c      	b.n	8000a86 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE1;         /* Page1 valid */
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e01a      	b.n	8000a86 <EE_FindValidPage+0x76>
        }
      }
      else if (PageStatus0 == VALID_PAGE)
 8000a50:	89fb      	ldrh	r3, [r7, #14]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d108      	bne.n	8000a68 <EE_FindValidPage+0x58>
      {
        /* Page1 receiving data */
        if (PageStatus1 == RECEIVE_DATA)
 8000a56:	89bb      	ldrh	r3, [r7, #12]
 8000a58:	f64e 62ee 	movw	r2, #61166	; 0xeeee
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d101      	bne.n	8000a64 <EE_FindValidPage+0x54>
        {
          return PAGE1;         /* Page1 valid */
 8000a60:	2301      	movs	r3, #1
 8000a62:	e010      	b.n	8000a86 <EE_FindValidPage+0x76>
        }
        else
        {
          return PAGE0;         /* Page0 valid */
 8000a64:	2300      	movs	r3, #0
 8000a66:	e00e      	b.n	8000a86 <EE_FindValidPage+0x76>
        }
      }
      else
      {
        return NO_VALID_PAGE;   /* No valid Page */
 8000a68:	23ab      	movs	r3, #171	; 0xab
 8000a6a:	e00c      	b.n	8000a86 <EE_FindValidPage+0x76>
      }

    case READ_FROM_VALID_PAGE:  /* ---- Read operation ---- */
      if (PageStatus0 == VALID_PAGE)
 8000a6c:	89fb      	ldrh	r3, [r7, #14]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d101      	bne.n	8000a76 <EE_FindValidPage+0x66>
      {
        return PAGE0;           /* Page0 valid */
 8000a72:	2300      	movs	r3, #0
 8000a74:	e007      	b.n	8000a86 <EE_FindValidPage+0x76>
      }
      else if (PageStatus1 == VALID_PAGE)
 8000a76:	89bb      	ldrh	r3, [r7, #12]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d101      	bne.n	8000a80 <EE_FindValidPage+0x70>
      {
        return PAGE1;           /* Page1 valid */
 8000a7c:	2301      	movs	r3, #1
 8000a7e:	e002      	b.n	8000a86 <EE_FindValidPage+0x76>
      }
      else
      {
        return NO_VALID_PAGE ;  /* No valid Page */
 8000a80:	23ab      	movs	r3, #171	; 0xab
 8000a82:	e000      	b.n	8000a86 <EE_FindValidPage+0x76>
      }

    default:
      return PAGE0;             /* Page0 valid */
 8000a84:	2300      	movs	r3, #0
  }
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3714      	adds	r7, #20
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	08008000 	.word	0x08008000
 8000a98:	0800c000 	.word	0x0800c000

08000a9c <EE_VerifyPageFullWriteVariable>:
  *           - PAGE_FULL: if valid page is full
  *           - NO_VALID_PAGE: if no valid page was found
  *           - Flash error code: on write Flash error
  */
static uint16_t EE_VerifyPageFullWriteVariable(uint16_t VirtAddress, uint16_t Data)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	460a      	mov	r2, r1
 8000aa6:	80fb      	strh	r3, [r7, #6]
 8000aa8:	4613      	mov	r3, r2
 8000aaa:	80bb      	strh	r3, [r7, #4]
  HAL_StatusTypeDef FlashStatus = HAL_OK;
 8000aac:	2300      	movs	r3, #0
 8000aae:	74fb      	strb	r3, [r7, #19]
  uint16_t ValidPage = PAGE0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	823b      	strh	r3, [r7, #16]
  uint32_t Address = EEPROM_START_ADDRESS, PageEndAddress = EEPROM_START_ADDRESS+PAGE_SIZE;
 8000ab4:	4b23      	ldr	r3, [pc, #140]	; (8000b44 <EE_VerifyPageFullWriteVariable+0xa8>)
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	4b23      	ldr	r3, [pc, #140]	; (8000b48 <EE_VerifyPageFullWriteVariable+0xac>)
 8000aba:	60fb      	str	r3, [r7, #12]

  /* Get valid Page for write operation */
  ValidPage = EE_FindValidPage(WRITE_IN_VALID_PAGE);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f7ff ffa7 	bl	8000a10 <EE_FindValidPage>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	823b      	strh	r3, [r7, #16]
  
  /* Check if there is no valid page */
  if (ValidPage == NO_VALID_PAGE)
 8000ac6:	8a3b      	ldrh	r3, [r7, #16]
 8000ac8:	2bab      	cmp	r3, #171	; 0xab
 8000aca:	d101      	bne.n	8000ad0 <EE_VerifyPageFullWriteVariable+0x34>
  {
    return  NO_VALID_PAGE;
 8000acc:	23ab      	movs	r3, #171	; 0xab
 8000ace:	e035      	b.n	8000b3c <EE_VerifyPageFullWriteVariable+0xa0>
  }

  /* Get the valid Page start Address */
  Address = (uint32_t)(EEPROM_START_ADDRESS + (uint32_t)(ValidPage * PAGE_SIZE));
 8000ad0:	8a3b      	ldrh	r3, [r7, #16]
 8000ad2:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	039b      	lsls	r3, r3, #14
 8000ada:	617b      	str	r3, [r7, #20]

  /* Get the valid Page end Address */
  PageEndAddress = (uint32_t)((EEPROM_START_ADDRESS - 1) + (uint32_t)((ValidPage + 1) * PAGE_SIZE));
 8000adc:	8a3b      	ldrh	r3, [r7, #16]
 8000ade:	3301      	adds	r3, #1
 8000ae0:	039a      	lsls	r2, r3, #14
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <EE_VerifyPageFullWriteVariable+0xb0>)
 8000ae4:	4413      	add	r3, r2
 8000ae6:	60fb      	str	r3, [r7, #12]

  /* Check each active page address starting from begining */
  while (Address < PageEndAddress)
 8000ae8:	e023      	b.n	8000b32 <EE_VerifyPageFullWriteVariable+0x96>
  {
    /* Verify if Address and Address+2 contents are 0xFFFFFFFF */
    if ((*(__IO uint32_t*)Address) == 0xFFFFFFFF)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af2:	d11b      	bne.n	8000b2c <EE_VerifyPageFullWriteVariable+0x90>
    {
      /* Set variable data */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address, Data);       
 8000af4:	88ba      	ldrh	r2, [r7, #4]
 8000af6:	f04f 0300 	mov.w	r3, #0
 8000afa:	6979      	ldr	r1, [r7, #20]
 8000afc:	2001      	movs	r0, #1
 8000afe:	f001 f853 	bl	8001ba8 <HAL_FLASH_Program>
 8000b02:	4603      	mov	r3, r0
 8000b04:	74fb      	strb	r3, [r7, #19]
      /* If program operation was failed, a Flash error code is returned */
      if (FlashStatus != HAL_OK)
 8000b06:	7cfb      	ldrb	r3, [r7, #19]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d002      	beq.n	8000b12 <EE_VerifyPageFullWriteVariable+0x76>
      {
        return FlashStatus;
 8000b0c:	7cfb      	ldrb	r3, [r7, #19]
 8000b0e:	b29b      	uxth	r3, r3
 8000b10:	e014      	b.n	8000b3c <EE_VerifyPageFullWriteVariable+0xa0>
      }
      /* Set variable virtual address */
      FlashStatus = HAL_FLASH_Program(TYPEPROGRAM_HALFWORD, Address + 2, VirtAddress);       
 8000b12:	697b      	ldr	r3, [r7, #20]
 8000b14:	1c99      	adds	r1, r3, #2
 8000b16:	88fa      	ldrh	r2, [r7, #6]
 8000b18:	f04f 0300 	mov.w	r3, #0
 8000b1c:	2001      	movs	r0, #1
 8000b1e:	f001 f843 	bl	8001ba8 <HAL_FLASH_Program>
 8000b22:	4603      	mov	r3, r0
 8000b24:	74fb      	strb	r3, [r7, #19]
      /* Return program operation status */
      return FlashStatus;
 8000b26:	7cfb      	ldrb	r3, [r7, #19]
 8000b28:	b29b      	uxth	r3, r3
 8000b2a:	e007      	b.n	8000b3c <EE_VerifyPageFullWriteVariable+0xa0>
    }
    else
    {
      /* Next address location */
      Address = Address + 4;
 8000b2c:	697b      	ldr	r3, [r7, #20]
 8000b2e:	3304      	adds	r3, #4
 8000b30:	617b      	str	r3, [r7, #20]
  while (Address < PageEndAddress)
 8000b32:	697a      	ldr	r2, [r7, #20]
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	429a      	cmp	r2, r3
 8000b38:	d3d7      	bcc.n	8000aea <EE_VerifyPageFullWriteVariable+0x4e>
    }
  }

  /* Return PAGE_FULL in case the valid page is full */
  return PAGE_FULL;
 8000b3a:	2380      	movs	r3, #128	; 0x80
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3718      	adds	r7, #24
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	08008000 	.word	0x08008000
 8000b48:	0800c000 	.word	0x0800c000
 8000b4c:	08007fff 	.word	0x08007fff

08000b50 <Send_Bluettoh_Data>:
{
	HAL_UART_Transmit(&huart2,ch,numElements,10);
}

void Send_Bluettoh_Data(uint8_t *ch, size_t numElements)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
 8000b58:	6039      	str	r1, [r7, #0]
	HAL_UART_Transmit(&huart1,ch,numElements,10);
 8000b5a:	683b      	ldr	r3, [r7, #0]
 8000b5c:	b29a      	uxth	r2, r3
 8000b5e:	230a      	movs	r3, #10
 8000b60:	6879      	ldr	r1, [r7, #4]
 8000b62:	4803      	ldr	r0, [pc, #12]	; (8000b70 <Send_Bluettoh_Data+0x20>)
 8000b64:	f003 fd97 	bl	8004696 <HAL_UART_Transmit>
}
 8000b68:	bf00      	nop
 8000b6a:	3708      	adds	r7, #8
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	200000f0 	.word	0x200000f0

08000b74 <GetConfigDispenserTime>:
      }
  } 
}

void GetConfigDispenserTime(uint8_t* data)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	73fb      	strb	r3, [r7, #15]
 8000b80:	e01c      	b.n	8000bbc <GetConfigDispenserTime+0x48>
  {
	  if((EE_ReadVariable(VirtAddVarTab[i],  &VarDataTab[i])) != HAL_OK)
 8000b82:	7bfb      	ldrb	r3, [r7, #15]
 8000b84:	4a11      	ldr	r2, [pc, #68]	; (8000bcc <GetConfigDispenserTime+0x58>)
 8000b86:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8000b8a:	7bfb      	ldrb	r3, [r7, #15]
 8000b8c:	005b      	lsls	r3, r3, #1
 8000b8e:	4910      	ldr	r1, [pc, #64]	; (8000bd0 <GetConfigDispenserTime+0x5c>)
 8000b90:	440b      	add	r3, r1
 8000b92:	4619      	mov	r1, r3
 8000b94:	4610      	mov	r0, r2
 8000b96:	f7ff fe9f 	bl	80008d8 <EE_ReadVariable>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	2b00      	cmp	r3, #0
 8000b9e:	d001      	beq.n	8000ba4 <GetConfigDispenserTime+0x30>
	    {
	      uint8_t error[] = {9};
 8000ba0:	2309      	movs	r3, #9
 8000ba2:	733b      	strb	r3, [r7, #12]
	}
    data[i] = (uint8_t) VarDataTab[i];
 8000ba4:	7bfb      	ldrb	r3, [r7, #15]
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <GetConfigDispenserTime+0x5c>)
 8000ba8:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000bac:	7bfb      	ldrb	r3, [r7, #15]
 8000bae:	687a      	ldr	r2, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
  for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000bb6:	7bfb      	ldrb	r3, [r7, #15]
 8000bb8:	3301      	adds	r3, #1
 8000bba:	73fb      	strb	r3, [r7, #15]
 8000bbc:	7bfb      	ldrb	r3, [r7, #15]
 8000bbe:	2b05      	cmp	r3, #5
 8000bc0:	d9df      	bls.n	8000b82 <GetConfigDispenserTime+0xe>
  }

}
 8000bc2:	bf00      	nop
 8000bc4:	bf00      	nop
 8000bc6:	3710      	adds	r7, #16
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	20000064 	.word	0x20000064

08000bd4 <GetRTC>:
	HAL_RTC_SetTime(&hrtc, &sTime1, RTC_FORMAT_BCD);
	HAL_RTC_SetDate(&hrtc, &sDate1, RTC_FORMAT_BCD);
}

void GetRTC(uint8_t* data)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]

  HAL_RTC_GetTime(&hrtc, &sTime1, RTC_FORMAT_BCD);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	4915      	ldr	r1, [pc, #84]	; (8000c34 <GetRTC+0x60>)
 8000be0:	4815      	ldr	r0, [pc, #84]	; (8000c38 <GetRTC+0x64>)
 8000be2:	f002 fb1f 	bl	8003224 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate1, RTC_FORMAT_BCD);
 8000be6:	2201      	movs	r2, #1
 8000be8:	4914      	ldr	r1, [pc, #80]	; (8000c3c <GetRTC+0x68>)
 8000bea:	4813      	ldr	r0, [pc, #76]	; (8000c38 <GetRTC+0x64>)
 8000bec:	f002 fc1f 	bl	800342e <HAL_RTC_GetDate>

  data[0] = sDate1.Date;
 8000bf0:	4b12      	ldr	r3, [pc, #72]	; (8000c3c <GetRTC+0x68>)
 8000bf2:	789a      	ldrb	r2, [r3, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	701a      	strb	r2, [r3, #0]
  data[1] = sDate1.Month;
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <GetRTC+0x68>)
 8000bfe:	7852      	ldrb	r2, [r2, #1]
 8000c00:	701a      	strb	r2, [r3, #0]
  data[2] = sDate1.Year;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	3302      	adds	r3, #2
 8000c06:	4a0d      	ldr	r2, [pc, #52]	; (8000c3c <GetRTC+0x68>)
 8000c08:	78d2      	ldrb	r2, [r2, #3]
 8000c0a:	701a      	strb	r2, [r3, #0]
  data[3] = sTime1.Hours;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	3303      	adds	r3, #3
 8000c10:	4a08      	ldr	r2, [pc, #32]	; (8000c34 <GetRTC+0x60>)
 8000c12:	7812      	ldrb	r2, [r2, #0]
 8000c14:	701a      	strb	r2, [r3, #0]
  data[4] = sTime1.Minutes;
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <GetRTC+0x60>)
 8000c1c:	7852      	ldrb	r2, [r2, #1]
 8000c1e:	701a      	strb	r2, [r3, #0]
  data[5] = sTime1.Seconds;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3305      	adds	r3, #5
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <GetRTC+0x60>)
 8000c26:	7892      	ldrb	r2, [r2, #2]
 8000c28:	701a      	strb	r2, [r3, #0]

}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	200001e0 	.word	0x200001e0
 8000c38:	20000134 	.word	0x20000134
 8000c3c:	200000ec 	.word	0x200000ec

08000c40 <HAL_UART_RxCpltCallback>:
  Send_Bluettoh_Data(&data,sizeof(data));

}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART1){
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	4a09      	ldr	r2, [pc, #36]	; (8000c74 <HAL_UART_RxCpltCallback+0x34>)
 8000c4e:	4293      	cmp	r3, r2
 8000c50:	d10b      	bne.n	8000c6a <HAL_UART_RxCpltCallback+0x2a>
    memcpy(bluetooth_rxBuffer, UART1_rxBuffer, RXBUFFERSIZE * sizeof(uint8_t));
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <HAL_UART_RxCpltCallback+0x38>)
 8000c54:	4a09      	ldr	r2, [pc, #36]	; (8000c7c <HAL_UART_RxCpltCallback+0x3c>)
 8000c56:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c5a:	6018      	str	r0, [r3, #0]
 8000c5c:	3304      	adds	r3, #4
 8000c5e:	8019      	strh	r1, [r3, #0]
    HAL_UART_Receive_IT(&huart1,UART1_rxBuffer,RXBUFFERSIZE);
 8000c60:	2206      	movs	r2, #6
 8000c62:	4906      	ldr	r1, [pc, #24]	; (8000c7c <HAL_UART_RxCpltCallback+0x3c>)
 8000c64:	4806      	ldr	r0, [pc, #24]	; (8000c80 <HAL_UART_RxCpltCallback+0x40>)
 8000c66:	f003 fda8 	bl	80047ba <HAL_UART_Receive_IT>
  }
}
 8000c6a:	bf00      	nop
 8000c6c:	3708      	adds	r7, #8
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	40011000 	.word	0x40011000
 8000c78:	2000005c 	.word	0x2000005c
 8000c7c:	20000054 	.word	0x20000054
 8000c80:	200000f0 	.word	0x200000f0

08000c84 <HAL_RTC_AlarmAEventCallback>:

void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b088      	sub	sp, #32
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

	uint8_t dispenserTime[RXBUFFERSIZE] = {0};
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	617b      	str	r3, [r7, #20]
 8000c90:	2300      	movs	r3, #0
 8000c92:	833b      	strh	r3, [r7, #24]
	GetConfigDispenserTime(dispenserTime);
 8000c94:	f107 0314 	add.w	r3, r7, #20
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff ff6b 	bl	8000b74 <GetConfigDispenserTime>

	uint8_t rtcTime[RXBUFFERSIZE] = {0};
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	60fb      	str	r3, [r7, #12]
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	823b      	strh	r3, [r7, #16]
	GetRTC(rtcTime);
 8000ca6:	f107 030c 	add.w	r3, r7, #12
 8000caa:	4618      	mov	r0, r3
 8000cac:	f7ff ff92 	bl	8000bd4 <GetRTC>

	bool arrayEqual = true;
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	77fb      	strb	r3, [r7, #31]

	for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	77bb      	strb	r3, [r7, #30]
 8000cb8:	e016      	b.n	8000ce8 <HAL_RTC_AlarmAEventCallback+0x64>
	{
		uint8_t aux1 = dispenserTime[i];
 8000cba:	7fbb      	ldrb	r3, [r7, #30]
 8000cbc:	f107 0220 	add.w	r2, r7, #32
 8000cc0:	4413      	add	r3, r2
 8000cc2:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8000cc6:	777b      	strb	r3, [r7, #29]
		uint8_t aux2 = rtcTime[i];
 8000cc8:	7fbb      	ldrb	r3, [r7, #30]
 8000cca:	f107 0220 	add.w	r2, r7, #32
 8000cce:	4413      	add	r3, r2
 8000cd0:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000cd4:	773b      	strb	r3, [r7, #28]
		if(aux1 != aux2)
 8000cd6:	7f7a      	ldrb	r2, [r7, #29]
 8000cd8:	7f3b      	ldrb	r3, [r7, #28]
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	d001      	beq.n	8000ce2 <HAL_RTC_AlarmAEventCallback+0x5e>
		{
			arrayEqual = false;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	77fb      	strb	r3, [r7, #31]
	for(uint8_t i = 0; i < RXBUFFERSIZE; i++)
 8000ce2:	7fbb      	ldrb	r3, [r7, #30]
 8000ce4:	3301      	adds	r3, #1
 8000ce6:	77bb      	strb	r3, [r7, #30]
 8000ce8:	7fbb      	ldrb	r3, [r7, #30]
 8000cea:	2b05      	cmp	r3, #5
 8000cec:	d9e5      	bls.n	8000cba <HAL_RTC_AlarmAEventCallback+0x36>
		}
	}

	if(arrayEqual)
 8000cee:	7ffb      	ldrb	r3, [r7, #31]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d002      	beq.n	8000cfa <HAL_RTC_AlarmAEventCallback+0x76>
	{
		target_position = 1;
 8000cf4:	4b03      	ldr	r3, [pc, #12]	; (8000d04 <HAL_RTC_AlarmAEventCallback+0x80>)
 8000cf6:	2201      	movs	r2, #1
 8000cf8:	801a      	strh	r2, [r3, #0]
		//StartDispenserRotationProcess(0);
	}
}
 8000cfa:	bf00      	nop
 8000cfc:	3720      	adds	r7, #32
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
 8000d02:	bf00      	nop
 8000d04:	2000008e 	.word	0x2000008e

08000d08 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	4603      	mov	r3, r0
 8000d10:	80fb      	strh	r3, [r7, #6]

	counterOutside++; //For testing only
 8000d12:	4b1e      	ldr	r3, [pc, #120]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	3301      	adds	r3, #1
 8000d18:	4a1c      	ldr	r2, [pc, #112]	; (8000d8c <HAL_GPIO_EXTI_Callback+0x84>)
 8000d1a:	6013      	str	r3, [r2, #0]
	currentMillis = HAL_GetTick();
 8000d1c:	f000 fd94 	bl	8001848 <HAL_GetTick>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4a1b      	ldr	r2, [pc, #108]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d24:	6013      	str	r3, [r2, #0]
    if(GPIO_Pin == GPIO_PIN_8 && (currentMillis - previousMillis > 300))
 8000d26:	88fb      	ldrh	r3, [r7, #6]
 8000d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000d2c:	d129      	bne.n	8000d82 <HAL_GPIO_EXTI_Callback+0x7a>
 8000d2e:	4b18      	ldr	r3, [pc, #96]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d30:	681a      	ldr	r2, [r3, #0]
 8000d32:	4b18      	ldr	r3, [pc, #96]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	1ad3      	subs	r3, r2, r3
 8000d38:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8000d3c:	d921      	bls.n	8000d82 <HAL_GPIO_EXTI_Callback+0x7a>
    {
    	counterInside++; //For testing only
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	3301      	adds	r3, #1
 8000d44:	4a14      	ldr	r2, [pc, #80]	; (8000d98 <HAL_GPIO_EXTI_Callback+0x90>)
 8000d46:	6013      	str	r3, [r2, #0]
    	position = position + 1;
 8000d48:	4b14      	ldr	r3, [pc, #80]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x94>)
 8000d4a:	881b      	ldrh	r3, [r3, #0]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	b29a      	uxth	r2, r3
 8000d50:	4b12      	ldr	r3, [pc, #72]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x94>)
 8000d52:	801a      	strh	r2, [r3, #0]
    	if(target_position == position)
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x98>)
 8000d56:	881a      	ldrh	r2, [r3, #0]
 8000d58:	4b10      	ldr	r3, [pc, #64]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x94>)
 8000d5a:	881b      	ldrh	r3, [r3, #0]
 8000d5c:	429a      	cmp	r2, r3
 8000d5e:	d103      	bne.n	8000d68 <HAL_GPIO_EXTI_Callback+0x60>
    	{
    		StopDispenserRotationProcess();
 8000d60:	f000 f840 	bl	8000de4 <StopDispenserRotationProcess>
    		__NOP();
 8000d64:	bf00      	nop
 8000d66:	e008      	b.n	8000d7a <HAL_GPIO_EXTI_Callback+0x72>
    	}
    	else if(position > target_position)
 8000d68:	4b0c      	ldr	r3, [pc, #48]	; (8000d9c <HAL_GPIO_EXTI_Callback+0x94>)
 8000d6a:	881a      	ldrh	r2, [r3, #0]
 8000d6c:	4b0c      	ldr	r3, [pc, #48]	; (8000da0 <HAL_GPIO_EXTI_Callback+0x98>)
 8000d6e:	881b      	ldrh	r3, [r3, #0]
 8000d70:	429a      	cmp	r2, r3
 8000d72:	d902      	bls.n	8000d7a <HAL_GPIO_EXTI_Callback+0x72>
    	{
    		StopDispenserRotationProcess();
 8000d74:	f000 f836 	bl	8000de4 <StopDispenserRotationProcess>
    		__NOP();
 8000d78:	bf00      	nop

    	} else {
    		//StartDispenserRotationProcess(target_position);
    	}
    	previousMillis = currentMillis;
 8000d7a:	4b05      	ldr	r3, [pc, #20]	; (8000d90 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a05      	ldr	r2, [pc, #20]	; (8000d94 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000d80:	6013      	str	r3, [r2, #0]
    }

}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	2000009c 	.word	0x2000009c
 8000d90:	20000098 	.word	0x20000098
 8000d94:	20000094 	.word	0x20000094
 8000d98:	200000a0 	.word	0x200000a0
 8000d9c:	2000008c 	.word	0x2000008c
 8000da0:	2000008e 	.word	0x2000008e

08000da4 <StartDispenserRotationProcess>:

void StartDispenserRotationProcess(uint8_t position)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	71fb      	strb	r3, [r7, #7]
  rotating = true;
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <StartDispenserRotationProcess+0x30>)
 8000db0:	2201      	movs	r2, #1
 8000db2:	701a      	strb	r2, [r3, #0]
  target_position = position;
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	b29a      	uxth	r2, r3
 8000db8:	4b07      	ldr	r3, [pc, #28]	; (8000dd8 <StartDispenserRotationProcess+0x34>)
 8000dba:	801a      	strh	r2, [r3, #0]
  TIM3->CCR2 = 60;
 8000dbc:	4b07      	ldr	r3, [pc, #28]	; (8000ddc <StartDispenserRotationProcess+0x38>)
 8000dbe:	223c      	movs	r2, #60	; 0x3c
 8000dc0:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 8000dc2:	2104      	movs	r1, #4
 8000dc4:	4806      	ldr	r0, [pc, #24]	; (8000de0 <StartDispenserRotationProcess+0x3c>)
 8000dc6:	f002 fe41 	bl	8003a4c <HAL_TIM_PWM_Start>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}
 8000dd2:	bf00      	nop
 8000dd4:	20000090 	.word	0x20000090
 8000dd8:	2000008e 	.word	0x2000008e
 8000ddc:	40000400 	.word	0x40000400
 8000de0:	200000a4 	.word	0x200000a4

08000de4 <StopDispenserRotationProcess>:

void StopDispenserRotationProcess()
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  rotating = false;
 8000de8:	4b04      	ldr	r3, [pc, #16]	; (8000dfc <StopDispenserRotationProcess+0x18>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	701a      	strb	r2, [r3, #0]
  HAL_TIM_PWM_Stop(&htim3, TIM_CHANNEL_2);
 8000dee:	2104      	movs	r1, #4
 8000df0:	4803      	ldr	r0, [pc, #12]	; (8000e00 <StopDispenserRotationProcess+0x1c>)
 8000df2:	f002 fedb 	bl	8003bac <HAL_TIM_PWM_Stop>
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	20000090 	.word	0x20000090
 8000e00:	200000a4 	.word	0x200000a4

08000e04 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b082      	sub	sp, #8
 8000e08:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e0a:	f000 fcb7 	bl	800177c <HAL_Init>

  /* USER CODE BEGIN Init */
  HAL_FLASH_Unlock();
 8000e0e:	f000 ff1f 	bl	8001c50 <HAL_FLASH_Unlock>
  if( EE_Init() != EE_OK)
 8000e12:	f7ff fb5b 	bl	80004cc <EE_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d006      	beq.n	8000e2a <main+0x26>
  {
    uint8_t data[] = {9};
 8000e1c:	2309      	movs	r3, #9
 8000e1e:	713b      	strb	r3, [r7, #4]
    Send_Bluettoh_Data(&data,sizeof(data));
 8000e20:	1d3b      	adds	r3, r7, #4
 8000e22:	2101      	movs	r1, #1
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff fe93 	bl	8000b50 <Send_Bluettoh_Data>
  }

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f819 	bl	8000e60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 fa37 	bl	80012a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000e32:	f000 fa0b 	bl	800124c <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000e36:	f000 f9df 	bl	80011f8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000e3a:	f000 f87f 	bl	8000f3c <MX_RTC_Init>
  MX_TIM3_Init();
 8000e3e:	f000 f95b 	bl	80010f8 <MX_TIM3_Init>
  MX_TIM1_Init();
 8000e42:	f000 f909 	bl	8001058 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,UART1_rxBuffer,RXBUFFERSIZE);
 8000e46:	2206      	movs	r2, #6
 8000e48:	4903      	ldr	r1, [pc, #12]	; (8000e58 <main+0x54>)
 8000e4a:	4804      	ldr	r0, [pc, #16]	; (8000e5c <main+0x58>)
 8000e4c:	f003 fcb5 	bl	80047ba <HAL_UART_Receive_IT>
  StartDispenserRotationProcess(5);
 8000e50:	2005      	movs	r0, #5
 8000e52:	f7ff ffa7 	bl	8000da4 <StartDispenserRotationProcess>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000e56:	e7fe      	b.n	8000e56 <main+0x52>
 8000e58:	20000054 	.word	0x20000054
 8000e5c:	200000f0 	.word	0x200000f0

08000e60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b094      	sub	sp, #80	; 0x50
 8000e64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e66:	f107 0320 	add.w	r3, r7, #32
 8000e6a:	2230      	movs	r2, #48	; 0x30
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f004 fbb0 	bl	80055d4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e74:	f107 030c 	add.w	r3, r7, #12
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
 8000e7e:	609a      	str	r2, [r3, #8]
 8000e80:	60da      	str	r2, [r3, #12]
 8000e82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
 8000e88:	4b2a      	ldr	r3, [pc, #168]	; (8000f34 <SystemClock_Config+0xd4>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	4a29      	ldr	r2, [pc, #164]	; (8000f34 <SystemClock_Config+0xd4>)
 8000e8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e92:	6413      	str	r3, [r2, #64]	; 0x40
 8000e94:	4b27      	ldr	r3, [pc, #156]	; (8000f34 <SystemClock_Config+0xd4>)
 8000e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e9c:	60bb      	str	r3, [r7, #8]
 8000e9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	607b      	str	r3, [r7, #4]
 8000ea4:	4b24      	ldr	r3, [pc, #144]	; (8000f38 <SystemClock_Config+0xd8>)
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000eac:	4a22      	ldr	r2, [pc, #136]	; (8000f38 <SystemClock_Config+0xd8>)
 8000eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	4b20      	ldr	r3, [pc, #128]	; (8000f38 <SystemClock_Config+0xd8>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000ec0:	230a      	movs	r3, #10
 8000ec2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ec4:	2301      	movs	r3, #1
 8000ec6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ed8:	2310      	movs	r3, #16
 8000eda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000edc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ee0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ee2:	2304      	movs	r3, #4
 8000ee4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ee6:	2307      	movs	r3, #7
 8000ee8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eea:	f107 0320 	add.w	r3, r7, #32
 8000eee:	4618      	mov	r0, r3
 8000ef0:	f001 fae8 	bl	80024c4 <HAL_RCC_OscConfig>
 8000ef4:	4603      	mov	r3, r0
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d001      	beq.n	8000efe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000efa:	f000 fa65 	bl	80013c8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000efe:	230f      	movs	r3, #15
 8000f00:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f02:	2302      	movs	r3, #2
 8000f04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f06:	2300      	movs	r3, #0
 8000f08:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000f0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f0e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f10:	2300      	movs	r3, #0
 8000f12:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f14:	f107 030c 	add.w	r3, r7, #12
 8000f18:	2102      	movs	r1, #2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f001 fd4a 	bl	80029b4 <HAL_RCC_ClockConfig>
 8000f20:	4603      	mov	r3, r0
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d001      	beq.n	8000f2a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000f26:	f000 fa4f 	bl	80013c8 <Error_Handler>
  }
}
 8000f2a:	bf00      	nop
 8000f2c:	3750      	adds	r7, #80	; 0x50
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40007000 	.word	0x40007000

08000f3c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b090      	sub	sp, #64	; 0x40
 8000f40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8000f42:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000f52:	2300      	movs	r3, #0
 8000f54:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000f56:	463b      	mov	r3, r7
 8000f58:	2228      	movs	r2, #40	; 0x28
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	4618      	mov	r0, r3
 8000f5e:	f004 fb39 	bl	80055d4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000f62:	4b3b      	ldr	r3, [pc, #236]	; (8001050 <MX_RTC_Init+0x114>)
 8000f64:	4a3b      	ldr	r2, [pc, #236]	; (8001054 <MX_RTC_Init+0x118>)
 8000f66:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000f68:	4b39      	ldr	r3, [pc, #228]	; (8001050 <MX_RTC_Init+0x114>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8000f6e:	4b38      	ldr	r3, [pc, #224]	; (8001050 <MX_RTC_Init+0x114>)
 8000f70:	227f      	movs	r2, #127	; 0x7f
 8000f72:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000f74:	4b36      	ldr	r3, [pc, #216]	; (8001050 <MX_RTC_Init+0x114>)
 8000f76:	22ff      	movs	r2, #255	; 0xff
 8000f78:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000f7a:	4b35      	ldr	r3, [pc, #212]	; (8001050 <MX_RTC_Init+0x114>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000f80:	4b33      	ldr	r3, [pc, #204]	; (8001050 <MX_RTC_Init+0x114>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000f86:	4b32      	ldr	r3, [pc, #200]	; (8001050 <MX_RTC_Init+0x114>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000f8c:	4830      	ldr	r0, [pc, #192]	; (8001050 <MX_RTC_Init+0x114>)
 8000f8e:	f001 fffb 	bl	8002f88 <HAL_RTC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_RTC_Init+0x60>
  {
    Error_Handler();
 8000f98:	f000 fa16 	bl	80013c8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x13;
 8000f9c:	2313      	movs	r3, #19
 8000f9e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x10;
 8000fa2:	2310      	movs	r3, #16
 8000fa4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000fa8:	2300      	movs	r3, #0
 8000faa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000fb6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fba:	2201      	movs	r2, #1
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	4824      	ldr	r0, [pc, #144]	; (8001050 <MX_RTC_Init+0x114>)
 8000fc0:	f002 f873 	bl	80030aa <HAL_RTC_SetTime>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <MX_RTC_Init+0x92>
  {
    Error_Handler();
 8000fca:	f000 f9fd 	bl	80013c8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8000fce:	2306      	movs	r3, #6
 8000fd0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_APRIL;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x23;
 8000fda:	2323      	movs	r3, #35	; 0x23
 8000fdc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000fe6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000fea:	2201      	movs	r2, #1
 8000fec:	4619      	mov	r1, r3
 8000fee:	4818      	ldr	r0, [pc, #96]	; (8001050 <MX_RTC_Init+0x114>)
 8000ff0:	f002 f976 	bl	80032e0 <HAL_RTC_SetDate>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_RTC_Init+0xc2>
  {
    Error_Handler();
 8000ffa:	f000 f9e5 	bl	80013c8 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001002:	2300      	movs	r3, #0
 8001004:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x1;
 8001006:	2301      	movs	r3, #1
 8001008:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800100a:	2300      	movs	r3, #0
 800100c:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800100e:	2300      	movs	r3, #0
 8001010:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_ALL;
 8001016:	f04f 3380 	mov.w	r3, #2155905152	; 0x80808080
 800101a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001020:	2300      	movs	r3, #0
 8001022:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001024:	2301      	movs	r3, #1
 8001026:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 800102a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001030:	463b      	mov	r3, r7
 8001032:	2201      	movs	r2, #1
 8001034:	4619      	mov	r1, r3
 8001036:	4806      	ldr	r0, [pc, #24]	; (8001050 <MX_RTC_Init+0x114>)
 8001038:	f002 fa48 	bl	80034cc <HAL_RTC_SetAlarm_IT>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d001      	beq.n	8001046 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001042:	f000 f9c1 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001046:	bf00      	nop
 8001048:	3740      	adds	r7, #64	; 0x40
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	20000134 	.word	0x20000134
 8001054:	40002800 	.word	0x40002800

08001058 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b086      	sub	sp, #24
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105e:	f107 0308 	add.w	r3, r7, #8
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
 8001066:	605a      	str	r2, [r3, #4]
 8001068:	609a      	str	r2, [r3, #8]
 800106a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800106c:	463b      	mov	r3, r7
 800106e:	2200      	movs	r2, #0
 8001070:	601a      	str	r2, [r3, #0]
 8001072:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001074:	4b1e      	ldr	r3, [pc, #120]	; (80010f0 <MX_TIM1_Init+0x98>)
 8001076:	4a1f      	ldr	r2, [pc, #124]	; (80010f4 <MX_TIM1_Init+0x9c>)
 8001078:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800107a:	4b1d      	ldr	r3, [pc, #116]	; (80010f0 <MX_TIM1_Init+0x98>)
 800107c:	2200      	movs	r2, #0
 800107e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001080:	4b1b      	ldr	r3, [pc, #108]	; (80010f0 <MX_TIM1_Init+0x98>)
 8001082:	2200      	movs	r2, #0
 8001084:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001086:	4b1a      	ldr	r3, [pc, #104]	; (80010f0 <MX_TIM1_Init+0x98>)
 8001088:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800108c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108e:	4b18      	ldr	r3, [pc, #96]	; (80010f0 <MX_TIM1_Init+0x98>)
 8001090:	2200      	movs	r2, #0
 8001092:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001094:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_TIM1_Init+0x98>)
 8001096:	2200      	movs	r2, #0
 8001098:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800109a:	4b15      	ldr	r3, [pc, #84]	; (80010f0 <MX_TIM1_Init+0x98>)
 800109c:	2200      	movs	r2, #0
 800109e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80010a0:	4813      	ldr	r0, [pc, #76]	; (80010f0 <MX_TIM1_Init+0x98>)
 80010a2:	f002 fc2b 	bl	80038fc <HAL_TIM_Base_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80010ac:	f000 f98c 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80010b6:	f107 0308 	add.w	r3, r7, #8
 80010ba:	4619      	mov	r1, r3
 80010bc:	480c      	ldr	r0, [pc, #48]	; (80010f0 <MX_TIM1_Init+0x98>)
 80010be:	f002 fe9b 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80010c8:	f000 f97e 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010cc:	2300      	movs	r3, #0
 80010ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010d0:	2300      	movs	r3, #0
 80010d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010d4:	463b      	mov	r3, r7
 80010d6:	4619      	mov	r1, r3
 80010d8:	4805      	ldr	r0, [pc, #20]	; (80010f0 <MX_TIM1_Init+0x98>)
 80010da:	f003 fa21 	bl	8004520 <HAL_TIMEx_MasterConfigSynchronization>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80010e4:	f000 f970 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	3718      	adds	r7, #24
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000154 	.word	0x20000154
 80010f4:	40010000 	.word	0x40010000

080010f8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b08e      	sub	sp, #56	; 0x38
 80010fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001102:	2200      	movs	r2, #0
 8001104:	601a      	str	r2, [r3, #0]
 8001106:	605a      	str	r2, [r3, #4]
 8001108:	609a      	str	r2, [r3, #8]
 800110a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800110c:	f107 0320 	add.w	r3, r7, #32
 8001110:	2200      	movs	r2, #0
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001116:	1d3b      	adds	r3, r7, #4
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]
 800111c:	605a      	str	r2, [r3, #4]
 800111e:	609a      	str	r2, [r3, #8]
 8001120:	60da      	str	r2, [r3, #12]
 8001122:	611a      	str	r2, [r3, #16]
 8001124:	615a      	str	r2, [r3, #20]
 8001126:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001128:	4b31      	ldr	r3, [pc, #196]	; (80011f0 <MX_TIM3_Init+0xf8>)
 800112a:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <MX_TIM3_Init+0xfc>)
 800112c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84;
 800112e:	4b30      	ldr	r3, [pc, #192]	; (80011f0 <MX_TIM3_Init+0xf8>)
 8001130:	2254      	movs	r2, #84	; 0x54
 8001132:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001134:	4b2e      	ldr	r3, [pc, #184]	; (80011f0 <MX_TIM3_Init+0xf8>)
 8001136:	2200      	movs	r2, #0
 8001138:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800113a:	4b2d      	ldr	r3, [pc, #180]	; (80011f0 <MX_TIM3_Init+0xf8>)
 800113c:	2264      	movs	r2, #100	; 0x64
 800113e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001140:	4b2b      	ldr	r3, [pc, #172]	; (80011f0 <MX_TIM3_Init+0xf8>)
 8001142:	2200      	movs	r2, #0
 8001144:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001146:	4b2a      	ldr	r3, [pc, #168]	; (80011f0 <MX_TIM3_Init+0xf8>)
 8001148:	2200      	movs	r2, #0
 800114a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800114c:	4828      	ldr	r0, [pc, #160]	; (80011f0 <MX_TIM3_Init+0xf8>)
 800114e:	f002 fbd5 	bl	80038fc <HAL_TIM_Base_Init>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001158:	f000 f936 	bl	80013c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800115c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001160:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001162:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001166:	4619      	mov	r1, r3
 8001168:	4821      	ldr	r0, [pc, #132]	; (80011f0 <MX_TIM3_Init+0xf8>)
 800116a:	f002 fe45 	bl	8003df8 <HAL_TIM_ConfigClockSource>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001174:	f000 f928 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001178:	481d      	ldr	r0, [pc, #116]	; (80011f0 <MX_TIM3_Init+0xf8>)
 800117a:	f002 fc0e 	bl	800399a <HAL_TIM_PWM_Init>
 800117e:	4603      	mov	r3, r0
 8001180:	2b00      	cmp	r3, #0
 8001182:	d001      	beq.n	8001188 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001184:	f000 f920 	bl	80013c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001188:	2300      	movs	r3, #0
 800118a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800118c:	2300      	movs	r3, #0
 800118e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001190:	f107 0320 	add.w	r3, r7, #32
 8001194:	4619      	mov	r1, r3
 8001196:	4816      	ldr	r0, [pc, #88]	; (80011f0 <MX_TIM3_Init+0xf8>)
 8001198:	f003 f9c2 	bl	8004520 <HAL_TIMEx_MasterConfigSynchronization>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80011a2:	f000 f911 	bl	80013c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM3_Init+0xf8>)
 80011be:	f002 fd59 	bl	8003c74 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80011c8:	f000 f8fe 	bl	80013c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2204      	movs	r2, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_TIM3_Init+0xf8>)
 80011d4:	f002 fd4e 	bl	8003c74 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM3_Init+0xea>
  {
    Error_Handler();
 80011de:	f000 f8f3 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_TIM3_Init+0xf8>)
 80011e4:	f000 f98a 	bl	80014fc <HAL_TIM_MspPostInit>

}
 80011e8:	bf00      	nop
 80011ea:	3738      	adds	r7, #56	; 0x38
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200000a4 	.word	0x200000a4
 80011f4:	40000400 	.word	0x40000400

080011f8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_USART1_UART_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001204:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001208:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_USART1_UART_Init+0x4c>)
 8001230:	f003 f9e4 	bl	80045fc <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800123a:	f000 f8c5 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200000f0 	.word	0x200000f0
 8001248:	40011000 	.word	0x40011000

0800124c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_USART2_UART_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_USART2_UART_Init+0x4c>)
 8001284:	f003 f9ba 	bl	80045fc <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f89b 	bl	80013c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	2000019c 	.word	0x2000019c
 800129c:	40004400 	.word	0x40004400

080012a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08a      	sub	sp, #40	; 0x28
 80012a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a6:	f107 0314 	add.w	r3, r7, #20
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
 80012ae:	605a      	str	r2, [r3, #4]
 80012b0:	609a      	str	r2, [r3, #8]
 80012b2:	60da      	str	r2, [r3, #12]
 80012b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b6:	2300      	movs	r3, #0
 80012b8:	613b      	str	r3, [r7, #16]
 80012ba:	4b3f      	ldr	r3, [pc, #252]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	4a3e      	ldr	r2, [pc, #248]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012c0:	f043 0304 	orr.w	r3, r3, #4
 80012c4:	6313      	str	r3, [r2, #48]	; 0x30
 80012c6:	4b3c      	ldr	r3, [pc, #240]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	f003 0304 	and.w	r3, r3, #4
 80012ce:	613b      	str	r3, [r7, #16]
 80012d0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
 80012d6:	4b38      	ldr	r3, [pc, #224]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	4a37      	ldr	r2, [pc, #220]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012e0:	6313      	str	r3, [r2, #48]	; 0x30
 80012e2:	4b35      	ldr	r3, [pc, #212]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ea:	60fb      	str	r3, [r7, #12]
 80012ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	2300      	movs	r3, #0
 80012f0:	60bb      	str	r3, [r7, #8]
 80012f2:	4b31      	ldr	r3, [pc, #196]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f6:	4a30      	ldr	r2, [pc, #192]	; (80013b8 <MX_GPIO_Init+0x118>)
 80012f8:	f043 0301 	orr.w	r3, r3, #1
 80012fc:	6313      	str	r3, [r2, #48]	; 0x30
 80012fe:	4b2e      	ldr	r3, [pc, #184]	; (80013b8 <MX_GPIO_Init+0x118>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	60bb      	str	r3, [r7, #8]
 8001308:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130a:	2300      	movs	r3, #0
 800130c:	607b      	str	r3, [r7, #4]
 800130e:	4b2a      	ldr	r3, [pc, #168]	; (80013b8 <MX_GPIO_Init+0x118>)
 8001310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001312:	4a29      	ldr	r2, [pc, #164]	; (80013b8 <MX_GPIO_Init+0x118>)
 8001314:	f043 0302 	orr.w	r3, r3, #2
 8001318:	6313      	str	r3, [r2, #48]	; 0x30
 800131a:	4b27      	ldr	r3, [pc, #156]	; (80013b8 <MX_GPIO_Init+0x118>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	f003 0302 	and.w	r3, r3, #2
 8001322:	607b      	str	r3, [r7, #4]
 8001324:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001326:	2200      	movs	r2, #0
 8001328:	2120      	movs	r1, #32
 800132a:	4824      	ldr	r0, [pc, #144]	; (80013bc <MX_GPIO_Init+0x11c>)
 800132c:	f001 f898 	bl	8002460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001330:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001336:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800133a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	4619      	mov	r1, r3
 8001346:	481e      	ldr	r0, [pc, #120]	; (80013c0 <MX_GPIO_Init+0x120>)
 8001348:	f000 ff06 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800134c:	2320      	movs	r3, #32
 800134e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001350:	2301      	movs	r3, #1
 8001352:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	4619      	mov	r1, r3
 8001362:	4816      	ldr	r0, [pc, #88]	; (80013bc <MX_GPIO_Init+0x11c>)
 8001364:	f000 fef8 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : Encod2_Pin */
  GPIO_InitStruct.Pin = Encod2_Pin;
 8001368:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800136c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800136e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001372:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Encod2_GPIO_Port, &GPIO_InitStruct);
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	4619      	mov	r1, r3
 800137e:	4811      	ldr	r0, [pc, #68]	; (80013c4 <MX_GPIO_Init+0x124>)
 8001380:	f000 feea 	bl	8002158 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENCODER_1_Pin */
  GPIO_InitStruct.Pin = ENCODER_1_Pin;
 8001384:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800138a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800138e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENCODER_1_GPIO_Port, &GPIO_InitStruct);
 8001394:	f107 0314 	add.w	r3, r7, #20
 8001398:	4619      	mov	r1, r3
 800139a:	4808      	ldr	r0, [pc, #32]	; (80013bc <MX_GPIO_Init+0x11c>)
 800139c:	f000 fedc 	bl	8002158 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80013a0:	2200      	movs	r2, #0
 80013a2:	2100      	movs	r1, #0
 80013a4:	2017      	movs	r0, #23
 80013a6:	f000 fb36 	bl	8001a16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80013aa:	2017      	movs	r0, #23
 80013ac:	f000 fb4f 	bl	8001a4e <HAL_NVIC_EnableIRQ>

}
 80013b0:	bf00      	nop
 80013b2:	3728      	adds	r7, #40	; 0x28
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	40023800 	.word	0x40023800
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020800 	.word	0x40020800
 80013c4:	40020400 	.word	0x40020400

080013c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013c8:	b480      	push	{r7}
 80013ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013cc:	b672      	cpsid	i
}
 80013ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013d0:	e7fe      	b.n	80013d0 <Error_Handler+0x8>
	...

080013d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b082      	sub	sp, #8
 80013d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013da:	2300      	movs	r3, #0
 80013dc:	607b      	str	r3, [r7, #4]
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_MspInit+0x4c>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e2:	4a0f      	ldr	r2, [pc, #60]	; (8001420 <HAL_MspInit+0x4c>)
 80013e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013e8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ea:	4b0d      	ldr	r3, [pc, #52]	; (8001420 <HAL_MspInit+0x4c>)
 80013ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	607b      	str	r3, [r7, #4]
 80013f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013f6:	2300      	movs	r3, #0
 80013f8:	603b      	str	r3, [r7, #0]
 80013fa:	4b09      	ldr	r3, [pc, #36]	; (8001420 <HAL_MspInit+0x4c>)
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	4a08      	ldr	r2, [pc, #32]	; (8001420 <HAL_MspInit+0x4c>)
 8001400:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001404:	6413      	str	r3, [r2, #64]	; 0x40
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_MspInit+0x4c>)
 8001408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800140e:	603b      	str	r3, [r7, #0]
 8001410:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001412:	2007      	movs	r0, #7
 8001414:	f000 faf4 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40023800 	.word	0x40023800

08001424 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b088      	sub	sp, #32
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800142c:	f107 030c 	add.w	r3, r7, #12
 8001430:	2200      	movs	r2, #0
 8001432:	601a      	str	r2, [r3, #0]
 8001434:	605a      	str	r2, [r3, #4]
 8001436:	609a      	str	r2, [r3, #8]
 8001438:	60da      	str	r2, [r3, #12]
 800143a:	611a      	str	r2, [r3, #16]
  if(hrtc->Instance==RTC)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a10      	ldr	r2, [pc, #64]	; (8001484 <HAL_RTC_MspInit+0x60>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d119      	bne.n	800147a <HAL_RTC_MspInit+0x56>
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001446:	2302      	movs	r3, #2
 8001448:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800144a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800144e:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001450:	f107 030c 	add.w	r3, r7, #12
 8001454:	4618      	mov	r0, r3
 8001456:	f001 fca9 	bl	8002dac <HAL_RCCEx_PeriphCLKConfig>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <HAL_RTC_MspInit+0x40>
    {
      Error_Handler();
 8001460:	f7ff ffb2 	bl	80013c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <HAL_RTC_MspInit+0x64>)
 8001466:	2201      	movs	r2, #1
 8001468:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2100      	movs	r1, #0
 800146e:	2029      	movs	r0, #41	; 0x29
 8001470:	f000 fad1 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001474:	2029      	movs	r0, #41	; 0x29
 8001476:	f000 faea 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800147a:	bf00      	nop
 800147c:	3720      	adds	r7, #32
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40002800 	.word	0x40002800
 8001488:	42470e3c 	.word	0x42470e3c

0800148c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <HAL_TIM_Base_MspInit+0x64>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d10e      	bne.n	80014bc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
 80014a2:	4b14      	ldr	r3, [pc, #80]	; (80014f4 <HAL_TIM_Base_MspInit+0x68>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	4a13      	ldr	r2, [pc, #76]	; (80014f4 <HAL_TIM_Base_MspInit+0x68>)
 80014a8:	f043 0301 	orr.w	r3, r3, #1
 80014ac:	6453      	str	r3, [r2, #68]	; 0x44
 80014ae:	4b11      	ldr	r3, [pc, #68]	; (80014f4 <HAL_TIM_Base_MspInit+0x68>)
 80014b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b2:	f003 0301 	and.w	r3, r3, #1
 80014b6:	60fb      	str	r3, [r7, #12]
 80014b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80014ba:	e012      	b.n	80014e2 <HAL_TIM_Base_MspInit+0x56>
  else if(htim_base->Instance==TIM3)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0d      	ldr	r2, [pc, #52]	; (80014f8 <HAL_TIM_Base_MspInit+0x6c>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10d      	bne.n	80014e2 <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_TIM_Base_MspInit+0x68>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	4a09      	ldr	r2, [pc, #36]	; (80014f4 <HAL_TIM_Base_MspInit+0x68>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6413      	str	r3, [r2, #64]	; 0x40
 80014d6:	4b07      	ldr	r3, [pc, #28]	; (80014f4 <HAL_TIM_Base_MspInit+0x68>)
 80014d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
}
 80014e2:	bf00      	nop
 80014e4:	3714      	adds	r7, #20
 80014e6:	46bd      	mov	sp, r7
 80014e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ec:	4770      	bx	lr
 80014ee:	bf00      	nop
 80014f0:	40010000 	.word	0x40010000
 80014f4:	40023800 	.word	0x40023800
 80014f8:	40000400 	.word	0x40000400

080014fc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014fc:	b580      	push	{r7, lr}
 80014fe:	b088      	sub	sp, #32
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001504:	f107 030c 	add.w	r3, r7, #12
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]
 8001512:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a12      	ldr	r2, [pc, #72]	; (8001564 <HAL_TIM_MspPostInit+0x68>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d11d      	bne.n	800155a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b11      	ldr	r3, [pc, #68]	; (8001568 <HAL_TIM_MspPostInit+0x6c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a10      	ldr	r2, [pc, #64]	; (8001568 <HAL_TIM_MspPostInit+0x6c>)
 8001528:	f043 0301 	orr.w	r3, r3, #1
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <HAL_TIM_MspPostInit+0x6c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0301 	and.w	r3, r3, #1
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800153a:	23c0      	movs	r3, #192	; 0xc0
 800153c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800154a:	2302      	movs	r3, #2
 800154c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154e:	f107 030c 	add.w	r3, r7, #12
 8001552:	4619      	mov	r1, r3
 8001554:	4805      	ldr	r0, [pc, #20]	; (800156c <HAL_TIM_MspPostInit+0x70>)
 8001556:	f000 fdff 	bl	8002158 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800155a:	bf00      	nop
 800155c:	3720      	adds	r7, #32
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40000400 	.word	0x40000400
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000

08001570 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08c      	sub	sp, #48	; 0x30
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 031c 	add.w	r3, r7, #28
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a36      	ldr	r2, [pc, #216]	; (8001668 <HAL_UART_MspInit+0xf8>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d135      	bne.n	80015fe <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	61bb      	str	r3, [r7, #24]
 8001596:	4b35      	ldr	r3, [pc, #212]	; (800166c <HAL_UART_MspInit+0xfc>)
 8001598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800159a:	4a34      	ldr	r2, [pc, #208]	; (800166c <HAL_UART_MspInit+0xfc>)
 800159c:	f043 0310 	orr.w	r3, r3, #16
 80015a0:	6453      	str	r3, [r2, #68]	; 0x44
 80015a2:	4b32      	ldr	r3, [pc, #200]	; (800166c <HAL_UART_MspInit+0xfc>)
 80015a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a6:	f003 0310 	and.w	r3, r3, #16
 80015aa:	61bb      	str	r3, [r7, #24]
 80015ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	617b      	str	r3, [r7, #20]
 80015b2:	4b2e      	ldr	r3, [pc, #184]	; (800166c <HAL_UART_MspInit+0xfc>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015b6:	4a2d      	ldr	r2, [pc, #180]	; (800166c <HAL_UART_MspInit+0xfc>)
 80015b8:	f043 0301 	orr.w	r3, r3, #1
 80015bc:	6313      	str	r3, [r2, #48]	; 0x30
 80015be:	4b2b      	ldr	r3, [pc, #172]	; (800166c <HAL_UART_MspInit+0xfc>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c2:	f003 0301 	and.w	r3, r3, #1
 80015c6:	617b      	str	r3, [r7, #20]
 80015c8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015ca:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d8:	2303      	movs	r3, #3
 80015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015dc:	2307      	movs	r3, #7
 80015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e0:	f107 031c 	add.w	r3, r7, #28
 80015e4:	4619      	mov	r1, r3
 80015e6:	4822      	ldr	r0, [pc, #136]	; (8001670 <HAL_UART_MspInit+0x100>)
 80015e8:	f000 fdb6 	bl	8002158 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015ec:	2200      	movs	r2, #0
 80015ee:	2100      	movs	r1, #0
 80015f0:	2025      	movs	r0, #37	; 0x25
 80015f2:	f000 fa10 	bl	8001a16 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015f6:	2025      	movs	r0, #37	; 0x25
 80015f8:	f000 fa29 	bl	8001a4e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015fc:	e030      	b.n	8001660 <HAL_UART_MspInit+0xf0>
  else if(huart->Instance==USART2)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a1c      	ldr	r2, [pc, #112]	; (8001674 <HAL_UART_MspInit+0x104>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d12b      	bne.n	8001660 <HAL_UART_MspInit+0xf0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
 800160c:	4b17      	ldr	r3, [pc, #92]	; (800166c <HAL_UART_MspInit+0xfc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	4a16      	ldr	r2, [pc, #88]	; (800166c <HAL_UART_MspInit+0xfc>)
 8001612:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001616:	6413      	str	r3, [r2, #64]	; 0x40
 8001618:	4b14      	ldr	r3, [pc, #80]	; (800166c <HAL_UART_MspInit+0xfc>)
 800161a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800161c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001620:	613b      	str	r3, [r7, #16]
 8001622:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001624:	2300      	movs	r3, #0
 8001626:	60fb      	str	r3, [r7, #12]
 8001628:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_UART_MspInit+0xfc>)
 800162a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162c:	4a0f      	ldr	r2, [pc, #60]	; (800166c <HAL_UART_MspInit+0xfc>)
 800162e:	f043 0301 	orr.w	r3, r3, #1
 8001632:	6313      	str	r3, [r2, #48]	; 0x30
 8001634:	4b0d      	ldr	r3, [pc, #52]	; (800166c <HAL_UART_MspInit+0xfc>)
 8001636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001638:	f003 0301 	and.w	r3, r3, #1
 800163c:	60fb      	str	r3, [r7, #12]
 800163e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001640:	230c      	movs	r3, #12
 8001642:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001644:	2302      	movs	r3, #2
 8001646:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001648:	2300      	movs	r3, #0
 800164a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800164c:	2300      	movs	r3, #0
 800164e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001650:	2307      	movs	r3, #7
 8001652:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4619      	mov	r1, r3
 800165a:	4805      	ldr	r0, [pc, #20]	; (8001670 <HAL_UART_MspInit+0x100>)
 800165c:	f000 fd7c 	bl	8002158 <HAL_GPIO_Init>
}
 8001660:	bf00      	nop
 8001662:	3730      	adds	r7, #48	; 0x30
 8001664:	46bd      	mov	sp, r7
 8001666:	bd80      	pop	{r7, pc}
 8001668:	40011000 	.word	0x40011000
 800166c:	40023800 	.word	0x40023800
 8001670:	40020000 	.word	0x40020000
 8001674:	40004400 	.word	0x40004400

08001678 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001678:	b480      	push	{r7}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800167c:	e7fe      	b.n	800167c <NMI_Handler+0x4>

0800167e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001682:	e7fe      	b.n	8001682 <HardFault_Handler+0x4>

08001684 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001688:	e7fe      	b.n	8001688 <MemManage_Handler+0x4>

0800168a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800168a:	b480      	push	{r7}
 800168c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800168e:	e7fe      	b.n	800168e <BusFault_Handler+0x4>

08001690 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001694:	e7fe      	b.n	8001694 <UsageFault_Handler+0x4>

08001696 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001696:	b480      	push	{r7}
 8001698:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr

080016a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016a8:	bf00      	nop
 80016aa:	46bd      	mov	sp, r7
 80016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b0:	4770      	bx	lr

080016b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016b2:	b480      	push	{r7}
 80016b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c4:	f000 f8ac 	bl	8001820 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENCODER_1_Pin);
 80016d0:	f44f 7080 	mov.w	r0, #256	; 0x100
 80016d4:	f000 fede 	bl	8002494 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80016d8:	bf00      	nop
 80016da:	bd80      	pop	{r7, pc}

080016dc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016e0:	4802      	ldr	r0, [pc, #8]	; (80016ec <USART1_IRQHandler+0x10>)
 80016e2:	f003 f89b 	bl	800481c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200000f0 	.word	0x200000f0

080016f0 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 80016f4:	4802      	ldr	r0, [pc, #8]	; (8001700 <RTC_Alarm_IRQHandler+0x10>)
 80016f6:	f002 f821 	bl	800373c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	20000134 	.word	0x20000134

08001704 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001708:	4b06      	ldr	r3, [pc, #24]	; (8001724 <SystemInit+0x20>)
 800170a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800170e:	4a05      	ldr	r2, [pc, #20]	; (8001724 <SystemInit+0x20>)
 8001710:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001714:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001718:	bf00      	nop
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001728:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001760 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800172c:	480d      	ldr	r0, [pc, #52]	; (8001764 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800172e:	490e      	ldr	r1, [pc, #56]	; (8001768 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001730:	4a0e      	ldr	r2, [pc, #56]	; (800176c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001734:	e002      	b.n	800173c <LoopCopyDataInit>

08001736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800173a:	3304      	adds	r3, #4

0800173c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800173c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800173e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001740:	d3f9      	bcc.n	8001736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001742:	4a0b      	ldr	r2, [pc, #44]	; (8001770 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001744:	4c0b      	ldr	r4, [pc, #44]	; (8001774 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001748:	e001      	b.n	800174e <LoopFillZerobss>

0800174a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800174a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800174c:	3204      	adds	r2, #4

0800174e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800174e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001750:	d3fb      	bcc.n	800174a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001752:	f7ff ffd7 	bl	8001704 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001756:	f003 ff19 	bl	800558c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800175a:	f7ff fb53 	bl	8000e04 <main>
  bx  lr    
 800175e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001760:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001764:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001768:	20000034 	.word	0x20000034
  ldr r2, =_sidata
 800176c:	08005624 	.word	0x08005624
  ldr r2, =_sbss
 8001770:	20000034 	.word	0x20000034
  ldr r4, =_ebss
 8001774:	20000218 	.word	0x20000218

08001778 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001778:	e7fe      	b.n	8001778 <ADC_IRQHandler>
	...

0800177c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001780:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0d      	ldr	r2, [pc, #52]	; (80017bc <HAL_Init+0x40>)
 8001786:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800178a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800178c:	4b0b      	ldr	r3, [pc, #44]	; (80017bc <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0a      	ldr	r2, [pc, #40]	; (80017bc <HAL_Init+0x40>)
 8001792:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001796:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001798:	4b08      	ldr	r3, [pc, #32]	; (80017bc <HAL_Init+0x40>)
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a07      	ldr	r2, [pc, #28]	; (80017bc <HAL_Init+0x40>)
 800179e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017a4:	2003      	movs	r0, #3
 80017a6:	f000 f92b 	bl	8001a00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017aa:	2000      	movs	r0, #0
 80017ac:	f000 f808 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017b0:	f7ff fe10 	bl	80013d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b4:	2300      	movs	r3, #0
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	40023c00 	.word	0x40023c00

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b12      	ldr	r3, [pc, #72]	; (8001814 <HAL_InitTick+0x54>)
 80017ca:	681a      	ldr	r2, [r3, #0]
 80017cc:	4b12      	ldr	r3, [pc, #72]	; (8001818 <HAL_InitTick+0x58>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	4619      	mov	r1, r3
 80017d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017d6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017da:	fbb2 f3f3 	udiv	r3, r2, r3
 80017de:	4618      	mov	r0, r3
 80017e0:	f000 f943 	bl	8001a6a <HAL_SYSTICK_Config>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ea:	2301      	movs	r3, #1
 80017ec:	e00e      	b.n	800180c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	2b0f      	cmp	r3, #15
 80017f2:	d80a      	bhi.n	800180a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017f4:	2200      	movs	r2, #0
 80017f6:	6879      	ldr	r1, [r7, #4]
 80017f8:	f04f 30ff 	mov.w	r0, #4294967295
 80017fc:	f000 f90b 	bl	8001a16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001800:	4a06      	ldr	r2, [pc, #24]	; (800181c <HAL_InitTick+0x5c>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001806:	2300      	movs	r3, #0
 8001808:	e000      	b.n	800180c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
}
 800180c:	4618      	mov	r0, r3
 800180e:	3708      	adds	r7, #8
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}
 8001814:	20000028 	.word	0x20000028
 8001818:	20000030 	.word	0x20000030
 800181c:	2000002c 	.word	0x2000002c

08001820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <HAL_IncTick+0x20>)
 8001826:	781b      	ldrb	r3, [r3, #0]
 8001828:	461a      	mov	r2, r3
 800182a:	4b06      	ldr	r3, [pc, #24]	; (8001844 <HAL_IncTick+0x24>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4413      	add	r3, r2
 8001830:	4a04      	ldr	r2, [pc, #16]	; (8001844 <HAL_IncTick+0x24>)
 8001832:	6013      	str	r3, [r2, #0]
}
 8001834:	bf00      	nop
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000030 	.word	0x20000030
 8001844:	200001f4 	.word	0x200001f4

08001848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
  return uwTick;
 800184c:	4b03      	ldr	r3, [pc, #12]	; (800185c <HAL_GetTick+0x14>)
 800184e:	681b      	ldr	r3, [r3, #0]
}
 8001850:	4618      	mov	r0, r3
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	200001f4 	.word	0x200001f4

08001860 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001860:	b480      	push	{r7}
 8001862:	b085      	sub	sp, #20
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001870:	4b0c      	ldr	r3, [pc, #48]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800187c:	4013      	ands	r3, r2
 800187e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001884:	68bb      	ldr	r3, [r7, #8]
 8001886:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001888:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800188c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001890:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	60d3      	str	r3, [r2, #12]
}
 8001898:	bf00      	nop
 800189a:	3714      	adds	r7, #20
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018ac:	4b04      	ldr	r3, [pc, #16]	; (80018c0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	0a1b      	lsrs	r3, r3, #8
 80018b2:	f003 0307 	and.w	r3, r3, #7
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	db0b      	blt.n	80018ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018d6:	79fb      	ldrb	r3, [r7, #7]
 80018d8:	f003 021f 	and.w	r2, r3, #31
 80018dc:	4907      	ldr	r1, [pc, #28]	; (80018fc <__NVIC_EnableIRQ+0x38>)
 80018de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e2:	095b      	lsrs	r3, r3, #5
 80018e4:	2001      	movs	r0, #1
 80018e6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018ee:	bf00      	nop
 80018f0:	370c      	adds	r7, #12
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
 80018fa:	bf00      	nop
 80018fc:	e000e100 	.word	0xe000e100

08001900 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	6039      	str	r1, [r7, #0]
 800190a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001910:	2b00      	cmp	r3, #0
 8001912:	db0a      	blt.n	800192a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001914:	683b      	ldr	r3, [r7, #0]
 8001916:	b2da      	uxtb	r2, r3
 8001918:	490c      	ldr	r1, [pc, #48]	; (800194c <__NVIC_SetPriority+0x4c>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	0112      	lsls	r2, r2, #4
 8001920:	b2d2      	uxtb	r2, r2
 8001922:	440b      	add	r3, r1
 8001924:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001928:	e00a      	b.n	8001940 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	b2da      	uxtb	r2, r3
 800192e:	4908      	ldr	r1, [pc, #32]	; (8001950 <__NVIC_SetPriority+0x50>)
 8001930:	79fb      	ldrb	r3, [r7, #7]
 8001932:	f003 030f 	and.w	r3, r3, #15
 8001936:	3b04      	subs	r3, #4
 8001938:	0112      	lsls	r2, r2, #4
 800193a:	b2d2      	uxtb	r2, r2
 800193c:	440b      	add	r3, r1
 800193e:	761a      	strb	r2, [r3, #24]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr
 800194c:	e000e100 	.word	0xe000e100
 8001950:	e000ed00 	.word	0xe000ed00

08001954 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001954:	b480      	push	{r7}
 8001956:	b089      	sub	sp, #36	; 0x24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	60b9      	str	r1, [r7, #8]
 800195e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	f003 0307 	and.w	r3, r3, #7
 8001966:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	f1c3 0307 	rsb	r3, r3, #7
 800196e:	2b04      	cmp	r3, #4
 8001970:	bf28      	it	cs
 8001972:	2304      	movcs	r3, #4
 8001974:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001976:	69fb      	ldr	r3, [r7, #28]
 8001978:	3304      	adds	r3, #4
 800197a:	2b06      	cmp	r3, #6
 800197c:	d902      	bls.n	8001984 <NVIC_EncodePriority+0x30>
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	3b03      	subs	r3, #3
 8001982:	e000      	b.n	8001986 <NVIC_EncodePriority+0x32>
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001988:	f04f 32ff 	mov.w	r2, #4294967295
 800198c:	69bb      	ldr	r3, [r7, #24]
 800198e:	fa02 f303 	lsl.w	r3, r2, r3
 8001992:	43da      	mvns	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	401a      	ands	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800199c:	f04f 31ff 	mov.w	r1, #4294967295
 80019a0:	697b      	ldr	r3, [r7, #20]
 80019a2:	fa01 f303 	lsl.w	r3, r1, r3
 80019a6:	43d9      	mvns	r1, r3
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019ac:	4313      	orrs	r3, r2
         );
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
	...

080019bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b082      	sub	sp, #8
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	3b01      	subs	r3, #1
 80019c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019cc:	d301      	bcc.n	80019d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ce:	2301      	movs	r3, #1
 80019d0:	e00f      	b.n	80019f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019d2:	4a0a      	ldr	r2, [pc, #40]	; (80019fc <SysTick_Config+0x40>)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	3b01      	subs	r3, #1
 80019d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019da:	210f      	movs	r1, #15
 80019dc:	f04f 30ff 	mov.w	r0, #4294967295
 80019e0:	f7ff ff8e 	bl	8001900 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019e4:	4b05      	ldr	r3, [pc, #20]	; (80019fc <SysTick_Config+0x40>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ea:	4b04      	ldr	r3, [pc, #16]	; (80019fc <SysTick_Config+0x40>)
 80019ec:	2207      	movs	r2, #7
 80019ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019f0:	2300      	movs	r3, #0
}
 80019f2:	4618      	mov	r0, r3
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	e000e010 	.word	0xe000e010

08001a00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a08:	6878      	ldr	r0, [r7, #4]
 8001a0a:	f7ff ff29 	bl	8001860 <__NVIC_SetPriorityGrouping>
}
 8001a0e:	bf00      	nop
 8001a10:	3708      	adds	r7, #8
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}

08001a16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a16:	b580      	push	{r7, lr}
 8001a18:	b086      	sub	sp, #24
 8001a1a:	af00      	add	r7, sp, #0
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	60b9      	str	r1, [r7, #8]
 8001a20:	607a      	str	r2, [r7, #4]
 8001a22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a28:	f7ff ff3e 	bl	80018a8 <__NVIC_GetPriorityGrouping>
 8001a2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a2e:	687a      	ldr	r2, [r7, #4]
 8001a30:	68b9      	ldr	r1, [r7, #8]
 8001a32:	6978      	ldr	r0, [r7, #20]
 8001a34:	f7ff ff8e 	bl	8001954 <NVIC_EncodePriority>
 8001a38:	4602      	mov	r2, r0
 8001a3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff5d 	bl	8001900 <__NVIC_SetPriority>
}
 8001a46:	bf00      	nop
 8001a48:	3718      	adds	r7, #24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	4603      	mov	r3, r0
 8001a56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff ff31 	bl	80018c4 <__NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}

08001a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	b082      	sub	sp, #8
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff ffa2 	bl	80019bc <SysTick_Config>
 8001a78:	4603      	mov	r3, r0
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b084      	sub	sp, #16
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a90:	f7ff feda 	bl	8001848 <HAL_GetTick>
 8001a94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	2b02      	cmp	r3, #2
 8001aa0:	d008      	beq.n	8001ab4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2280      	movs	r2, #128	; 0x80
 8001aa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e052      	b.n	8001b5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	681a      	ldr	r2, [r3, #0]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f022 0216 	bic.w	r2, r2, #22
 8001ac2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	695a      	ldr	r2, [r3, #20]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ad2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d103      	bne.n	8001ae4 <HAL_DMA_Abort+0x62>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d007      	beq.n	8001af4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	681a      	ldr	r2, [r3, #0]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f022 0208 	bic.w	r2, r2, #8
 8001af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	681a      	ldr	r2, [r3, #0]
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f022 0201 	bic.w	r2, r2, #1
 8001b02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b04:	e013      	b.n	8001b2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b06:	f7ff fe9f 	bl	8001848 <HAL_GetTick>
 8001b0a:	4602      	mov	r2, r0
 8001b0c:	68bb      	ldr	r3, [r7, #8]
 8001b0e:	1ad3      	subs	r3, r2, r3
 8001b10:	2b05      	cmp	r3, #5
 8001b12:	d90c      	bls.n	8001b2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2220      	movs	r2, #32
 8001b18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2203      	movs	r2, #3
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e015      	b.n	8001b5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d1e4      	bne.n	8001b06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b40:	223f      	movs	r2, #63	; 0x3f
 8001b42:	409a      	lsls	r2, r3
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001b58:	2300      	movs	r3, #0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3710      	adds	r7, #16
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d004      	beq.n	8001b80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2280      	movs	r2, #128	; 0x80
 8001b7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e00c      	b.n	8001b9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2205      	movs	r2, #5
 8001b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	60b9      	str	r1, [r7, #8]
 8001bb2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001bba:	4b23      	ldr	r3, [pc, #140]	; (8001c48 <HAL_FLASH_Program+0xa0>)
 8001bbc:	7e1b      	ldrb	r3, [r3, #24]
 8001bbe:	2b01      	cmp	r3, #1
 8001bc0:	d101      	bne.n	8001bc6 <HAL_FLASH_Program+0x1e>
 8001bc2:	2302      	movs	r3, #2
 8001bc4:	e03b      	b.n	8001c3e <HAL_FLASH_Program+0x96>
 8001bc6:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <HAL_FLASH_Program+0xa0>)
 8001bc8:	2201      	movs	r2, #1
 8001bca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001bcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001bd0:	f000 f860 	bl	8001c94 <FLASH_WaitForLastOperation>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8001bd8:	7dfb      	ldrb	r3, [r7, #23]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d12b      	bne.n	8001c36 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d105      	bne.n	8001bf0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8001be4:	783b      	ldrb	r3, [r7, #0]
 8001be6:	4619      	mov	r1, r3
 8001be8:	68b8      	ldr	r0, [r7, #8]
 8001bea:	f000 f90b 	bl	8001e04 <FLASH_Program_Byte>
 8001bee:	e016      	b.n	8001c1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d105      	bne.n	8001c02 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8001bf6:	883b      	ldrh	r3, [r7, #0]
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	68b8      	ldr	r0, [r7, #8]
 8001bfc:	f000 f8de 	bl	8001dbc <FLASH_Program_HalfWord>
 8001c00:	e00d      	b.n	8001c1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2b02      	cmp	r3, #2
 8001c06:	d105      	bne.n	8001c14 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	68b8      	ldr	r0, [r7, #8]
 8001c0e:	f000 f8b3 	bl	8001d78 <FLASH_Program_Word>
 8001c12:	e004      	b.n	8001c1e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8001c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001c18:	68b8      	ldr	r0, [r7, #8]
 8001c1a:	f000 f87b 	bl	8001d14 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001c1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001c22:	f000 f837 	bl	8001c94 <FLASH_WaitForLastOperation>
 8001c26:	4603      	mov	r3, r0
 8001c28:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8001c2a:	4b08      	ldr	r3, [pc, #32]	; (8001c4c <HAL_FLASH_Program+0xa4>)
 8001c2c:	691b      	ldr	r3, [r3, #16]
 8001c2e:	4a07      	ldr	r2, [pc, #28]	; (8001c4c <HAL_FLASH_Program+0xa4>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001c36:	4b04      	ldr	r3, [pc, #16]	; (8001c48 <HAL_FLASH_Program+0xa0>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8001c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c3e:	4618      	mov	r0, r3
 8001c40:	3718      	adds	r7, #24
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	200001f8 	.word	0x200001f8
 8001c4c:	40023c00 	.word	0x40023c00

08001c50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8001c56:	2300      	movs	r3, #0
 8001c58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c5a:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_FLASH_Unlock+0x38>)
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	da0b      	bge.n	8001c7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_FLASH_Unlock+0x38>)
 8001c64:	4a09      	ldr	r2, [pc, #36]	; (8001c8c <HAL_FLASH_Unlock+0x3c>)
 8001c66:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001c68:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_FLASH_Unlock+0x38>)
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <HAL_FLASH_Unlock+0x40>)
 8001c6c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_FLASH_Unlock+0x38>)
 8001c70:	691b      	ldr	r3, [r3, #16]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	da01      	bge.n	8001c7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8001c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr
 8001c88:	40023c00 	.word	0x40023c00
 8001c8c:	45670123 	.word	0x45670123
 8001c90:	cdef89ab 	.word	0xcdef89ab

08001c94 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b084      	sub	sp, #16
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <FLASH_WaitForLastOperation+0x78>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca6:	f7ff fdcf 	bl	8001848 <HAL_GetTick>
 8001caa:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001cac:	e010      	b.n	8001cd0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cb4:	d00c      	beq.n	8001cd0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d007      	beq.n	8001ccc <FLASH_WaitForLastOperation+0x38>
 8001cbc:	f7ff fdc4 	bl	8001848 <HAL_GetTick>
 8001cc0:	4602      	mov	r2, r0
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	687a      	ldr	r2, [r7, #4]
 8001cc8:	429a      	cmp	r2, r3
 8001cca:	d201      	bcs.n	8001cd0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e019      	b.n	8001d04 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <FLASH_WaitForLastOperation+0x7c>)
 8001cd2:	68db      	ldr	r3, [r3, #12]
 8001cd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d1e8      	bne.n	8001cae <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8001cdc:	4b0c      	ldr	r3, [pc, #48]	; (8001d10 <FLASH_WaitForLastOperation+0x7c>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d002      	beq.n	8001cee <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <FLASH_WaitForLastOperation+0x7c>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8001cee:	4b08      	ldr	r3, [pc, #32]	; (8001d10 <FLASH_WaitForLastOperation+0x7c>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8001cfa:	f000 f8a5 	bl	8001e48 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e000      	b.n	8001d04 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8001d02:	2300      	movs	r3, #0
  
}  
 8001d04:	4618      	mov	r0, r3
 8001d06:	3710      	adds	r7, #16
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	200001f8 	.word	0x200001f8
 8001d10:	40023c00 	.word	0x40023c00

08001d14 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b085      	sub	sp, #20
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d20:	4b14      	ldr	r3, [pc, #80]	; (8001d74 <FLASH_Program_DoubleWord+0x60>)
 8001d22:	691b      	ldr	r3, [r3, #16]
 8001d24:	4a13      	ldr	r2, [pc, #76]	; (8001d74 <FLASH_Program_DoubleWord+0x60>)
 8001d26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <FLASH_Program_DoubleWord+0x60>)
 8001d2e:	691b      	ldr	r3, [r3, #16]
 8001d30:	4a10      	ldr	r2, [pc, #64]	; (8001d74 <FLASH_Program_DoubleWord+0x60>)
 8001d32:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001d36:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d38:	4b0e      	ldr	r3, [pc, #56]	; (8001d74 <FLASH_Program_DoubleWord+0x60>)
 8001d3a:	691b      	ldr	r3, [r3, #16]
 8001d3c:	4a0d      	ldr	r2, [pc, #52]	; (8001d74 <FLASH_Program_DoubleWord+0x60>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	683a      	ldr	r2, [r7, #0]
 8001d48:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8001d4a:	f3bf 8f6f 	isb	sy
}
 8001d4e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8001d50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d54:	f04f 0200 	mov.w	r2, #0
 8001d58:	f04f 0300 	mov.w	r3, #0
 8001d5c:	000a      	movs	r2, r1
 8001d5e:	2300      	movs	r3, #0
 8001d60:	68f9      	ldr	r1, [r7, #12]
 8001d62:	3104      	adds	r1, #4
 8001d64:	4613      	mov	r3, r2
 8001d66:	600b      	str	r3, [r1, #0]
}
 8001d68:	bf00      	nop
 8001d6a:	3714      	adds	r7, #20
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40023c00 	.word	0x40023c00

08001d78 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b083      	sub	sp, #12
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
 8001d80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001d82:	4b0d      	ldr	r3, [pc, #52]	; (8001db8 <FLASH_Program_Word+0x40>)
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	4a0c      	ldr	r2, [pc, #48]	; (8001db8 <FLASH_Program_Word+0x40>)
 8001d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d8c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8001d8e:	4b0a      	ldr	r3, [pc, #40]	; (8001db8 <FLASH_Program_Word+0x40>)
 8001d90:	691b      	ldr	r3, [r3, #16]
 8001d92:	4a09      	ldr	r2, [pc, #36]	; (8001db8 <FLASH_Program_Word+0x40>)
 8001d94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d98:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001d9a:	4b07      	ldr	r3, [pc, #28]	; (8001db8 <FLASH_Program_Word+0x40>)
 8001d9c:	691b      	ldr	r3, [r3, #16]
 8001d9e:	4a06      	ldr	r2, [pc, #24]	; (8001db8 <FLASH_Program_Word+0x40>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	683a      	ldr	r2, [r7, #0]
 8001daa:	601a      	str	r2, [r3, #0]
}
 8001dac:	bf00      	nop
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr
 8001db8:	40023c00 	.word	0x40023c00

08001dbc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	460b      	mov	r3, r1
 8001dc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <FLASH_Program_HalfWord+0x44>)
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <FLASH_Program_HalfWord+0x44>)
 8001dce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001dd2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8001dd4:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <FLASH_Program_HalfWord+0x44>)
 8001dd6:	691b      	ldr	r3, [r3, #16]
 8001dd8:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <FLASH_Program_HalfWord+0x44>)
 8001dda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dde:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001de0:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <FLASH_Program_HalfWord+0x44>)
 8001de2:	691b      	ldr	r3, [r3, #16]
 8001de4:	4a06      	ldr	r2, [pc, #24]	; (8001e00 <FLASH_Program_HalfWord+0x44>)
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	887a      	ldrh	r2, [r7, #2]
 8001df0:	801a      	strh	r2, [r3, #0]
}
 8001df2:	bf00      	nop
 8001df4:	370c      	adds	r7, #12
 8001df6:	46bd      	mov	sp, r7
 8001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop
 8001e00:	40023c00 	.word	0x40023c00

08001e04 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <FLASH_Program_Byte+0x40>)
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	4a0b      	ldr	r2, [pc, #44]	; (8001e44 <FLASH_Program_Byte+0x40>)
 8001e16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001e1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8001e1c:	4b09      	ldr	r3, [pc, #36]	; (8001e44 <FLASH_Program_Byte+0x40>)
 8001e1e:	4a09      	ldr	r2, [pc, #36]	; (8001e44 <FLASH_Program_Byte+0x40>)
 8001e20:	691b      	ldr	r3, [r3, #16]
 8001e22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <FLASH_Program_Byte+0x40>)
 8001e26:	691b      	ldr	r3, [r3, #16]
 8001e28:	4a06      	ldr	r2, [pc, #24]	; (8001e44 <FLASH_Program_Byte+0x40>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	78fa      	ldrb	r2, [r7, #3]
 8001e34:	701a      	strb	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	370c      	adds	r7, #12
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023c00 	.word	0x40023c00

08001e48 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8001e4c:	4b2f      	ldr	r3, [pc, #188]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001e4e:	68db      	ldr	r3, [r3, #12]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d008      	beq.n	8001e6a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001e58:	4b2d      	ldr	r3, [pc, #180]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	f043 0310 	orr.w	r3, r3, #16
 8001e60:	4a2b      	ldr	r2, [pc, #172]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001e62:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8001e64:	4b29      	ldr	r3, [pc, #164]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001e66:	2210      	movs	r2, #16
 8001e68:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8001e6a:	4b28      	ldr	r3, [pc, #160]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	f003 0320 	and.w	r3, r3, #32
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d008      	beq.n	8001e88 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001e76:	4b26      	ldr	r3, [pc, #152]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	f043 0308 	orr.w	r3, r3, #8
 8001e7e:	4a24      	ldr	r2, [pc, #144]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001e80:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8001e82:	4b22      	ldr	r3, [pc, #136]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001e84:	2220      	movs	r2, #32
 8001e86:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8001e88:	4b20      	ldr	r3, [pc, #128]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d008      	beq.n	8001ea6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8001e94:	4b1e      	ldr	r3, [pc, #120]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001e96:	69db      	ldr	r3, [r3, #28]
 8001e98:	f043 0304 	orr.w	r3, r3, #4
 8001e9c:	4a1c      	ldr	r2, [pc, #112]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001e9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8001ea0:	4b1a      	ldr	r3, [pc, #104]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001ea2:	2240      	movs	r2, #64	; 0x40
 8001ea4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8001ea6:	4b19      	ldr	r3, [pc, #100]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001ea8:	68db      	ldr	r3, [r3, #12]
 8001eaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d008      	beq.n	8001ec4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8001eb2:	4b17      	ldr	r3, [pc, #92]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001eb4:	69db      	ldr	r3, [r3, #28]
 8001eb6:	f043 0302 	orr.w	r3, r3, #2
 8001eba:	4a15      	ldr	r2, [pc, #84]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001ebc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8001ebe:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001ec0:	2280      	movs	r2, #128	; 0x80
 8001ec2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8001ec4:	4b11      	ldr	r3, [pc, #68]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d009      	beq.n	8001ee4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001ed0:	4b0f      	ldr	r3, [pc, #60]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001ed2:	69db      	ldr	r3, [r3, #28]
 8001ed4:	f043 0301 	orr.w	r3, r3, #1
 8001ed8:	4a0d      	ldr	r2, [pc, #52]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001eda:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001ede:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ee2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8001ee4:	4b09      	ldr	r3, [pc, #36]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8001ef0:	4b07      	ldr	r3, [pc, #28]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	f043 0320 	orr.w	r3, r3, #32
 8001ef8:	4a05      	ldr	r2, [pc, #20]	; (8001f10 <FLASH_SetErrorCode+0xc8>)
 8001efa:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8001efc:	4b03      	ldr	r3, [pc, #12]	; (8001f0c <FLASH_SetErrorCode+0xc4>)
 8001efe:	2202      	movs	r2, #2
 8001f00:	60da      	str	r2, [r3, #12]
  }
}
 8001f02:	bf00      	nop
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40023c00 	.word	0x40023c00
 8001f10:	200001f8 	.word	0x200001f8

08001f14 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8001f22:	2300      	movs	r3, #0
 8001f24:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <HAL_FLASHEx_Erase+0xd8>)
 8001f28:	7e1b      	ldrb	r3, [r3, #24]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_FLASHEx_Erase+0x1e>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e058      	b.n	8001fe4 <HAL_FLASHEx_Erase+0xd0>
 8001f32:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <HAL_FLASHEx_Erase+0xd8>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f38:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f3c:	f7ff feaa 	bl	8001c94 <FLASH_WaitForLastOperation>
 8001f40:	4603      	mov	r3, r0
 8001f42:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d148      	bne.n	8001fdc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d115      	bne.n	8001f86 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	b2da      	uxtb	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f000 f844 	bl	8001ff4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f6c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001f70:	f7ff fe90 	bl	8001c94 <FLASH_WaitForLastOperation>
 8001f74:	4603      	mov	r3, r0
 8001f76:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8001f78:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_FLASHEx_Erase+0xdc>)
 8001f7a:	691b      	ldr	r3, [r3, #16]
 8001f7c:	4a1c      	ldr	r2, [pc, #112]	; (8001ff0 <HAL_FLASHEx_Erase+0xdc>)
 8001f7e:	f023 0304 	bic.w	r3, r3, #4
 8001f82:	6113      	str	r3, [r2, #16]
 8001f84:	e028      	b.n	8001fd8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	689b      	ldr	r3, [r3, #8]
 8001f8a:	60bb      	str	r3, [r7, #8]
 8001f8c:	e01c      	b.n	8001fc8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	691b      	ldr	r3, [r3, #16]
 8001f92:	b2db      	uxtb	r3, r3
 8001f94:	4619      	mov	r1, r3
 8001f96:	68b8      	ldr	r0, [r7, #8]
 8001f98:	f000 f850 	bl	800203c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001f9c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001fa0:	f7ff fe78 	bl	8001c94 <FLASH_WaitForLastOperation>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8001fa8:	4b11      	ldr	r3, [pc, #68]	; (8001ff0 <HAL_FLASHEx_Erase+0xdc>)
 8001faa:	691b      	ldr	r3, [r3, #16]
 8001fac:	4a10      	ldr	r2, [pc, #64]	; (8001ff0 <HAL_FLASHEx_Erase+0xdc>)
 8001fae:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8001fb2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8001fb4:	7bfb      	ldrb	r3, [r7, #15]
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d003      	beq.n	8001fc2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	68ba      	ldr	r2, [r7, #8]
 8001fbe:	601a      	str	r2, [r3, #0]
          break;
 8001fc0:	e00a      	b.n	8001fd8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	3301      	adds	r3, #1
 8001fc6:	60bb      	str	r3, [r7, #8]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	68ba      	ldr	r2, [r7, #8]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d3da      	bcc.n	8001f8e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8001fd8:	f000 f878 	bl	80020cc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8001fdc:	4b03      	ldr	r3, [pc, #12]	; (8001fec <HAL_FLASHEx_Erase+0xd8>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	761a      	strb	r2, [r3, #24]

  return status;
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3710      	adds	r7, #16
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}
 8001fec:	200001f8 	.word	0x200001f8
 8001ff0:	40023c00 	.word	0x40023c00

08001ff4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b083      	sub	sp, #12
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	6039      	str	r1, [r7, #0]
 8001ffe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8002000:	4b0d      	ldr	r3, [pc, #52]	; (8002038 <FLASH_MassErase+0x44>)
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	4a0c      	ldr	r2, [pc, #48]	; (8002038 <FLASH_MassErase+0x44>)
 8002006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800200a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800200c:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <FLASH_MassErase+0x44>)
 800200e:	691b      	ldr	r3, [r3, #16]
 8002010:	4a09      	ldr	r2, [pc, #36]	; (8002038 <FLASH_MassErase+0x44>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8002018:	4b07      	ldr	r3, [pc, #28]	; (8002038 <FLASH_MassErase+0x44>)
 800201a:	691a      	ldr	r2, [r3, #16]
 800201c:	79fb      	ldrb	r3, [r7, #7]
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	4313      	orrs	r3, r2
 8002022:	4a05      	ldr	r2, [pc, #20]	; (8002038 <FLASH_MassErase+0x44>)
 8002024:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002028:	6113      	str	r3, [r2, #16]
}
 800202a:	bf00      	nop
 800202c:	370c      	adds	r7, #12
 800202e:	46bd      	mov	sp, r7
 8002030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002034:	4770      	bx	lr
 8002036:	bf00      	nop
 8002038:	40023c00 	.word	0x40023c00

0800203c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	460b      	mov	r3, r1
 8002046:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800204c:	78fb      	ldrb	r3, [r7, #3]
 800204e:	2b00      	cmp	r3, #0
 8002050:	d102      	bne.n	8002058 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	e010      	b.n	800207a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	2b01      	cmp	r3, #1
 800205c:	d103      	bne.n	8002066 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800205e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	e009      	b.n	800207a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8002066:	78fb      	ldrb	r3, [r7, #3]
 8002068:	2b02      	cmp	r3, #2
 800206a:	d103      	bne.n	8002074 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800206c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	e002      	b.n	800207a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8002074:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002078:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800207a:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	4a12      	ldr	r2, [pc, #72]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 8002080:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002084:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 8002088:	691a      	ldr	r2, [r3, #16]
 800208a:	490f      	ldr	r1, [pc, #60]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	4313      	orrs	r3, r2
 8002090:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 8002098:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800209c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 80020a0:	691a      	ldr	r2, [r3, #16]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	00db      	lsls	r3, r3, #3
 80020a6:	4313      	orrs	r3, r2
 80020a8:	4a07      	ldr	r2, [pc, #28]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 80020aa:	f043 0302 	orr.w	r3, r3, #2
 80020ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80020b0:	4b05      	ldr	r3, [pc, #20]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 80020b2:	691b      	ldr	r3, [r3, #16]
 80020b4:	4a04      	ldr	r2, [pc, #16]	; (80020c8 <FLASH_Erase_Sector+0x8c>)
 80020b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020ba:	6113      	str	r3, [r2, #16]
}
 80020bc:	bf00      	nop
 80020be:	3714      	adds	r7, #20
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr
 80020c8:	40023c00 	.word	0x40023c00

080020cc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80020d0:	4b20      	ldr	r3, [pc, #128]	; (8002154 <FLASH_FlushCaches+0x88>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d017      	beq.n	800210c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80020dc:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <FLASH_FlushCaches+0x88>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a1c      	ldr	r2, [pc, #112]	; (8002154 <FLASH_FlushCaches+0x88>)
 80020e2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020e6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80020e8:	4b1a      	ldr	r3, [pc, #104]	; (8002154 <FLASH_FlushCaches+0x88>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a19      	ldr	r2, [pc, #100]	; (8002154 <FLASH_FlushCaches+0x88>)
 80020ee:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80020f2:	6013      	str	r3, [r2, #0]
 80020f4:	4b17      	ldr	r3, [pc, #92]	; (8002154 <FLASH_FlushCaches+0x88>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a16      	ldr	r2, [pc, #88]	; (8002154 <FLASH_FlushCaches+0x88>)
 80020fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80020fe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002100:	4b14      	ldr	r3, [pc, #80]	; (8002154 <FLASH_FlushCaches+0x88>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a13      	ldr	r2, [pc, #76]	; (8002154 <FLASH_FlushCaches+0x88>)
 8002106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800210a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800210c:	4b11      	ldr	r3, [pc, #68]	; (8002154 <FLASH_FlushCaches+0x88>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002114:	2b00      	cmp	r3, #0
 8002116:	d017      	beq.n	8002148 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8002118:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <FLASH_FlushCaches+0x88>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	4a0d      	ldr	r2, [pc, #52]	; (8002154 <FLASH_FlushCaches+0x88>)
 800211e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002122:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8002124:	4b0b      	ldr	r3, [pc, #44]	; (8002154 <FLASH_FlushCaches+0x88>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	; (8002154 <FLASH_FlushCaches+0x88>)
 800212a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800212e:	6013      	str	r3, [r2, #0]
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <FLASH_FlushCaches+0x88>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a07      	ldr	r2, [pc, #28]	; (8002154 <FLASH_FlushCaches+0x88>)
 8002136:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800213a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800213c:	4b05      	ldr	r3, [pc, #20]	; (8002154 <FLASH_FlushCaches+0x88>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4a04      	ldr	r2, [pc, #16]	; (8002154 <FLASH_FlushCaches+0x88>)
 8002142:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002146:	6013      	str	r3, [r2, #0]
  }
}
 8002148:	bf00      	nop
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	40023c00 	.word	0x40023c00

08002158 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002158:	b480      	push	{r7}
 800215a:	b089      	sub	sp, #36	; 0x24
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
 8002160:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002162:	2300      	movs	r3, #0
 8002164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800216e:	2300      	movs	r3, #0
 8002170:	61fb      	str	r3, [r7, #28]
 8002172:	e159      	b.n	8002428 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4013      	ands	r3, r2
 8002186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002188:	693a      	ldr	r2, [r7, #16]
 800218a:	697b      	ldr	r3, [r7, #20]
 800218c:	429a      	cmp	r2, r3
 800218e:	f040 8148 	bne.w	8002422 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	2b01      	cmp	r3, #1
 800219c:	d005      	beq.n	80021aa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800219e:	683b      	ldr	r3, [r7, #0]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d130      	bne.n	800220c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80021b0:	69fb      	ldr	r3, [r7, #28]
 80021b2:	005b      	lsls	r3, r3, #1
 80021b4:	2203      	movs	r2, #3
 80021b6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ba:	43db      	mvns	r3, r3
 80021bc:	69ba      	ldr	r2, [r7, #24]
 80021be:	4013      	ands	r3, r2
 80021c0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	005b      	lsls	r3, r3, #1
 80021ca:	fa02 f303 	lsl.w	r3, r2, r3
 80021ce:	69ba      	ldr	r2, [r7, #24]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	69ba      	ldr	r2, [r7, #24]
 80021d8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80021e0:	2201      	movs	r2, #1
 80021e2:	69fb      	ldr	r3, [r7, #28]
 80021e4:	fa02 f303 	lsl.w	r3, r2, r3
 80021e8:	43db      	mvns	r3, r3
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4013      	ands	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	091b      	lsrs	r3, r3, #4
 80021f6:	f003 0201 	and.w	r2, r3, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	69ba      	ldr	r2, [r7, #24]
 8002202:	4313      	orrs	r3, r2
 8002204:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	2b03      	cmp	r3, #3
 8002216:	d017      	beq.n	8002248 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800221e:	69fb      	ldr	r3, [r7, #28]
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	2203      	movs	r2, #3
 8002224:	fa02 f303 	lsl.w	r3, r2, r3
 8002228:	43db      	mvns	r3, r3
 800222a:	69ba      	ldr	r2, [r7, #24]
 800222c:	4013      	ands	r3, r2
 800222e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	fa02 f303 	lsl.w	r3, r2, r3
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d123      	bne.n	800229c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002254:	69fb      	ldr	r3, [r7, #28]
 8002256:	08da      	lsrs	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	3208      	adds	r2, #8
 800225c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002260:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002262:	69fb      	ldr	r3, [r7, #28]
 8002264:	f003 0307 	and.w	r3, r3, #7
 8002268:	009b      	lsls	r3, r3, #2
 800226a:	220f      	movs	r2, #15
 800226c:	fa02 f303 	lsl.w	r3, r2, r3
 8002270:	43db      	mvns	r3, r3
 8002272:	69ba      	ldr	r2, [r7, #24]
 8002274:	4013      	ands	r3, r2
 8002276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	691a      	ldr	r2, [r3, #16]
 800227c:	69fb      	ldr	r3, [r7, #28]
 800227e:	f003 0307 	and.w	r3, r3, #7
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	fa02 f303 	lsl.w	r3, r2, r3
 8002288:	69ba      	ldr	r2, [r7, #24]
 800228a:	4313      	orrs	r3, r2
 800228c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	08da      	lsrs	r2, r3, #3
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	3208      	adds	r2, #8
 8002296:	69b9      	ldr	r1, [r7, #24]
 8002298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	f003 0203 	and.w	r2, r3, #3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	005b      	lsls	r3, r3, #1
 80022c0:	fa02 f303 	lsl.w	r3, r2, r3
 80022c4:	69ba      	ldr	r2, [r7, #24]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 80a2 	beq.w	8002422 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	60fb      	str	r3, [r7, #12]
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <HAL_GPIO_Init+0x2e8>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e6:	4a56      	ldr	r2, [pc, #344]	; (8002440 <HAL_GPIO_Init+0x2e8>)
 80022e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022ec:	6453      	str	r3, [r2, #68]	; 0x44
 80022ee:	4b54      	ldr	r3, [pc, #336]	; (8002440 <HAL_GPIO_Init+0x2e8>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022f6:	60fb      	str	r3, [r7, #12]
 80022f8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80022fa:	4a52      	ldr	r2, [pc, #328]	; (8002444 <HAL_GPIO_Init+0x2ec>)
 80022fc:	69fb      	ldr	r3, [r7, #28]
 80022fe:	089b      	lsrs	r3, r3, #2
 8002300:	3302      	adds	r3, #2
 8002302:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	009b      	lsls	r3, r3, #2
 8002310:	220f      	movs	r2, #15
 8002312:	fa02 f303 	lsl.w	r3, r2, r3
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	4a49      	ldr	r2, [pc, #292]	; (8002448 <HAL_GPIO_Init+0x2f0>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d019      	beq.n	800235a <HAL_GPIO_Init+0x202>
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	4a48      	ldr	r2, [pc, #288]	; (800244c <HAL_GPIO_Init+0x2f4>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d013      	beq.n	8002356 <HAL_GPIO_Init+0x1fe>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	4a47      	ldr	r2, [pc, #284]	; (8002450 <HAL_GPIO_Init+0x2f8>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d00d      	beq.n	8002352 <HAL_GPIO_Init+0x1fa>
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4a46      	ldr	r2, [pc, #280]	; (8002454 <HAL_GPIO_Init+0x2fc>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d007      	beq.n	800234e <HAL_GPIO_Init+0x1f6>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4a45      	ldr	r2, [pc, #276]	; (8002458 <HAL_GPIO_Init+0x300>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d101      	bne.n	800234a <HAL_GPIO_Init+0x1f2>
 8002346:	2304      	movs	r3, #4
 8002348:	e008      	b.n	800235c <HAL_GPIO_Init+0x204>
 800234a:	2307      	movs	r3, #7
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x204>
 800234e:	2303      	movs	r3, #3
 8002350:	e004      	b.n	800235c <HAL_GPIO_Init+0x204>
 8002352:	2302      	movs	r3, #2
 8002354:	e002      	b.n	800235c <HAL_GPIO_Init+0x204>
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_GPIO_Init+0x204>
 800235a:	2300      	movs	r3, #0
 800235c:	69fa      	ldr	r2, [r7, #28]
 800235e:	f002 0203 	and.w	r2, r2, #3
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	4093      	lsls	r3, r2
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800236c:	4935      	ldr	r1, [pc, #212]	; (8002444 <HAL_GPIO_Init+0x2ec>)
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	089b      	lsrs	r3, r3, #2
 8002372:	3302      	adds	r3, #2
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800237a:	4b38      	ldr	r3, [pc, #224]	; (800245c <HAL_GPIO_Init+0x304>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800239e:	4a2f      	ldr	r2, [pc, #188]	; (800245c <HAL_GPIO_Init+0x304>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80023a4:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_GPIO_Init+0x304>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80023c8:	4a24      	ldr	r2, [pc, #144]	; (800245c <HAL_GPIO_Init+0x304>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023ce:	4b23      	ldr	r3, [pc, #140]	; (800245c <HAL_GPIO_Init+0x304>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	43db      	mvns	r3, r3
 80023d8:	69ba      	ldr	r2, [r7, #24]
 80023da:	4013      	ands	r3, r2
 80023dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d003      	beq.n	80023f2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80023f2:	4a1a      	ldr	r2, [pc, #104]	; (800245c <HAL_GPIO_Init+0x304>)
 80023f4:	69bb      	ldr	r3, [r7, #24]
 80023f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80023f8:	4b18      	ldr	r3, [pc, #96]	; (800245c <HAL_GPIO_Init+0x304>)
 80023fa:	68db      	ldr	r3, [r3, #12]
 80023fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d003      	beq.n	800241c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	4313      	orrs	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800241c:	4a0f      	ldr	r2, [pc, #60]	; (800245c <HAL_GPIO_Init+0x304>)
 800241e:	69bb      	ldr	r3, [r7, #24]
 8002420:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002422:	69fb      	ldr	r3, [r7, #28]
 8002424:	3301      	adds	r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
 8002428:	69fb      	ldr	r3, [r7, #28]
 800242a:	2b0f      	cmp	r3, #15
 800242c:	f67f aea2 	bls.w	8002174 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002430:	bf00      	nop
 8002432:	bf00      	nop
 8002434:	3724      	adds	r7, #36	; 0x24
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40023800 	.word	0x40023800
 8002444:	40013800 	.word	0x40013800
 8002448:	40020000 	.word	0x40020000
 800244c:	40020400 	.word	0x40020400
 8002450:	40020800 	.word	0x40020800
 8002454:	40020c00 	.word	0x40020c00
 8002458:	40021000 	.word	0x40021000
 800245c:	40013c00 	.word	0x40013c00

08002460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
 8002468:	460b      	mov	r3, r1
 800246a:	807b      	strh	r3, [r7, #2]
 800246c:	4613      	mov	r3, r2
 800246e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002470:	787b      	ldrb	r3, [r7, #1]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002476:	887a      	ldrh	r2, [r7, #2]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800247c:	e003      	b.n	8002486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800247e:	887b      	ldrh	r3, [r7, #2]
 8002480:	041a      	lsls	r2, r3, #16
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	619a      	str	r2, [r3, #24]
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
	...

08002494 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b082      	sub	sp, #8
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800249e:	4b08      	ldr	r3, [pc, #32]	; (80024c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024a0:	695a      	ldr	r2, [r3, #20]
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80024ac:	88fb      	ldrh	r3, [r7, #6]
 80024ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80024b0:	88fb      	ldrh	r3, [r7, #6]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7fe fc28 	bl	8000d08 <HAL_GPIO_EXTI_Callback>
  }
}
 80024b8:	bf00      	nop
 80024ba:	3708      	adds	r7, #8
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	40013c00 	.word	0x40013c00

080024c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d101      	bne.n	80024d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e264      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0301 	and.w	r3, r3, #1
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d075      	beq.n	80025ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024e2:	4ba3      	ldr	r3, [pc, #652]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f003 030c 	and.w	r3, r3, #12
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	d00c      	beq.n	8002508 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024ee:	4ba0      	ldr	r3, [pc, #640]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80024f6:	2b08      	cmp	r3, #8
 80024f8:	d112      	bne.n	8002520 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80024fa:	4b9d      	ldr	r3, [pc, #628]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002502:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002506:	d10b      	bne.n	8002520 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002508:	4b99      	ldr	r3, [pc, #612]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002510:	2b00      	cmp	r3, #0
 8002512:	d05b      	beq.n	80025cc <HAL_RCC_OscConfig+0x108>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d157      	bne.n	80025cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800251c:	2301      	movs	r3, #1
 800251e:	e23f      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002528:	d106      	bne.n	8002538 <HAL_RCC_OscConfig+0x74>
 800252a:	4b91      	ldr	r3, [pc, #580]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	4a90      	ldr	r2, [pc, #576]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002530:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	e01d      	b.n	8002574 <HAL_RCC_OscConfig+0xb0>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x98>
 8002542:	4b8b      	ldr	r3, [pc, #556]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a8a      	ldr	r2, [pc, #552]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002548:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800254c:	6013      	str	r3, [r2, #0]
 800254e:	4b88      	ldr	r3, [pc, #544]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a87      	ldr	r2, [pc, #540]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002554:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002558:	6013      	str	r3, [r2, #0]
 800255a:	e00b      	b.n	8002574 <HAL_RCC_OscConfig+0xb0>
 800255c:	4b84      	ldr	r3, [pc, #528]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a83      	ldr	r2, [pc, #524]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002566:	6013      	str	r3, [r2, #0]
 8002568:	4b81      	ldr	r3, [pc, #516]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a80      	ldr	r2, [pc, #512]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 800256e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002572:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d013      	beq.n	80025a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800257c:	f7ff f964 	bl	8001848 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002582:	e008      	b.n	8002596 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002584:	f7ff f960 	bl	8001848 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e204      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002596:	4b76      	ldr	r3, [pc, #472]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCC_OscConfig+0xc0>
 80025a2:	e014      	b.n	80025ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025a4:	f7ff f950 	bl	8001848 <HAL_GetTick>
 80025a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025ac:	f7ff f94c 	bl	8001848 <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b64      	cmp	r3, #100	; 0x64
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e1f0      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025be:	4b6c      	ldr	r3, [pc, #432]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1f0      	bne.n	80025ac <HAL_RCC_OscConfig+0xe8>
 80025ca:	e000      	b.n	80025ce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d063      	beq.n	80026a2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025da:	4b65      	ldr	r3, [pc, #404]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 80025dc:	689b      	ldr	r3, [r3, #8]
 80025de:	f003 030c 	and.w	r3, r3, #12
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00b      	beq.n	80025fe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025e6:	4b62      	ldr	r3, [pc, #392]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80025ee:	2b08      	cmp	r3, #8
 80025f0:	d11c      	bne.n	800262c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80025f2:	4b5f      	ldr	r3, [pc, #380]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d116      	bne.n	800262c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025fe:	4b5c      	ldr	r3, [pc, #368]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d005      	beq.n	8002616 <HAL_RCC_OscConfig+0x152>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
 800260e:	2b01      	cmp	r3, #1
 8002610:	d001      	beq.n	8002616 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002612:	2301      	movs	r3, #1
 8002614:	e1c4      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002616:	4b56      	ldr	r3, [pc, #344]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4952      	ldr	r1, [pc, #328]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002626:	4313      	orrs	r3, r2
 8002628:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800262a:	e03a      	b.n	80026a2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68db      	ldr	r3, [r3, #12]
 8002630:	2b00      	cmp	r3, #0
 8002632:	d020      	beq.n	8002676 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002634:	4b4f      	ldr	r3, [pc, #316]	; (8002774 <HAL_RCC_OscConfig+0x2b0>)
 8002636:	2201      	movs	r2, #1
 8002638:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800263a:	f7ff f905 	bl	8001848 <HAL_GetTick>
 800263e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002640:	e008      	b.n	8002654 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002642:	f7ff f901 	bl	8001848 <HAL_GetTick>
 8002646:	4602      	mov	r2, r0
 8002648:	693b      	ldr	r3, [r7, #16]
 800264a:	1ad3      	subs	r3, r2, r3
 800264c:	2b02      	cmp	r3, #2
 800264e:	d901      	bls.n	8002654 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002650:	2303      	movs	r3, #3
 8002652:	e1a5      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002654:	4b46      	ldr	r3, [pc, #280]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d0f0      	beq.n	8002642 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002660:	4b43      	ldr	r3, [pc, #268]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	691b      	ldr	r3, [r3, #16]
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4940      	ldr	r1, [pc, #256]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	4313      	orrs	r3, r2
 8002672:	600b      	str	r3, [r1, #0]
 8002674:	e015      	b.n	80026a2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002676:	4b3f      	ldr	r3, [pc, #252]	; (8002774 <HAL_RCC_OscConfig+0x2b0>)
 8002678:	2200      	movs	r2, #0
 800267a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800267c:	f7ff f8e4 	bl	8001848 <HAL_GetTick>
 8002680:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002682:	e008      	b.n	8002696 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002684:	f7ff f8e0 	bl	8001848 <HAL_GetTick>
 8002688:	4602      	mov	r2, r0
 800268a:	693b      	ldr	r3, [r7, #16]
 800268c:	1ad3      	subs	r3, r2, r3
 800268e:	2b02      	cmp	r3, #2
 8002690:	d901      	bls.n	8002696 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002692:	2303      	movs	r3, #3
 8002694:	e184      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002696:	4b36      	ldr	r3, [pc, #216]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0302 	and.w	r3, r3, #2
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d1f0      	bne.n	8002684 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d030      	beq.n	8002710 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d016      	beq.n	80026e4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026b6:	4b30      	ldr	r3, [pc, #192]	; (8002778 <HAL_RCC_OscConfig+0x2b4>)
 80026b8:	2201      	movs	r2, #1
 80026ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026bc:	f7ff f8c4 	bl	8001848 <HAL_GetTick>
 80026c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026c2:	e008      	b.n	80026d6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c4:	f7ff f8c0 	bl	8001848 <HAL_GetTick>
 80026c8:	4602      	mov	r2, r0
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	1ad3      	subs	r3, r2, r3
 80026ce:	2b02      	cmp	r3, #2
 80026d0:	d901      	bls.n	80026d6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80026d2:	2303      	movs	r3, #3
 80026d4:	e164      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026d6:	4b26      	ldr	r3, [pc, #152]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 80026d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d0f0      	beq.n	80026c4 <HAL_RCC_OscConfig+0x200>
 80026e2:	e015      	b.n	8002710 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026e4:	4b24      	ldr	r3, [pc, #144]	; (8002778 <HAL_RCC_OscConfig+0x2b4>)
 80026e6:	2200      	movs	r2, #0
 80026e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026ea:	f7ff f8ad 	bl	8001848 <HAL_GetTick>
 80026ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f2:	f7ff f8a9 	bl	8001848 <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e14d      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002704:	4b1a      	ldr	r3, [pc, #104]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002708:	f003 0302 	and.w	r3, r3, #2
 800270c:	2b00      	cmp	r3, #0
 800270e:	d1f0      	bne.n	80026f2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 0304 	and.w	r3, r3, #4
 8002718:	2b00      	cmp	r3, #0
 800271a:	f000 80a0 	beq.w	800285e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800271e:	2300      	movs	r3, #0
 8002720:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002722:	4b13      	ldr	r3, [pc, #76]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d10f      	bne.n	800274e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800272e:	2300      	movs	r3, #0
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	4b0f      	ldr	r3, [pc, #60]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	4a0e      	ldr	r2, [pc, #56]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002738:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800273c:	6413      	str	r3, [r2, #64]	; 0x40
 800273e:	4b0c      	ldr	r3, [pc, #48]	; (8002770 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002742:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002746:	60bb      	str	r3, [r7, #8]
 8002748:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800274a:	2301      	movs	r3, #1
 800274c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800274e:	4b0b      	ldr	r3, [pc, #44]	; (800277c <HAL_RCC_OscConfig+0x2b8>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002756:	2b00      	cmp	r3, #0
 8002758:	d121      	bne.n	800279e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800275a:	4b08      	ldr	r3, [pc, #32]	; (800277c <HAL_RCC_OscConfig+0x2b8>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a07      	ldr	r2, [pc, #28]	; (800277c <HAL_RCC_OscConfig+0x2b8>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002764:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002766:	f7ff f86f 	bl	8001848 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800276c:	e011      	b.n	8002792 <HAL_RCC_OscConfig+0x2ce>
 800276e:	bf00      	nop
 8002770:	40023800 	.word	0x40023800
 8002774:	42470000 	.word	0x42470000
 8002778:	42470e80 	.word	0x42470e80
 800277c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002780:	f7ff f862 	bl	8001848 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e106      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002792:	4b85      	ldr	r3, [pc, #532]	; (80029a8 <HAL_RCC_OscConfig+0x4e4>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800279a:	2b00      	cmp	r3, #0
 800279c:	d0f0      	beq.n	8002780 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d106      	bne.n	80027b4 <HAL_RCC_OscConfig+0x2f0>
 80027a6:	4b81      	ldr	r3, [pc, #516]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027aa:	4a80      	ldr	r2, [pc, #512]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027ac:	f043 0301 	orr.w	r3, r3, #1
 80027b0:	6713      	str	r3, [r2, #112]	; 0x70
 80027b2:	e01c      	b.n	80027ee <HAL_RCC_OscConfig+0x32a>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d10c      	bne.n	80027d6 <HAL_RCC_OscConfig+0x312>
 80027bc:	4b7b      	ldr	r3, [pc, #492]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027c0:	4a7a      	ldr	r2, [pc, #488]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027c2:	f043 0304 	orr.w	r3, r3, #4
 80027c6:	6713      	str	r3, [r2, #112]	; 0x70
 80027c8:	4b78      	ldr	r3, [pc, #480]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027cc:	4a77      	ldr	r2, [pc, #476]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027ce:	f043 0301 	orr.w	r3, r3, #1
 80027d2:	6713      	str	r3, [r2, #112]	; 0x70
 80027d4:	e00b      	b.n	80027ee <HAL_RCC_OscConfig+0x32a>
 80027d6:	4b75      	ldr	r3, [pc, #468]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	4a74      	ldr	r2, [pc, #464]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70
 80027e2:	4b72      	ldr	r3, [pc, #456]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e6:	4a71      	ldr	r2, [pc, #452]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80027e8:	f023 0304 	bic.w	r3, r3, #4
 80027ec:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d015      	beq.n	8002822 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f6:	f7ff f827 	bl	8001848 <HAL_GetTick>
 80027fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027fc:	e00a      	b.n	8002814 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80027fe:	f7ff f823 	bl	8001848 <HAL_GetTick>
 8002802:	4602      	mov	r2, r0
 8002804:	693b      	ldr	r3, [r7, #16]
 8002806:	1ad3      	subs	r3, r2, r3
 8002808:	f241 3288 	movw	r2, #5000	; 0x1388
 800280c:	4293      	cmp	r3, r2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e0c5      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002814:	4b65      	ldr	r3, [pc, #404]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 8002816:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ee      	beq.n	80027fe <HAL_RCC_OscConfig+0x33a>
 8002820:	e014      	b.n	800284c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002822:	f7ff f811 	bl	8001848 <HAL_GetTick>
 8002826:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002828:	e00a      	b.n	8002840 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800282a:	f7ff f80d 	bl	8001848 <HAL_GetTick>
 800282e:	4602      	mov	r2, r0
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	4293      	cmp	r3, r2
 800283a:	d901      	bls.n	8002840 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800283c:	2303      	movs	r3, #3
 800283e:	e0af      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002840:	4b5a      	ldr	r3, [pc, #360]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 8002842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d1ee      	bne.n	800282a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800284c:	7dfb      	ldrb	r3, [r7, #23]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d105      	bne.n	800285e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002852:	4b56      	ldr	r3, [pc, #344]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	4a55      	ldr	r2, [pc, #340]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 8002858:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800285c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	699b      	ldr	r3, [r3, #24]
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 809b 	beq.w	800299e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002868:	4b50      	ldr	r3, [pc, #320]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 030c 	and.w	r3, r3, #12
 8002870:	2b08      	cmp	r3, #8
 8002872:	d05c      	beq.n	800292e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	699b      	ldr	r3, [r3, #24]
 8002878:	2b02      	cmp	r3, #2
 800287a:	d141      	bne.n	8002900 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	4b4c      	ldr	r3, [pc, #304]	; (80029b0 <HAL_RCC_OscConfig+0x4ec>)
 800287e:	2200      	movs	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002882:	f7fe ffe1 	bl	8001848 <HAL_GetTick>
 8002886:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002888:	e008      	b.n	800289c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800288a:	f7fe ffdd 	bl	8001848 <HAL_GetTick>
 800288e:	4602      	mov	r2, r0
 8002890:	693b      	ldr	r3, [r7, #16]
 8002892:	1ad3      	subs	r3, r2, r3
 8002894:	2b02      	cmp	r3, #2
 8002896:	d901      	bls.n	800289c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002898:	2303      	movs	r3, #3
 800289a:	e081      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800289c:	4b43      	ldr	r3, [pc, #268]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d1f0      	bne.n	800288a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	69da      	ldr	r2, [r3, #28]
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	431a      	orrs	r2, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028b6:	019b      	lsls	r3, r3, #6
 80028b8:	431a      	orrs	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	3b01      	subs	r3, #1
 80028c2:	041b      	lsls	r3, r3, #16
 80028c4:	431a      	orrs	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028ca:	061b      	lsls	r3, r3, #24
 80028cc:	4937      	ldr	r1, [pc, #220]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80028d2:	4b37      	ldr	r3, [pc, #220]	; (80029b0 <HAL_RCC_OscConfig+0x4ec>)
 80028d4:	2201      	movs	r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d8:	f7fe ffb6 	bl	8001848 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80028e0:	f7fe ffb2 	bl	8001848 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e056      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028f2:	4b2e      	ldr	r3, [pc, #184]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0x41c>
 80028fe:	e04e      	b.n	800299e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002900:	4b2b      	ldr	r3, [pc, #172]	; (80029b0 <HAL_RCC_OscConfig+0x4ec>)
 8002902:	2200      	movs	r2, #0
 8002904:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002906:	f7fe ff9f 	bl	8001848 <HAL_GetTick>
 800290a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800290c:	e008      	b.n	8002920 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800290e:	f7fe ff9b 	bl	8001848 <HAL_GetTick>
 8002912:	4602      	mov	r2, r0
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	1ad3      	subs	r3, r2, r3
 8002918:	2b02      	cmp	r3, #2
 800291a:	d901      	bls.n	8002920 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800291c:	2303      	movs	r3, #3
 800291e:	e03f      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002920:	4b22      	ldr	r3, [pc, #136]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002928:	2b00      	cmp	r3, #0
 800292a:	d1f0      	bne.n	800290e <HAL_RCC_OscConfig+0x44a>
 800292c:	e037      	b.n	800299e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	699b      	ldr	r3, [r3, #24]
 8002932:	2b01      	cmp	r3, #1
 8002934:	d101      	bne.n	800293a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e032      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800293a:	4b1c      	ldr	r3, [pc, #112]	; (80029ac <HAL_RCC_OscConfig+0x4e8>)
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	699b      	ldr	r3, [r3, #24]
 8002944:	2b01      	cmp	r3, #1
 8002946:	d028      	beq.n	800299a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002952:	429a      	cmp	r2, r3
 8002954:	d121      	bne.n	800299a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002960:	429a      	cmp	r2, r3
 8002962:	d11a      	bne.n	800299a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800296a:	4013      	ands	r3, r2
 800296c:	687a      	ldr	r2, [r7, #4]
 800296e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002970:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002972:	4293      	cmp	r3, r2
 8002974:	d111      	bne.n	800299a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002980:	085b      	lsrs	r3, r3, #1
 8002982:	3b01      	subs	r3, #1
 8002984:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002986:	429a      	cmp	r2, r3
 8002988:	d107      	bne.n	800299a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002996:	429a      	cmp	r2, r3
 8002998:	d001      	beq.n	800299e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e000      	b.n	80029a0 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3718      	adds	r7, #24
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	40007000 	.word	0x40007000
 80029ac:	40023800 	.word	0x40023800
 80029b0:	42470060 	.word	0x42470060

080029b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b084      	sub	sp, #16
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
 80029bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e0cc      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029c8:	4b68      	ldr	r3, [pc, #416]	; (8002b6c <HAL_RCC_ClockConfig+0x1b8>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0307 	and.w	r3, r3, #7
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	429a      	cmp	r2, r3
 80029d4:	d90c      	bls.n	80029f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029d6:	4b65      	ldr	r3, [pc, #404]	; (8002b6c <HAL_RCC_ClockConfig+0x1b8>)
 80029d8:	683a      	ldr	r2, [r7, #0]
 80029da:	b2d2      	uxtb	r2, r2
 80029dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029de:	4b63      	ldr	r3, [pc, #396]	; (8002b6c <HAL_RCC_ClockConfig+0x1b8>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0307 	and.w	r3, r3, #7
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d001      	beq.n	80029f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80029ec:	2301      	movs	r3, #1
 80029ee:	e0b8      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f003 0302 	and.w	r3, r3, #2
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d020      	beq.n	8002a3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0304 	and.w	r3, r3, #4
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d005      	beq.n	8002a14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002a08:	4b59      	ldr	r3, [pc, #356]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	4a58      	ldr	r2, [pc, #352]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a0e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002a12:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d005      	beq.n	8002a2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002a20:	4b53      	ldr	r3, [pc, #332]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	4a52      	ldr	r2, [pc, #328]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a26:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002a2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002a2c:	4b50      	ldr	r3, [pc, #320]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a2e:	689b      	ldr	r3, [r3, #8]
 8002a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	689b      	ldr	r3, [r3, #8]
 8002a38:	494d      	ldr	r1, [pc, #308]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f003 0301 	and.w	r3, r3, #1
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d044      	beq.n	8002ad4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a52:	4b47      	ldr	r3, [pc, #284]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d119      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e07f      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	685b      	ldr	r3, [r3, #4]
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d003      	beq.n	8002a72 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002a6e:	2b03      	cmp	r3, #3
 8002a70:	d107      	bne.n	8002a82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a72:	4b3f      	ldr	r3, [pc, #252]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d109      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e06f      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a82:	4b3b      	ldr	r3, [pc, #236]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0302 	and.w	r3, r3, #2
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d101      	bne.n	8002a92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	e067      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a92:	4b37      	ldr	r3, [pc, #220]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f023 0203 	bic.w	r2, r3, #3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	4934      	ldr	r1, [pc, #208]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002aa4:	f7fe fed0 	bl	8001848 <HAL_GetTick>
 8002aa8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aaa:	e00a      	b.n	8002ac2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aac:	f7fe fecc 	bl	8001848 <HAL_GetTick>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	1ad3      	subs	r3, r2, r3
 8002ab6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d901      	bls.n	8002ac2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002abe:	2303      	movs	r3, #3
 8002ac0:	e04f      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ac2:	4b2b      	ldr	r3, [pc, #172]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	f003 020c 	and.w	r2, r3, #12
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	429a      	cmp	r2, r3
 8002ad2:	d1eb      	bne.n	8002aac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ad4:	4b25      	ldr	r3, [pc, #148]	; (8002b6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	683a      	ldr	r2, [r7, #0]
 8002ade:	429a      	cmp	r2, r3
 8002ae0:	d20c      	bcs.n	8002afc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ae2:	4b22      	ldr	r3, [pc, #136]	; (8002b6c <HAL_RCC_ClockConfig+0x1b8>)
 8002ae4:	683a      	ldr	r2, [r7, #0]
 8002ae6:	b2d2      	uxtb	r2, r2
 8002ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002aea:	4b20      	ldr	r3, [pc, #128]	; (8002b6c <HAL_RCC_ClockConfig+0x1b8>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f003 0307 	and.w	r3, r3, #7
 8002af2:	683a      	ldr	r2, [r7, #0]
 8002af4:	429a      	cmp	r2, r3
 8002af6:	d001      	beq.n	8002afc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e032      	b.n	8002b62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0304 	and.w	r3, r3, #4
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d008      	beq.n	8002b1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	68db      	ldr	r3, [r3, #12]
 8002b14:	4916      	ldr	r1, [pc, #88]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b16:	4313      	orrs	r3, r2
 8002b18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f003 0308 	and.w	r3, r3, #8
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d009      	beq.n	8002b3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b26:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	691b      	ldr	r3, [r3, #16]
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	490e      	ldr	r1, [pc, #56]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b36:	4313      	orrs	r3, r2
 8002b38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002b3a:	f000 f821 	bl	8002b80 <HAL_RCC_GetSysClockFreq>
 8002b3e:	4602      	mov	r2, r0
 8002b40:	4b0b      	ldr	r3, [pc, #44]	; (8002b70 <HAL_RCC_ClockConfig+0x1bc>)
 8002b42:	689b      	ldr	r3, [r3, #8]
 8002b44:	091b      	lsrs	r3, r3, #4
 8002b46:	f003 030f 	and.w	r3, r3, #15
 8002b4a:	490a      	ldr	r1, [pc, #40]	; (8002b74 <HAL_RCC_ClockConfig+0x1c0>)
 8002b4c:	5ccb      	ldrb	r3, [r1, r3]
 8002b4e:	fa22 f303 	lsr.w	r3, r2, r3
 8002b52:	4a09      	ldr	r2, [pc, #36]	; (8002b78 <HAL_RCC_ClockConfig+0x1c4>)
 8002b54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002b56:	4b09      	ldr	r3, [pc, #36]	; (8002b7c <HAL_RCC_ClockConfig+0x1c8>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f7fe fe30 	bl	80017c0 <HAL_InitTick>

  return HAL_OK;
 8002b60:	2300      	movs	r3, #0
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3710      	adds	r7, #16
 8002b66:	46bd      	mov	sp, r7
 8002b68:	bd80      	pop	{r7, pc}
 8002b6a:	bf00      	nop
 8002b6c:	40023c00 	.word	0x40023c00
 8002b70:	40023800 	.word	0x40023800
 8002b74:	080055fc 	.word	0x080055fc
 8002b78:	20000028 	.word	0x20000028
 8002b7c:	2000002c 	.word	0x2000002c

08002b80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002b84:	b084      	sub	sp, #16
 8002b86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	607b      	str	r3, [r7, #4]
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
 8002b90:	2300      	movs	r3, #0
 8002b92:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002b98:	4b67      	ldr	r3, [pc, #412]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	f003 030c 	and.w	r3, r3, #12
 8002ba0:	2b08      	cmp	r3, #8
 8002ba2:	d00d      	beq.n	8002bc0 <HAL_RCC_GetSysClockFreq+0x40>
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	f200 80bd 	bhi.w	8002d24 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d002      	beq.n	8002bb4 <HAL_RCC_GetSysClockFreq+0x34>
 8002bae:	2b04      	cmp	r3, #4
 8002bb0:	d003      	beq.n	8002bba <HAL_RCC_GetSysClockFreq+0x3a>
 8002bb2:	e0b7      	b.n	8002d24 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002bb4:	4b61      	ldr	r3, [pc, #388]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002bb6:	60bb      	str	r3, [r7, #8]
       break;
 8002bb8:	e0b7      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002bba:	4b61      	ldr	r3, [pc, #388]	; (8002d40 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002bbc:	60bb      	str	r3, [r7, #8]
      break;
 8002bbe:	e0b4      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002bc0:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bc2:	685b      	ldr	r3, [r3, #4]
 8002bc4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bca:	4b5b      	ldr	r3, [pc, #364]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d04d      	beq.n	8002c72 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd6:	4b58      	ldr	r3, [pc, #352]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	461a      	mov	r2, r3
 8002bde:	f04f 0300 	mov.w	r3, #0
 8002be2:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002be6:	f04f 0100 	mov.w	r1, #0
 8002bea:	ea02 0800 	and.w	r8, r2, r0
 8002bee:	ea03 0901 	and.w	r9, r3, r1
 8002bf2:	4640      	mov	r0, r8
 8002bf4:	4649      	mov	r1, r9
 8002bf6:	f04f 0200 	mov.w	r2, #0
 8002bfa:	f04f 0300 	mov.w	r3, #0
 8002bfe:	014b      	lsls	r3, r1, #5
 8002c00:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002c04:	0142      	lsls	r2, r0, #5
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	ebb0 0008 	subs.w	r0, r0, r8
 8002c0e:	eb61 0109 	sbc.w	r1, r1, r9
 8002c12:	f04f 0200 	mov.w	r2, #0
 8002c16:	f04f 0300 	mov.w	r3, #0
 8002c1a:	018b      	lsls	r3, r1, #6
 8002c1c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002c20:	0182      	lsls	r2, r0, #6
 8002c22:	1a12      	subs	r2, r2, r0
 8002c24:	eb63 0301 	sbc.w	r3, r3, r1
 8002c28:	f04f 0000 	mov.w	r0, #0
 8002c2c:	f04f 0100 	mov.w	r1, #0
 8002c30:	00d9      	lsls	r1, r3, #3
 8002c32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002c36:	00d0      	lsls	r0, r2, #3
 8002c38:	4602      	mov	r2, r0
 8002c3a:	460b      	mov	r3, r1
 8002c3c:	eb12 0208 	adds.w	r2, r2, r8
 8002c40:	eb43 0309 	adc.w	r3, r3, r9
 8002c44:	f04f 0000 	mov.w	r0, #0
 8002c48:	f04f 0100 	mov.w	r1, #0
 8002c4c:	0259      	lsls	r1, r3, #9
 8002c4e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002c52:	0250      	lsls	r0, r2, #9
 8002c54:	4602      	mov	r2, r0
 8002c56:	460b      	mov	r3, r1
 8002c58:	4610      	mov	r0, r2
 8002c5a:	4619      	mov	r1, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	f04f 0300 	mov.w	r3, #0
 8002c64:	f7fd fab6 	bl	80001d4 <__aeabi_uldivmod>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	60fb      	str	r3, [r7, #12]
 8002c70:	e04a      	b.n	8002d08 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002c72:	4b31      	ldr	r3, [pc, #196]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	099b      	lsrs	r3, r3, #6
 8002c78:	461a      	mov	r2, r3
 8002c7a:	f04f 0300 	mov.w	r3, #0
 8002c7e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002c82:	f04f 0100 	mov.w	r1, #0
 8002c86:	ea02 0400 	and.w	r4, r2, r0
 8002c8a:	ea03 0501 	and.w	r5, r3, r1
 8002c8e:	4620      	mov	r0, r4
 8002c90:	4629      	mov	r1, r5
 8002c92:	f04f 0200 	mov.w	r2, #0
 8002c96:	f04f 0300 	mov.w	r3, #0
 8002c9a:	014b      	lsls	r3, r1, #5
 8002c9c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002ca0:	0142      	lsls	r2, r0, #5
 8002ca2:	4610      	mov	r0, r2
 8002ca4:	4619      	mov	r1, r3
 8002ca6:	1b00      	subs	r0, r0, r4
 8002ca8:	eb61 0105 	sbc.w	r1, r1, r5
 8002cac:	f04f 0200 	mov.w	r2, #0
 8002cb0:	f04f 0300 	mov.w	r3, #0
 8002cb4:	018b      	lsls	r3, r1, #6
 8002cb6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002cba:	0182      	lsls	r2, r0, #6
 8002cbc:	1a12      	subs	r2, r2, r0
 8002cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8002cc2:	f04f 0000 	mov.w	r0, #0
 8002cc6:	f04f 0100 	mov.w	r1, #0
 8002cca:	00d9      	lsls	r1, r3, #3
 8002ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002cd0:	00d0      	lsls	r0, r2, #3
 8002cd2:	4602      	mov	r2, r0
 8002cd4:	460b      	mov	r3, r1
 8002cd6:	1912      	adds	r2, r2, r4
 8002cd8:	eb45 0303 	adc.w	r3, r5, r3
 8002cdc:	f04f 0000 	mov.w	r0, #0
 8002ce0:	f04f 0100 	mov.w	r1, #0
 8002ce4:	0299      	lsls	r1, r3, #10
 8002ce6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002cea:	0290      	lsls	r0, r2, #10
 8002cec:	4602      	mov	r2, r0
 8002cee:	460b      	mov	r3, r1
 8002cf0:	4610      	mov	r0, r2
 8002cf2:	4619      	mov	r1, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	461a      	mov	r2, r3
 8002cf8:	f04f 0300 	mov.w	r3, #0
 8002cfc:	f7fd fa6a 	bl	80001d4 <__aeabi_uldivmod>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4613      	mov	r3, r2
 8002d06:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002d08:	4b0b      	ldr	r3, [pc, #44]	; (8002d38 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	0c1b      	lsrs	r3, r3, #16
 8002d0e:	f003 0303 	and.w	r3, r3, #3
 8002d12:	3301      	adds	r3, #1
 8002d14:	005b      	lsls	r3, r3, #1
 8002d16:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002d18:	68fa      	ldr	r2, [r7, #12]
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d20:	60bb      	str	r3, [r7, #8]
      break;
 8002d22:	e002      	b.n	8002d2a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002d24:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d26:	60bb      	str	r3, [r7, #8]
      break;
 8002d28:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d36:	bf00      	nop
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	00f42400 	.word	0x00f42400
 8002d40:	007a1200 	.word	0x007a1200

08002d44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000028 	.word	0x20000028

08002d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002d60:	f7ff fff0 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d64:	4602      	mov	r2, r0
 8002d66:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002d68:	689b      	ldr	r3, [r3, #8]
 8002d6a:	0a9b      	lsrs	r3, r3, #10
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	4903      	ldr	r1, [pc, #12]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d72:	5ccb      	ldrb	r3, [r1, r3]
 8002d74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40023800 	.word	0x40023800
 8002d80:	0800560c 	.word	0x0800560c

08002d84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d88:	f7ff ffdc 	bl	8002d44 <HAL_RCC_GetHCLKFreq>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	4b05      	ldr	r3, [pc, #20]	; (8002da4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d90:	689b      	ldr	r3, [r3, #8]
 8002d92:	0b5b      	lsrs	r3, r3, #13
 8002d94:	f003 0307 	and.w	r3, r3, #7
 8002d98:	4903      	ldr	r1, [pc, #12]	; (8002da8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d9a:	5ccb      	ldrb	r3, [r1, r3]
 8002d9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	bd80      	pop	{r7, pc}
 8002da4:	40023800 	.word	0x40023800
 8002da8:	0800560c 	.word	0x0800560c

08002dac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b086      	sub	sp, #24
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8002db8:	2300      	movs	r3, #0
 8002dba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d105      	bne.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d035      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002dd4:	4b67      	ldr	r3, [pc, #412]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002dda:	f7fe fd35 	bl	8001848 <HAL_GetTick>
 8002dde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002de0:	e008      	b.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002de2:	f7fe fd31 	bl	8001848 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e0ba      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002df4:	4b60      	ldr	r3, [pc, #384]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d1f0      	bne.n	8002de2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	685b      	ldr	r3, [r3, #4]
 8002e04:	019a      	lsls	r2, r3, #6
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	071b      	lsls	r3, r3, #28
 8002e0c:	495a      	ldr	r1, [pc, #360]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002e14:	4b57      	ldr	r3, [pc, #348]	; (8002f74 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002e16:	2201      	movs	r2, #1
 8002e18:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002e1a:	f7fe fd15 	bl	8001848 <HAL_GetTick>
 8002e1e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e20:	e008      	b.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8002e22:	f7fe fd11 	bl	8001848 <HAL_GetTick>
 8002e26:	4602      	mov	r2, r0
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d901      	bls.n	8002e34 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002e30:	2303      	movs	r3, #3
 8002e32:	e09a      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002e34:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d0f0      	beq.n	8002e22 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0302 	and.w	r3, r3, #2
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8083 	beq.w	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002e4e:	2300      	movs	r3, #0
 8002e50:	60fb      	str	r3, [r7, #12]
 8002e52:	4b49      	ldr	r3, [pc, #292]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	4a48      	ldr	r2, [pc, #288]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e5e:	4b46      	ldr	r3, [pc, #280]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e66:	60fb      	str	r3, [r7, #12]
 8002e68:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8002e6a:	4b44      	ldr	r3, [pc, #272]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a43      	ldr	r2, [pc, #268]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e74:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002e76:	f7fe fce7 	bl	8001848 <HAL_GetTick>
 8002e7a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e7c:	e008      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7fe fce3 	bl	8001848 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e06c      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8002e90:	4b3a      	ldr	r3, [pc, #232]	; (8002f7c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e9c:	4b36      	ldr	r3, [pc, #216]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ea0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea4:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d02f      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d028      	beq.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002eba:	4b2f      	ldr	r3, [pc, #188]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ec2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002ec4:	4b2e      	ldr	r3, [pc, #184]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eca:	4b2d      	ldr	r3, [pc, #180]	; (8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8002ed0:	4a29      	ldr	r2, [pc, #164]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ed2:	693b      	ldr	r3, [r7, #16]
 8002ed4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002ed6:	4b28      	ldr	r3, [pc, #160]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002ed8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d114      	bne.n	8002f0c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fe fcb1 	bl	8001848 <HAL_GetTick>
 8002ee6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002eea:	f7fe fcad 	bl	8001848 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d901      	bls.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8002efc:	2303      	movs	r3, #3
 8002efe:	e034      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x1be>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f00:	4b1d      	ldr	r3, [pc, #116]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d0ee      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f18:	d10d      	bne.n	8002f36 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f1c:	689b      	ldr	r3, [r3, #8]
 8002f1e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8002f2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f2e:	4912      	ldr	r1, [pc, #72]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	608b      	str	r3, [r1, #8]
 8002f34:	e005      	b.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	4a0f      	ldr	r2, [pc, #60]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f3c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002f40:	6093      	str	r3, [r2, #8]
 8002f42:	4b0d      	ldr	r3, [pc, #52]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f44:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f4e:	490a      	ldr	r1, [pc, #40]	; (8002f78 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0308 	and.w	r3, r3, #8
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d003      	beq.n	8002f68 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	7c1a      	ldrb	r2, [r3, #16]
 8002f64:	4b07      	ldr	r3, [pc, #28]	; (8002f84 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002f66:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8002f68:	2300      	movs	r3, #0
}
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	42470068 	.word	0x42470068
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40007000 	.word	0x40007000
 8002f80:	42470e40 	.word	0x42470e40
 8002f84:	424711e0 	.word	0x424711e0

08002f88 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b082      	sub	sp, #8
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e083      	b.n	80030a2 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	7f5b      	ldrb	r3, [r3, #29]
 8002f9e:	b2db      	uxtb	r3, r3
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d105      	bne.n	8002fb0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002faa:	6878      	ldr	r0, [r7, #4]
 8002fac:	f7fe fa3a 	bl	8001424 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2202      	movs	r2, #2
 8002fb4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	22ca      	movs	r2, #202	; 0xca
 8002fbc:	625a      	str	r2, [r3, #36]	; 0x24
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	2253      	movs	r2, #83	; 0x53
 8002fc4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f000 fc26 	bl	8003818 <RTC_EnterInitMode>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d008      	beq.n	8002fe4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	22ff      	movs	r2, #255	; 0xff
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2204      	movs	r2, #4
 8002fde:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e05e      	b.n	80030a2 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6812      	ldr	r2, [r2, #0]
 8002fee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8002ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ff6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	6899      	ldr	r1, [r3, #8]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	685a      	ldr	r2, [r3, #4]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	691b      	ldr	r3, [r3, #16]
 8003006:	431a      	orrs	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	431a      	orrs	r2, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	430a      	orrs	r2, r1
 8003014:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	687a      	ldr	r2, [r7, #4]
 800301c:	68d2      	ldr	r2, [r2, #12]
 800301e:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6919      	ldr	r1, [r3, #16]
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	041a      	lsls	r2, r3, #16
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	68da      	ldr	r2, [r3, #12]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003042:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	f003 0320 	and.w	r3, r3, #32
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10e      	bne.n	8003070 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fbb8 	bl	80037c8 <HAL_RTC_WaitForSynchro>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d008      	beq.n	8003070 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	22ff      	movs	r2, #255	; 0xff
 8003064:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2204      	movs	r2, #4
 800306a:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 800306c:	2301      	movs	r3, #1
 800306e:	e018      	b.n	80030a2 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800307e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	699a      	ldr	r2, [r3, #24]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	430a      	orrs	r2, r1
 8003090:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	22ff      	movs	r2, #255	; 0xff
 8003098:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80030a0:	2300      	movs	r3, #0
  }
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3708      	adds	r7, #8
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd80      	pop	{r7, pc}

080030aa <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80030aa:	b590      	push	{r4, r7, lr}
 80030ac:	b087      	sub	sp, #28
 80030ae:	af00      	add	r7, sp, #0
 80030b0:	60f8      	str	r0, [r7, #12]
 80030b2:	60b9      	str	r1, [r7, #8]
 80030b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80030b6:	2300      	movs	r3, #0
 80030b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	7f1b      	ldrb	r3, [r3, #28]
 80030be:	2b01      	cmp	r3, #1
 80030c0:	d101      	bne.n	80030c6 <HAL_RTC_SetTime+0x1c>
 80030c2:	2302      	movs	r3, #2
 80030c4:	e0aa      	b.n	800321c <HAL_RTC_SetTime+0x172>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	2202      	movs	r2, #2
 80030d0:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d126      	bne.n	8003126 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689b      	ldr	r3, [r3, #8]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d102      	bne.n	80030ec <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2200      	movs	r2, #0
 80030ea:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	781b      	ldrb	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f000 fbbd 	bl	8003870 <RTC_ByteToBcd2>
 80030f6:	4603      	mov	r3, r0
 80030f8:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	785b      	ldrb	r3, [r3, #1]
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fbb6 	bl	8003870 <RTC_ByteToBcd2>
 8003104:	4603      	mov	r3, r0
 8003106:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003108:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	789b      	ldrb	r3, [r3, #2]
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fbae 	bl	8003870 <RTC_ByteToBcd2>
 8003114:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8003116:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	78db      	ldrb	r3, [r3, #3]
 800311e:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8003120:	4313      	orrs	r3, r2
 8003122:	617b      	str	r3, [r7, #20]
 8003124:	e018      	b.n	8003158 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689b      	ldr	r3, [r3, #8]
 800312c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003130:	2b00      	cmp	r3, #0
 8003132:	d102      	bne.n	800313a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	2200      	movs	r2, #0
 8003138:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800313a:	68bb      	ldr	r3, [r7, #8]
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8003140:	68bb      	ldr	r3, [r7, #8]
 8003142:	785b      	ldrb	r3, [r3, #1]
 8003144:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003146:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8003148:	68ba      	ldr	r2, [r7, #8]
 800314a:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 800314c:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	78db      	ldrb	r3, [r3, #3]
 8003152:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8003154:	4313      	orrs	r3, r2
 8003156:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	22ca      	movs	r2, #202	; 0xca
 800315e:	625a      	str	r2, [r3, #36]	; 0x24
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2253      	movs	r2, #83	; 0x53
 8003166:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f000 fb55 	bl	8003818 <RTC_EnterInitMode>
 800316e:	4603      	mov	r3, r0
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00b      	beq.n	800318c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	22ff      	movs	r2, #255	; 0xff
 800317a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2204      	movs	r2, #4
 8003180:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e047      	b.n	800321c <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	697b      	ldr	r3, [r7, #20]
 8003192:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003196:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800319a:	6013      	str	r3, [r2, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	689a      	ldr	r2, [r3, #8]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80031aa:	609a      	str	r2, [r3, #8]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	6899      	ldr	r1, [r3, #8]
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	68da      	ldr	r2, [r3, #12]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	431a      	orrs	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	430a      	orrs	r2, r1
 80031c2:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68da      	ldr	r2, [r3, #12]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031d2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	689b      	ldr	r3, [r3, #8]
 80031da:	f003 0320 	and.w	r3, r3, #32
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d111      	bne.n	8003206 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80031e2:	68f8      	ldr	r0, [r7, #12]
 80031e4:	f000 faf0 	bl	80037c8 <HAL_RTC_WaitForSynchro>
 80031e8:	4603      	mov	r3, r0
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d00b      	beq.n	8003206 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	22ff      	movs	r2, #255	; 0xff
 80031f4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	2204      	movs	r2, #4
 80031fa:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e00a      	b.n	800321c <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	22ff      	movs	r2, #255	; 0xff
 800320c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	2201      	movs	r2, #1
 8003212:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 800321a:	2300      	movs	r3, #0
  }
}
 800321c:	4618      	mov	r0, r3
 800321e:	371c      	adds	r7, #28
 8003220:	46bd      	mov	sp, r7
 8003222:	bd90      	pop	{r4, r7, pc}

08003224 <HAL_RTC_GetTime>:
  *        in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  *        Reading RTC current time locks the values in calendar shadow registers until current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b086      	sub	sp, #24
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003230:	2300      	movs	r3, #0
 8003232:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323a:	68bb      	ldr	r3, [r7, #8]
 800323c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003256:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800325a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16U);
 800325c:	697b      	ldr	r3, [r7, #20]
 800325e:	0c1b      	lsrs	r3, r3, #16
 8003260:	b2db      	uxtb	r3, r3
 8003262:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> 8U);
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	0a1b      	lsrs	r3, r3, #8
 8003270:	b2db      	uxtb	r3, r3
 8003272:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003276:	b2da      	uxtb	r2, r3
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	b2db      	uxtb	r3, r3
 8003280:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003284:	b2da      	uxtb	r2, r3
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16U);
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	0c1b      	lsrs	r3, r3, #16
 800328e:	b2db      	uxtb	r3, r3
 8003290:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003294:	b2da      	uxtb	r2, r3
 8003296:	68bb      	ldr	r3, [r7, #8]
 8003298:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d11a      	bne.n	80032d6 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	4618      	mov	r0, r3
 80032a6:	f000 fb01 	bl	80038ac <RTC_Bcd2ToByte>
 80032aa:	4603      	mov	r3, r0
 80032ac:	461a      	mov	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	785b      	ldrb	r3, [r3, #1]
 80032b6:	4618      	mov	r0, r3
 80032b8:	f000 faf8 	bl	80038ac <RTC_Bcd2ToByte>
 80032bc:	4603      	mov	r3, r0
 80032be:	461a      	mov	r2, r3
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	789b      	ldrb	r3, [r3, #2]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 faef 	bl	80038ac <RTC_Bcd2ToByte>
 80032ce:	4603      	mov	r3, r0
 80032d0:	461a      	mov	r2, r3
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80032d6:	2300      	movs	r3, #0
}
 80032d8:	4618      	mov	r0, r3
 80032da:	3718      	adds	r7, #24
 80032dc:	46bd      	mov	sp, r7
 80032de:	bd80      	pop	{r7, pc}

080032e0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80032e0:	b590      	push	{r4, r7, lr}
 80032e2:	b087      	sub	sp, #28
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	7f1b      	ldrb	r3, [r3, #28]
 80032f4:	2b01      	cmp	r3, #1
 80032f6:	d101      	bne.n	80032fc <HAL_RTC_SetDate+0x1c>
 80032f8:	2302      	movs	r3, #2
 80032fa:	e094      	b.n	8003426 <HAL_RTC_SetDate+0x146>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2201      	movs	r2, #1
 8003300:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	2202      	movs	r2, #2
 8003306:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d10e      	bne.n	800332c <HAL_RTC_SetDate+0x4c>
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	785b      	ldrb	r3, [r3, #1]
 8003312:	f003 0310 	and.w	r3, r3, #16
 8003316:	2b00      	cmp	r3, #0
 8003318:	d008      	beq.n	800332c <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	785b      	ldrb	r3, [r3, #1]
 800331e:	f023 0310 	bic.w	r3, r3, #16
 8003322:	b2db      	uxtb	r3, r3
 8003324:	330a      	adds	r3, #10
 8003326:	b2da      	uxtb	r2, r3
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11c      	bne.n	800336c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003332:	68bb      	ldr	r3, [r7, #8]
 8003334:	78db      	ldrb	r3, [r3, #3]
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fa9a 	bl	8003870 <RTC_ByteToBcd2>
 800333c:	4603      	mov	r3, r0
 800333e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8003340:	68bb      	ldr	r3, [r7, #8]
 8003342:	785b      	ldrb	r3, [r3, #1]
 8003344:	4618      	mov	r0, r3
 8003346:	f000 fa93 	bl	8003870 <RTC_ByteToBcd2>
 800334a:	4603      	mov	r3, r0
 800334c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800334e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	789b      	ldrb	r3, [r3, #2]
 8003354:	4618      	mov	r0, r3
 8003356:	f000 fa8b 	bl	8003870 <RTC_ByteToBcd2>
 800335a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800335c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	781b      	ldrb	r3, [r3, #0]
 8003364:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8003366:	4313      	orrs	r3, r2
 8003368:	617b      	str	r3, [r7, #20]
 800336a:	e00e      	b.n	800338a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	78db      	ldrb	r3, [r3, #3]
 8003370:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	785b      	ldrb	r3, [r3, #1]
 8003376:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003378:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800337a:	68ba      	ldr	r2, [r7, #8]
 800337c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800337e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8003380:	68bb      	ldr	r3, [r7, #8]
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8003386:	4313      	orrs	r3, r2
 8003388:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	22ca      	movs	r2, #202	; 0xca
 8003390:	625a      	str	r2, [r3, #36]	; 0x24
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	2253      	movs	r2, #83	; 0x53
 8003398:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800339a:	68f8      	ldr	r0, [r7, #12]
 800339c:	f000 fa3c 	bl	8003818 <RTC_EnterInitMode>
 80033a0:	4603      	mov	r3, r0
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d00b      	beq.n	80033be <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	22ff      	movs	r2, #255	; 0xff
 80033ac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2204      	movs	r2, #4
 80033b2:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	2200      	movs	r2, #0
 80033b8:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e033      	b.n	8003426 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80033c8:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80033cc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68da      	ldr	r2, [r3, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80033dc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f003 0320 	and.w	r3, r3, #32
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d111      	bne.n	8003410 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80033ec:	68f8      	ldr	r0, [r7, #12]
 80033ee:	f000 f9eb 	bl	80037c8 <HAL_RTC_WaitForSynchro>
 80033f2:	4603      	mov	r3, r0
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00b      	beq.n	8003410 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	22ff      	movs	r2, #255	; 0xff
 80033fe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2204      	movs	r2, #4
 8003404:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	2200      	movs	r2, #0
 800340a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800340c:	2301      	movs	r3, #1
 800340e:	e00a      	b.n	8003426 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	22ff      	movs	r2, #255	; 0xff
 8003416:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	2201      	movs	r2, #1
 800341c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8003424:	2300      	movs	r3, #0
  }
}
 8003426:	4618      	mov	r0, r3
 8003428:	371c      	adds	r7, #28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd90      	pop	{r4, r7, pc}

0800342e <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b086      	sub	sp, #24
 8003432:	af00      	add	r7, sp, #0
 8003434:	60f8      	str	r0, [r7, #12]
 8003436:	60b9      	str	r1, [r7, #8]
 8003438:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800343a:	2300      	movs	r3, #0
 800343c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003448:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800344c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16U);
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	0c1b      	lsrs	r3, r3, #16
 8003452:	b2da      	uxtb	r2, r3
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8U);
 8003458:	697b      	ldr	r3, [r7, #20]
 800345a:	0a1b      	lsrs	r3, r3, #8
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f003 031f 	and.w	r3, r3, #31
 8003462:	b2da      	uxtb	r2, r3
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	b2db      	uxtb	r3, r3
 800346c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003470:	b2da      	uxtb	r2, r3
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13U);
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	0b5b      	lsrs	r3, r3, #13
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f003 0307 	and.w	r3, r3, #7
 8003480:	b2da      	uxtb	r2, r3
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d11a      	bne.n	80034c2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800348c:	68bb      	ldr	r3, [r7, #8]
 800348e:	78db      	ldrb	r3, [r3, #3]
 8003490:	4618      	mov	r0, r3
 8003492:	f000 fa0b 	bl	80038ac <RTC_Bcd2ToByte>
 8003496:	4603      	mov	r3, r0
 8003498:	461a      	mov	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 fa02 	bl	80038ac <RTC_Bcd2ToByte>
 80034a8:	4603      	mov	r3, r0
 80034aa:	461a      	mov	r2, r3
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	789b      	ldrb	r3, [r3, #2]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f9f9 	bl	80038ac <RTC_Bcd2ToByte>
 80034ba:	4603      	mov	r3, r0
 80034bc:	461a      	mov	r2, r3
 80034be:	68bb      	ldr	r3, [r7, #8]
 80034c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80034cc:	b590      	push	{r4, r7, lr}
 80034ce:	b089      	sub	sp, #36	; 0x24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	2300      	movs	r3, #0
 80034de:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80034e0:	4b93      	ldr	r3, [pc, #588]	; (8003730 <HAL_RTC_SetAlarm_IT+0x264>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	4a93      	ldr	r2, [pc, #588]	; (8003734 <HAL_RTC_SetAlarm_IT+0x268>)
 80034e6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ea:	0adb      	lsrs	r3, r3, #11
 80034ec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80034f0:	fb02 f303 	mul.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	7f1b      	ldrb	r3, [r3, #28]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d101      	bne.n	8003502 <HAL_RTC_SetAlarm_IT+0x36>
 80034fe:	2302      	movs	r3, #2
 8003500:	e111      	b.n	8003726 <HAL_RTC_SetAlarm_IT+0x25a>
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2201      	movs	r2, #1
 8003506:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2202      	movs	r2, #2
 800350c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d137      	bne.n	8003584 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800351e:	2b00      	cmp	r3, #0
 8003520:	d102      	bne.n	8003528 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	2200      	movs	r2, #0
 8003526:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003528:	68bb      	ldr	r3, [r7, #8]
 800352a:	781b      	ldrb	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f000 f99f 	bl	8003870 <RTC_ByteToBcd2>
 8003532:	4603      	mov	r3, r0
 8003534:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	785b      	ldrb	r3, [r3, #1]
 800353a:	4618      	mov	r0, r3
 800353c:	f000 f998 	bl	8003870 <RTC_ByteToBcd2>
 8003540:	4603      	mov	r3, r0
 8003542:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8003544:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8003546:	68bb      	ldr	r3, [r7, #8]
 8003548:	789b      	ldrb	r3, [r3, #2]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 f990 	bl	8003870 <RTC_ByteToBcd2>
 8003550:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8003552:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	78db      	ldrb	r3, [r3, #3]
 800355a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800355c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f982 	bl	8003870 <RTC_ByteToBcd2>
 800356c:	4603      	mov	r3, r0
 800356e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8003570:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8003578:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800357e:	4313      	orrs	r3, r2
 8003580:	61fb      	str	r3, [r7, #28]
 8003582:	e023      	b.n	80035cc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800358e:	2b00      	cmp	r3, #0
 8003590:	d102      	bne.n	8003598 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2200      	movs	r2, #0
 8003596:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 800359e:	68bb      	ldr	r3, [r7, #8]
 80035a0:	785b      	ldrb	r3, [r3, #1]
 80035a2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80035a4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80035aa:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80035ac:	68bb      	ldr	r3, [r7, #8]
 80035ae:	78db      	ldrb	r3, [r3, #3]
 80035b0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80035b2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035ba:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80035bc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80035be:	68bb      	ldr	r3, [r7, #8]
 80035c0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80035c2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80035c8:	4313      	orrs	r3, r2
 80035ca:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	68bb      	ldr	r3, [r7, #8]
 80035d2:	699b      	ldr	r3, [r3, #24]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	22ca      	movs	r2, #202	; 0xca
 80035de:	625a      	str	r2, [r3, #36]	; 0x24
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2253      	movs	r2, #83	; 0x53
 80035e6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80035e8:	68bb      	ldr	r3, [r7, #8]
 80035ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035f0:	d141      	bne.n	8003676 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	689a      	ldr	r2, [r3, #8]
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003600:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	b2da      	uxtb	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003612:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	1e5a      	subs	r2, r3, #1
 8003618:	617a      	str	r2, [r7, #20]
 800361a:	2b00      	cmp	r3, #0
 800361c:	d10b      	bne.n	8003636 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	22ff      	movs	r2, #255	; 0xff
 8003624:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	2203      	movs	r2, #3
 800362a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e077      	b.n	8003726 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	68db      	ldr	r3, [r3, #12]
 800363c:	f003 0301 	and.w	r3, r3, #1
 8003640:	2b00      	cmp	r3, #0
 8003642:	d0e7      	beq.n	8003614 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	69fa      	ldr	r2, [r7, #28]
 800364a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689a      	ldr	r2, [r3, #8]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003662:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	689a      	ldr	r2, [r3, #8]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003672:	609a      	str	r2, [r3, #8]
 8003674:	e040      	b.n	80036f8 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	689a      	ldr	r2, [r3, #8]
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003684:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	68db      	ldr	r3, [r3, #12]
 800368c:	b2da      	uxtb	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f462 7220 	orn	r2, r2, #640	; 0x280
 8003696:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	1e5a      	subs	r2, r3, #1
 800369c:	617a      	str	r2, [r7, #20]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10b      	bne.n	80036ba <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	22ff      	movs	r2, #255	; 0xff
 80036a8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	2203      	movs	r2, #3
 80036ae:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2200      	movs	r2, #0
 80036b4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e035      	b.n	8003726 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f003 0302 	and.w	r3, r3, #2
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d0e7      	beq.n	8003698 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	69fa      	ldr	r2, [r7, #28]
 80036ce:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	69ba      	ldr	r2, [r7, #24]
 80036d6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689a      	ldr	r2, [r3, #8]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036e6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	689a      	ldr	r2, [r3, #8]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80036f6:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 80036f8:	4b0f      	ldr	r3, [pc, #60]	; (8003738 <HAL_RTC_SetAlarm_IT+0x26c>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a0e      	ldr	r2, [pc, #56]	; (8003738 <HAL_RTC_SetAlarm_IT+0x26c>)
 80036fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003702:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8003704:	4b0c      	ldr	r3, [pc, #48]	; (8003738 <HAL_RTC_SetAlarm_IT+0x26c>)
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	4a0b      	ldr	r2, [pc, #44]	; (8003738 <HAL_RTC_SetAlarm_IT+0x26c>)
 800370a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800370e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	22ff      	movs	r2, #255	; 0xff
 8003716:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2201      	movs	r2, #1
 800371c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3724      	adds	r7, #36	; 0x24
 800372a:	46bd      	mov	sp, r7
 800372c:	bd90      	pop	{r4, r7, pc}
 800372e:	bf00      	nop
 8003730:	20000028 	.word	0x20000028
 8003734:	10624dd3 	.word	0x10624dd3
 8003738:	40013c00 	.word	0x40013c00

0800373c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800374e:	2b00      	cmp	r3, #0
 8003750:	d012      	beq.n	8003778 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800375c:	2b00      	cmp	r3, #0
 800375e:	d00b      	beq.n	8003778 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8003760:	6878      	ldr	r0, [r7, #4]
 8003762:	f7fd fa8f 	bl	8000c84 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	68db      	ldr	r3, [r3, #12]
 800376c:	b2da      	uxtb	r2, r3
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8003776:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d012      	beq.n	80037ac <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00b      	beq.n	80037ac <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 8003794:	6878      	ldr	r0, [r7, #4]
 8003796:	f000 f8a7 	bl	80038e8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	b2da      	uxtb	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80037aa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80037ac:	4b05      	ldr	r3, [pc, #20]	; (80037c4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80037ae:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80037b2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	775a      	strb	r2, [r3, #29]
}
 80037ba:	bf00      	nop
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	40013c00 	.word	0x40013c00

080037c8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b084      	sub	sp, #16
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037e2:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80037e4:	f7fe f830 	bl	8001848 <HAL_GetTick>
 80037e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80037ea:	e009      	b.n	8003800 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80037ec:	f7fe f82c 	bl	8001848 <HAL_GetTick>
 80037f0:	4602      	mov	r2, r0
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	1ad3      	subs	r3, r2, r3
 80037f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80037fa:	d901      	bls.n	8003800 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80037fc:	2303      	movs	r3, #3
 80037fe:	e007      	b.n	8003810 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0ee      	beq.n	80037ec <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}

08003818 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003820:	2300      	movs	r3, #0
 8003822:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800382e:	2b00      	cmp	r3, #0
 8003830:	d119      	bne.n	8003866 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f04f 32ff 	mov.w	r2, #4294967295
 800383a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800383c:	f7fe f804 	bl	8001848 <HAL_GetTick>
 8003840:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003842:	e009      	b.n	8003858 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8003844:	f7fe f800 	bl	8001848 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003852:	d901      	bls.n	8003858 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e007      	b.n	8003868 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	68db      	ldr	r3, [r3, #12]
 800385e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0ee      	beq.n	8003844 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8003866:	2300      	movs	r3, #0
}
 8003868:	4618      	mov	r0, r3
 800386a:	3710      	adds	r7, #16
 800386c:	46bd      	mov	sp, r7
 800386e:	bd80      	pop	{r7, pc}

08003870 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003870:	b480      	push	{r7}
 8003872:	b085      	sub	sp, #20
 8003874:	af00      	add	r7, sp, #0
 8003876:	4603      	mov	r3, r0
 8003878:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800387a:	2300      	movs	r3, #0
 800387c:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 800387e:	e005      	b.n	800388c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	3301      	adds	r3, #1
 8003884:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003886:	79fb      	ldrb	r3, [r7, #7]
 8003888:	3b0a      	subs	r3, #10
 800388a:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 800388c:	79fb      	ldrb	r3, [r7, #7]
 800388e:	2b09      	cmp	r3, #9
 8003890:	d8f6      	bhi.n	8003880 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	b2db      	uxtb	r3, r3
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	b2da      	uxtb	r2, r3
 800389a:	79fb      	ldrb	r3, [r7, #7]
 800389c:	4313      	orrs	r3, r2
 800389e:	b2db      	uxtb	r3, r3
}
 80038a0:	4618      	mov	r0, r3
 80038a2:	3714      	adds	r7, #20
 80038a4:	46bd      	mov	sp, r7
 80038a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038aa:	4770      	bx	lr

080038ac <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80038ac:	b480      	push	{r7}
 80038ae:	b085      	sub	sp, #20
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	4603      	mov	r3, r0
 80038b4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80038b6:	2300      	movs	r3, #0
 80038b8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80038ba:	79fb      	ldrb	r3, [r7, #7]
 80038bc:	091b      	lsrs	r3, r3, #4
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	4613      	mov	r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	4413      	add	r3, r2
 80038c8:	005b      	lsls	r3, r3, #1
 80038ca:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80038cc:	79fb      	ldrb	r3, [r7, #7]
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	b2da      	uxtb	r2, r3
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	4413      	add	r3, r2
 80038da:	b2db      	uxtb	r3, r3
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3714      	adds	r7, #20
 80038e0:	46bd      	mov	sp, r7
 80038e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e6:	4770      	bx	lr

080038e8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b083      	sub	sp, #12
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d101      	bne.n	800390e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800390a:	2301      	movs	r3, #1
 800390c:	e041      	b.n	8003992 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003914:	b2db      	uxtb	r3, r3
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003922:	6878      	ldr	r0, [r7, #4]
 8003924:	f7fd fdb2 	bl	800148c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2202      	movs	r2, #2
 800392c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	3304      	adds	r3, #4
 8003938:	4619      	mov	r1, r3
 800393a:	4610      	mov	r0, r2
 800393c:	f000 fb24 	bl	8003f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003990:	2300      	movs	r3, #0
}
 8003992:	4618      	mov	r0, r3
 8003994:	3708      	adds	r7, #8
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}

0800399a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800399a:	b580      	push	{r7, lr}
 800399c:	b082      	sub	sp, #8
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d101      	bne.n	80039ac <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e041      	b.n	8003a30 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b2:	b2db      	uxtb	r3, r3
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d106      	bne.n	80039c6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	f000 f839 	bl	8003a38 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2202      	movs	r2, #2
 80039ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	3304      	adds	r3, #4
 80039d6:	4619      	mov	r1, r3
 80039d8:	4610      	mov	r0, r2
 80039da:	f000 fad5 	bl	8003f88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	2201      	movs	r2, #1
 80039ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2201      	movs	r2, #1
 80039f2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2201      	movs	r2, #1
 8003a0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2201      	movs	r2, #1
 8003a12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2201      	movs	r2, #1
 8003a22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3708      	adds	r7, #8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a4c:	b580      	push	{r7, lr}
 8003a4e:	b084      	sub	sp, #16
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
 8003a54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d109      	bne.n	8003a70 <HAL_TIM_PWM_Start+0x24>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	2b01      	cmp	r3, #1
 8003a66:	bf14      	ite	ne
 8003a68:	2301      	movne	r3, #1
 8003a6a:	2300      	moveq	r3, #0
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	e022      	b.n	8003ab6 <HAL_TIM_PWM_Start+0x6a>
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	2b04      	cmp	r3, #4
 8003a74:	d109      	bne.n	8003a8a <HAL_TIM_PWM_Start+0x3e>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003a7c:	b2db      	uxtb	r3, r3
 8003a7e:	2b01      	cmp	r3, #1
 8003a80:	bf14      	ite	ne
 8003a82:	2301      	movne	r3, #1
 8003a84:	2300      	moveq	r3, #0
 8003a86:	b2db      	uxtb	r3, r3
 8003a88:	e015      	b.n	8003ab6 <HAL_TIM_PWM_Start+0x6a>
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	2b08      	cmp	r3, #8
 8003a8e:	d109      	bne.n	8003aa4 <HAL_TIM_PWM_Start+0x58>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	bf14      	ite	ne
 8003a9c:	2301      	movne	r3, #1
 8003a9e:	2300      	moveq	r3, #0
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	e008      	b.n	8003ab6 <HAL_TIM_PWM_Start+0x6a>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	bf14      	ite	ne
 8003ab0:	2301      	movne	r3, #1
 8003ab2:	2300      	moveq	r3, #0
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d001      	beq.n	8003abe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e068      	b.n	8003b90 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d104      	bne.n	8003ace <HAL_TIM_PWM_Start+0x82>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003acc:	e013      	b.n	8003af6 <HAL_TIM_PWM_Start+0xaa>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	2b04      	cmp	r3, #4
 8003ad2:	d104      	bne.n	8003ade <HAL_TIM_PWM_Start+0x92>
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003adc:	e00b      	b.n	8003af6 <HAL_TIM_PWM_Start+0xaa>
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	d104      	bne.n	8003aee <HAL_TIM_PWM_Start+0xa2>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003aec:	e003      	b.n	8003af6 <HAL_TIM_PWM_Start+0xaa>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2202      	movs	r2, #2
 8003af2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	2201      	movs	r2, #1
 8003afc:	6839      	ldr	r1, [r7, #0]
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fce8 	bl	80044d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a23      	ldr	r2, [pc, #140]	; (8003b98 <HAL_TIM_PWM_Start+0x14c>)
 8003b0a:	4293      	cmp	r3, r2
 8003b0c:	d107      	bne.n	8003b1e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	4a1d      	ldr	r2, [pc, #116]	; (8003b98 <HAL_TIM_PWM_Start+0x14c>)
 8003b24:	4293      	cmp	r3, r2
 8003b26:	d018      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x10e>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b30:	d013      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x10e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_TIM_PWM_Start+0x150>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d00e      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x10e>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a17      	ldr	r2, [pc, #92]	; (8003ba0 <HAL_TIM_PWM_Start+0x154>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d009      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x10e>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	4a16      	ldr	r2, [pc, #88]	; (8003ba4 <HAL_TIM_PWM_Start+0x158>)
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d004      	beq.n	8003b5a <HAL_TIM_PWM_Start+0x10e>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a14      	ldr	r2, [pc, #80]	; (8003ba8 <HAL_TIM_PWM_Start+0x15c>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d111      	bne.n	8003b7e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	689b      	ldr	r3, [r3, #8]
 8003b60:	f003 0307 	and.w	r3, r3, #7
 8003b64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2b06      	cmp	r3, #6
 8003b6a:	d010      	beq.n	8003b8e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	681a      	ldr	r2, [r3, #0]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f042 0201 	orr.w	r2, r2, #1
 8003b7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b7c:	e007      	b.n	8003b8e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	681a      	ldr	r2, [r3, #0]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f042 0201 	orr.w	r2, r2, #1
 8003b8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b8e:	2300      	movs	r3, #0
}
 8003b90:	4618      	mov	r0, r3
 8003b92:	3710      	adds	r7, #16
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40010000 	.word	0x40010000
 8003b9c:	40000400 	.word	0x40000400
 8003ba0:	40000800 	.word	0x40000800
 8003ba4:	40000c00 	.word	0x40000c00
 8003ba8:	40014000 	.word	0x40014000

08003bac <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	2200      	movs	r2, #0
 8003bbc:	6839      	ldr	r1, [r7, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f000 fc88 	bl	80044d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a29      	ldr	r2, [pc, #164]	; (8003c70 <HAL_TIM_PWM_Stop+0xc4>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d117      	bne.n	8003bfe <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	6a1a      	ldr	r2, [r3, #32]
 8003bd4:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bd8:	4013      	ands	r3, r2
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d10f      	bne.n	8003bfe <HAL_TIM_PWM_Stop+0x52>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6a1a      	ldr	r2, [r3, #32]
 8003be4:	f240 4344 	movw	r3, #1092	; 0x444
 8003be8:	4013      	ands	r3, r2
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d107      	bne.n	8003bfe <HAL_TIM_PWM_Stop+0x52>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6a1a      	ldr	r2, [r3, #32]
 8003c04:	f241 1311 	movw	r3, #4369	; 0x1111
 8003c08:	4013      	ands	r3, r2
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10f      	bne.n	8003c2e <HAL_TIM_PWM_Stop+0x82>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	6a1a      	ldr	r2, [r3, #32]
 8003c14:	f240 4344 	movw	r3, #1092	; 0x444
 8003c18:	4013      	ands	r3, r2
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d107      	bne.n	8003c2e <HAL_TIM_PWM_Stop+0x82>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681a      	ldr	r2, [r3, #0]
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 0201 	bic.w	r2, r2, #1
 8003c2c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <HAL_TIM_PWM_Stop+0x92>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	2201      	movs	r2, #1
 8003c38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c3c:	e013      	b.n	8003c66 <HAL_TIM_PWM_Stop+0xba>
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d104      	bne.n	8003c4e <HAL_TIM_PWM_Stop+0xa2>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2201      	movs	r2, #1
 8003c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c4c:	e00b      	b.n	8003c66 <HAL_TIM_PWM_Stop+0xba>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d104      	bne.n	8003c5e <HAL_TIM_PWM_Stop+0xb2>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c5c:	e003      	b.n	8003c66 <HAL_TIM_PWM_Stop+0xba>
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	2201      	movs	r2, #1
 8003c62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40010000 	.word	0x40010000

08003c74 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b086      	sub	sp, #24
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	60f8      	str	r0, [r7, #12]
 8003c7c:	60b9      	str	r1, [r7, #8]
 8003c7e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d101      	bne.n	8003c92 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003c8e:	2302      	movs	r3, #2
 8003c90:	e0ae      	b.n	8003df0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2b0c      	cmp	r3, #12
 8003c9e:	f200 809f 	bhi.w	8003de0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ca2:	a201      	add	r2, pc, #4	; (adr r2, 8003ca8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ca4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ca8:	08003cdd 	.word	0x08003cdd
 8003cac:	08003de1 	.word	0x08003de1
 8003cb0:	08003de1 	.word	0x08003de1
 8003cb4:	08003de1 	.word	0x08003de1
 8003cb8:	08003d1d 	.word	0x08003d1d
 8003cbc:	08003de1 	.word	0x08003de1
 8003cc0:	08003de1 	.word	0x08003de1
 8003cc4:	08003de1 	.word	0x08003de1
 8003cc8:	08003d5f 	.word	0x08003d5f
 8003ccc:	08003de1 	.word	0x08003de1
 8003cd0:	08003de1 	.word	0x08003de1
 8003cd4:	08003de1 	.word	0x08003de1
 8003cd8:	08003d9f 	.word	0x08003d9f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	68b9      	ldr	r1, [r7, #8]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 f9d0 	bl	8004088 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	699a      	ldr	r2, [r3, #24]
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f042 0208 	orr.w	r2, r2, #8
 8003cf6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	699a      	ldr	r2, [r3, #24]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0204 	bic.w	r2, r2, #4
 8003d06:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	6999      	ldr	r1, [r3, #24]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	619a      	str	r2, [r3, #24]
      break;
 8003d1a:	e064      	b.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fa16 	bl	8004154 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	699a      	ldr	r2, [r3, #24]
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	699a      	ldr	r2, [r3, #24]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	6999      	ldr	r1, [r3, #24]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	021a      	lsls	r2, r3, #8
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	430a      	orrs	r2, r1
 8003d5a:	619a      	str	r2, [r3, #24]
      break;
 8003d5c:	e043      	b.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	68b9      	ldr	r1, [r7, #8]
 8003d64:	4618      	mov	r0, r3
 8003d66:	f000 fa61 	bl	800422c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69da      	ldr	r2, [r3, #28]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f042 0208 	orr.w	r2, r2, #8
 8003d78:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	69da      	ldr	r2, [r3, #28]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0204 	bic.w	r2, r2, #4
 8003d88:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	69d9      	ldr	r1, [r3, #28]
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	691a      	ldr	r2, [r3, #16]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	61da      	str	r2, [r3, #28]
      break;
 8003d9c:	e023      	b.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68b9      	ldr	r1, [r7, #8]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f000 faab 	bl	8004300 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	69da      	ldr	r2, [r3, #28]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003db8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	69da      	ldr	r2, [r3, #28]
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	69d9      	ldr	r1, [r3, #28]
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	691b      	ldr	r3, [r3, #16]
 8003dd4:	021a      	lsls	r2, r3, #8
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	61da      	str	r2, [r3, #28]
      break;
 8003dde:	e002      	b.n	8003de6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003de0:	2301      	movs	r3, #1
 8003de2:	75fb      	strb	r3, [r7, #23]
      break;
 8003de4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2200      	movs	r2, #0
 8003dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003dee:	7dfb      	ldrb	r3, [r7, #23]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	3718      	adds	r7, #24
 8003df4:	46bd      	mov	sp, r7
 8003df6:	bd80      	pop	{r7, pc}

08003df8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b084      	sub	sp, #16
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
 8003e00:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e02:	2300      	movs	r3, #0
 8003e04:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIM_ConfigClockSource+0x1c>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e0b4      	b.n	8003f7e <HAL_TIM_ConfigClockSource+0x186>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003e32:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e3a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68ba      	ldr	r2, [r7, #8]
 8003e42:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e4c:	d03e      	beq.n	8003ecc <HAL_TIM_ConfigClockSource+0xd4>
 8003e4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003e52:	f200 8087 	bhi.w	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e5a:	f000 8086 	beq.w	8003f6a <HAL_TIM_ConfigClockSource+0x172>
 8003e5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e62:	d87f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e64:	2b70      	cmp	r3, #112	; 0x70
 8003e66:	d01a      	beq.n	8003e9e <HAL_TIM_ConfigClockSource+0xa6>
 8003e68:	2b70      	cmp	r3, #112	; 0x70
 8003e6a:	d87b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e6c:	2b60      	cmp	r3, #96	; 0x60
 8003e6e:	d050      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0x11a>
 8003e70:	2b60      	cmp	r3, #96	; 0x60
 8003e72:	d877      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e74:	2b50      	cmp	r3, #80	; 0x50
 8003e76:	d03c      	beq.n	8003ef2 <HAL_TIM_ConfigClockSource+0xfa>
 8003e78:	2b50      	cmp	r3, #80	; 0x50
 8003e7a:	d873      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e7c:	2b40      	cmp	r3, #64	; 0x40
 8003e7e:	d058      	beq.n	8003f32 <HAL_TIM_ConfigClockSource+0x13a>
 8003e80:	2b40      	cmp	r3, #64	; 0x40
 8003e82:	d86f      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e84:	2b30      	cmp	r3, #48	; 0x30
 8003e86:	d064      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e88:	2b30      	cmp	r3, #48	; 0x30
 8003e8a:	d86b      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b20      	cmp	r3, #32
 8003e8e:	d060      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e90:	2b20      	cmp	r3, #32
 8003e92:	d867      	bhi.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d05c      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e98:	2b10      	cmp	r3, #16
 8003e9a:	d05a      	beq.n	8003f52 <HAL_TIM_ConfigClockSource+0x15a>
 8003e9c:	e062      	b.n	8003f64 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6818      	ldr	r0, [r3, #0]
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6899      	ldr	r1, [r3, #8]
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	685a      	ldr	r2, [r3, #4]
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	68db      	ldr	r3, [r3, #12]
 8003eae:	f000 faf1 	bl	8004494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003eba:	68bb      	ldr	r3, [r7, #8]
 8003ebc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ec0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	609a      	str	r2, [r3, #8]
      break;
 8003eca:	e04f      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	6818      	ldr	r0, [r3, #0]
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	6899      	ldr	r1, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	685a      	ldr	r2, [r3, #4]
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	f000 fada 	bl	8004494 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	689a      	ldr	r2, [r3, #8]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eee:	609a      	str	r2, [r3, #8]
      break;
 8003ef0:	e03c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6818      	ldr	r0, [r3, #0]
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	6859      	ldr	r1, [r3, #4]
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	461a      	mov	r2, r3
 8003f00:	f000 fa4e 	bl	80043a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	2150      	movs	r1, #80	; 0x50
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 faa7 	bl	800445e <TIM_ITRx_SetConfig>
      break;
 8003f10:	e02c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6859      	ldr	r1, [r3, #4]
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	f000 fa6d 	bl	80043fe <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2160      	movs	r1, #96	; 0x60
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 fa97 	bl	800445e <TIM_ITRx_SetConfig>
      break;
 8003f30:	e01c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6818      	ldr	r0, [r3, #0]
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6859      	ldr	r1, [r3, #4]
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	68db      	ldr	r3, [r3, #12]
 8003f3e:	461a      	mov	r2, r3
 8003f40:	f000 fa2e 	bl	80043a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	2140      	movs	r1, #64	; 0x40
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f000 fa87 	bl	800445e <TIM_ITRx_SetConfig>
      break;
 8003f50:	e00c      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	4619      	mov	r1, r3
 8003f5c:	4610      	mov	r0, r2
 8003f5e:	f000 fa7e 	bl	800445e <TIM_ITRx_SetConfig>
      break;
 8003f62:	e003      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	73fb      	strb	r3, [r7, #15]
      break;
 8003f68:	e000      	b.n	8003f6c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f6a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003f7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f7e:	4618      	mov	r0, r3
 8003f80:	3710      	adds	r7, #16
 8003f82:	46bd      	mov	sp, r7
 8003f84:	bd80      	pop	{r7, pc}
	...

08003f88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	4a34      	ldr	r2, [pc, #208]	; (800406c <TIM_Base_SetConfig+0xe4>)
 8003f9c:	4293      	cmp	r3, r2
 8003f9e:	d00f      	beq.n	8003fc0 <TIM_Base_SetConfig+0x38>
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fa6:	d00b      	beq.n	8003fc0 <TIM_Base_SetConfig+0x38>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	4a31      	ldr	r2, [pc, #196]	; (8004070 <TIM_Base_SetConfig+0xe8>)
 8003fac:	4293      	cmp	r3, r2
 8003fae:	d007      	beq.n	8003fc0 <TIM_Base_SetConfig+0x38>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a30      	ldr	r2, [pc, #192]	; (8004074 <TIM_Base_SetConfig+0xec>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d003      	beq.n	8003fc0 <TIM_Base_SetConfig+0x38>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a2f      	ldr	r2, [pc, #188]	; (8004078 <TIM_Base_SetConfig+0xf0>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d108      	bne.n	8003fd2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a25      	ldr	r2, [pc, #148]	; (800406c <TIM_Base_SetConfig+0xe4>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d01b      	beq.n	8004012 <TIM_Base_SetConfig+0x8a>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fe0:	d017      	beq.n	8004012 <TIM_Base_SetConfig+0x8a>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a22      	ldr	r2, [pc, #136]	; (8004070 <TIM_Base_SetConfig+0xe8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d013      	beq.n	8004012 <TIM_Base_SetConfig+0x8a>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a21      	ldr	r2, [pc, #132]	; (8004074 <TIM_Base_SetConfig+0xec>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d00f      	beq.n	8004012 <TIM_Base_SetConfig+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	4a20      	ldr	r2, [pc, #128]	; (8004078 <TIM_Base_SetConfig+0xf0>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	d00b      	beq.n	8004012 <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a1f      	ldr	r2, [pc, #124]	; (800407c <TIM_Base_SetConfig+0xf4>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d007      	beq.n	8004012 <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a1e      	ldr	r2, [pc, #120]	; (8004080 <TIM_Base_SetConfig+0xf8>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d003      	beq.n	8004012 <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a1d      	ldr	r2, [pc, #116]	; (8004084 <TIM_Base_SetConfig+0xfc>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d108      	bne.n	8004024 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004018:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	68db      	ldr	r3, [r3, #12]
 800401e:	68fa      	ldr	r2, [r7, #12]
 8004020:	4313      	orrs	r3, r2
 8004022:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	4313      	orrs	r3, r2
 8004030:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	68fa      	ldr	r2, [r7, #12]
 8004036:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	689a      	ldr	r2, [r3, #8]
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681a      	ldr	r2, [r3, #0]
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a08      	ldr	r2, [pc, #32]	; (800406c <TIM_Base_SetConfig+0xe4>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d103      	bne.n	8004058 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	691a      	ldr	r2, [r3, #16]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2201      	movs	r2, #1
 800405c:	615a      	str	r2, [r3, #20]
}
 800405e:	bf00      	nop
 8004060:	3714      	adds	r7, #20
 8004062:	46bd      	mov	sp, r7
 8004064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004068:	4770      	bx	lr
 800406a:	bf00      	nop
 800406c:	40010000 	.word	0x40010000
 8004070:	40000400 	.word	0x40000400
 8004074:	40000800 	.word	0x40000800
 8004078:	40000c00 	.word	0x40000c00
 800407c:	40014000 	.word	0x40014000
 8004080:	40014400 	.word	0x40014400
 8004084:	40014800 	.word	0x40014800

08004088 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f023 0201 	bic.w	r2, r3, #1
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	699b      	ldr	r3, [r3, #24]
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	f023 0303 	bic.w	r3, r3, #3
 80040be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040c0:	683b      	ldr	r3, [r7, #0]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	68fa      	ldr	r2, [r7, #12]
 80040c6:	4313      	orrs	r3, r2
 80040c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f023 0302 	bic.w	r3, r3, #2
 80040d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	697a      	ldr	r2, [r7, #20]
 80040d8:	4313      	orrs	r3, r2
 80040da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	4a1c      	ldr	r2, [pc, #112]	; (8004150 <TIM_OC1_SetConfig+0xc8>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d10c      	bne.n	80040fe <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	f023 0308 	bic.w	r3, r3, #8
 80040ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	697a      	ldr	r2, [r7, #20]
 80040f2:	4313      	orrs	r3, r2
 80040f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	f023 0304 	bic.w	r3, r3, #4
 80040fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a13      	ldr	r2, [pc, #76]	; (8004150 <TIM_OC1_SetConfig+0xc8>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d111      	bne.n	800412a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800410c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	4313      	orrs	r3, r2
 800411e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	699b      	ldr	r3, [r3, #24]
 8004124:	693a      	ldr	r2, [r7, #16]
 8004126:	4313      	orrs	r3, r2
 8004128:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	693a      	ldr	r2, [r7, #16]
 800412e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	621a      	str	r2, [r3, #32]
}
 8004144:	bf00      	nop
 8004146:	371c      	adds	r7, #28
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr
 8004150:	40010000 	.word	0x40010000

08004154 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004154:	b480      	push	{r7}
 8004156:	b087      	sub	sp, #28
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6a1b      	ldr	r3, [r3, #32]
 8004162:	f023 0210 	bic.w	r2, r3, #16
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6a1b      	ldr	r3, [r3, #32]
 800416e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	685b      	ldr	r3, [r3, #4]
 8004174:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004182:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800418a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800418c:	683b      	ldr	r3, [r7, #0]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	021b      	lsls	r3, r3, #8
 8004192:	68fa      	ldr	r2, [r7, #12]
 8004194:	4313      	orrs	r3, r2
 8004196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f023 0320 	bic.w	r3, r3, #32
 800419e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	689b      	ldr	r3, [r3, #8]
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a1e      	ldr	r2, [pc, #120]	; (8004228 <TIM_OC2_SetConfig+0xd4>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d10d      	bne.n	80041d0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041b4:	697b      	ldr	r3, [r7, #20]
 80041b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	011b      	lsls	r3, r3, #4
 80041c2:	697a      	ldr	r2, [r7, #20]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	4a15      	ldr	r2, [pc, #84]	; (8004228 <TIM_OC2_SetConfig+0xd4>)
 80041d4:	4293      	cmp	r3, r2
 80041d6:	d113      	bne.n	8004200 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041de:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80041e0:	693b      	ldr	r3, [r7, #16]
 80041e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80041e6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	695b      	ldr	r3, [r3, #20]
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	693a      	ldr	r2, [r7, #16]
 80041f0:	4313      	orrs	r3, r2
 80041f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	693a      	ldr	r2, [r7, #16]
 8004204:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	68fa      	ldr	r2, [r7, #12]
 800420a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	685a      	ldr	r2, [r3, #4]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	40010000 	.word	0x40010000

0800422c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
 8004234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	6a1b      	ldr	r3, [r3, #32]
 800423a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	69db      	ldr	r3, [r3, #28]
 8004252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800425a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f023 0303 	bic.w	r3, r3, #3
 8004262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	4313      	orrs	r3, r2
 800426c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689b      	ldr	r3, [r3, #8]
 800427a:	021b      	lsls	r3, r3, #8
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a1d      	ldr	r2, [pc, #116]	; (80042fc <TIM_OC3_SetConfig+0xd0>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d10d      	bne.n	80042a6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004290:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	4a14      	ldr	r2, [pc, #80]	; (80042fc <TIM_OC3_SetConfig+0xd0>)
 80042aa:	4293      	cmp	r3, r2
 80042ac:	d113      	bne.n	80042d6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042be:	683b      	ldr	r3, [r7, #0]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	011b      	lsls	r3, r3, #4
 80042c4:	693a      	ldr	r2, [r7, #16]
 80042c6:	4313      	orrs	r3, r2
 80042c8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	699b      	ldr	r3, [r3, #24]
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	693a      	ldr	r2, [r7, #16]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	68fa      	ldr	r2, [r7, #12]
 80042e0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	685a      	ldr	r2, [r3, #4]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	621a      	str	r2, [r3, #32]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	40010000 	.word	0x40010000

08004300 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004300:	b480      	push	{r7}
 8004302:	b087      	sub	sp, #28
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
 8004308:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6a1b      	ldr	r3, [r3, #32]
 800430e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	69db      	ldr	r3, [r3, #28]
 8004326:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800432e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004336:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	021b      	lsls	r3, r3, #8
 800433e:	68fa      	ldr	r2, [r7, #12]
 8004340:	4313      	orrs	r3, r2
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800434a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	031b      	lsls	r3, r3, #12
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a10      	ldr	r2, [pc, #64]	; (800439c <TIM_OC4_SetConfig+0x9c>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d109      	bne.n	8004374 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004366:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	695b      	ldr	r3, [r3, #20]
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	4313      	orrs	r3, r2
 8004372:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	693a      	ldr	r2, [r7, #16]
 800438c:	621a      	str	r2, [r3, #32]
}
 800438e:	bf00      	nop
 8004390:	371c      	adds	r7, #28
 8004392:	46bd      	mov	sp, r7
 8004394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004398:	4770      	bx	lr
 800439a:	bf00      	nop
 800439c:	40010000 	.word	0x40010000

080043a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043a0:	b480      	push	{r7}
 80043a2:	b087      	sub	sp, #28
 80043a4:	af00      	add	r7, sp, #0
 80043a6:	60f8      	str	r0, [r7, #12]
 80043a8:	60b9      	str	r1, [r7, #8]
 80043aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	6a1b      	ldr	r3, [r3, #32]
 80043b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	6a1b      	ldr	r3, [r3, #32]
 80043b6:	f023 0201 	bic.w	r2, r3, #1
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	011b      	lsls	r3, r3, #4
 80043d0:	693a      	ldr	r2, [r7, #16]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f023 030a 	bic.w	r3, r3, #10
 80043dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043de:	697a      	ldr	r2, [r7, #20]
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	4313      	orrs	r3, r2
 80043e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	697a      	ldr	r2, [r7, #20]
 80043f0:	621a      	str	r2, [r3, #32]
}
 80043f2:	bf00      	nop
 80043f4:	371c      	adds	r7, #28
 80043f6:	46bd      	mov	sp, r7
 80043f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fc:	4770      	bx	lr

080043fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043fe:	b480      	push	{r7}
 8004400:	b087      	sub	sp, #28
 8004402:	af00      	add	r7, sp, #0
 8004404:	60f8      	str	r0, [r7, #12]
 8004406:	60b9      	str	r1, [r7, #8]
 8004408:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	f023 0210 	bic.w	r2, r3, #16
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004428:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	031b      	lsls	r3, r3, #12
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4313      	orrs	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800443a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	693a      	ldr	r2, [r7, #16]
 8004442:	4313      	orrs	r3, r2
 8004444:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	693a      	ldr	r2, [r7, #16]
 8004450:	621a      	str	r2, [r3, #32]
}
 8004452:	bf00      	nop
 8004454:	371c      	adds	r7, #28
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800445e:	b480      	push	{r7}
 8004460:	b085      	sub	sp, #20
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
 8004466:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004474:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	4313      	orrs	r3, r2
 800447c:	f043 0307 	orr.w	r3, r3, #7
 8004480:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	609a      	str	r2, [r3, #8]
}
 8004488:	bf00      	nop
 800448a:	3714      	adds	r7, #20
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
 80044a0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80044ae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044b0:	683b      	ldr	r3, [r7, #0]
 80044b2:	021a      	lsls	r2, r3, #8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	431a      	orrs	r2, r3
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	697a      	ldr	r2, [r7, #20]
 80044be:	4313      	orrs	r3, r2
 80044c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	697a      	ldr	r2, [r7, #20]
 80044c6:	609a      	str	r2, [r3, #8]
}
 80044c8:	bf00      	nop
 80044ca:	371c      	adds	r7, #28
 80044cc:	46bd      	mov	sp, r7
 80044ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d2:	4770      	bx	lr

080044d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80044d4:	b480      	push	{r7}
 80044d6:	b087      	sub	sp, #28
 80044d8:	af00      	add	r7, sp, #0
 80044da:	60f8      	str	r0, [r7, #12]
 80044dc:	60b9      	str	r1, [r7, #8]
 80044de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	f003 031f 	and.w	r3, r3, #31
 80044e6:	2201      	movs	r2, #1
 80044e8:	fa02 f303 	lsl.w	r3, r2, r3
 80044ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	6a1a      	ldr	r2, [r3, #32]
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	43db      	mvns	r3, r3
 80044f6:	401a      	ands	r2, r3
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	6a1a      	ldr	r2, [r3, #32]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	f003 031f 	and.w	r3, r3, #31
 8004506:	6879      	ldr	r1, [r7, #4]
 8004508:	fa01 f303 	lsl.w	r3, r1, r3
 800450c:	431a      	orrs	r2, r3
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	621a      	str	r2, [r3, #32]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
	...

08004520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004520:	b480      	push	{r7}
 8004522:	b085      	sub	sp, #20
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
 8004528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004530:	2b01      	cmp	r3, #1
 8004532:	d101      	bne.n	8004538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004534:	2302      	movs	r3, #2
 8004536:	e050      	b.n	80045da <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2202      	movs	r2, #2
 8004544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a1c      	ldr	r2, [pc, #112]	; (80045e8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d018      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004584:	d013      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4a18      	ldr	r2, [pc, #96]	; (80045ec <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800458c:	4293      	cmp	r3, r2
 800458e:	d00e      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4a16      	ldr	r2, [pc, #88]	; (80045f0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4a15      	ldr	r2, [pc, #84]	; (80045f4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d004      	beq.n	80045ae <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a13      	ldr	r2, [pc, #76]	; (80045f8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d10c      	bne.n	80045c8 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045ae:	68bb      	ldr	r3, [r7, #8]
 80045b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	68ba      	ldr	r2, [r7, #8]
 80045bc:	4313      	orrs	r3, r2
 80045be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	68ba      	ldr	r2, [r7, #8]
 80045c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2201      	movs	r2, #1
 80045cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3714      	adds	r7, #20
 80045de:	46bd      	mov	sp, r7
 80045e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e4:	4770      	bx	lr
 80045e6:	bf00      	nop
 80045e8:	40010000 	.word	0x40010000
 80045ec:	40000400 	.word	0x40000400
 80045f0:	40000800 	.word	0x40000800
 80045f4:	40000c00 	.word	0x40000c00
 80045f8:	40014000 	.word	0x40014000

080045fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800460a:	2301      	movs	r3, #1
 800460c:	e03f      	b.n	800468e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004614:	b2db      	uxtb	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d106      	bne.n	8004628 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2200      	movs	r2, #0
 800461e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004622:	6878      	ldr	r0, [r7, #4]
 8004624:	f7fc ffa4 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2224      	movs	r2, #36	; 0x24
 800462c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800463e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004640:	6878      	ldr	r0, [r7, #4]
 8004642:	f000 fddb 	bl	80051fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004654:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	695a      	ldr	r2, [r3, #20]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004664:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68da      	ldr	r2, [r3, #12]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004674:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2220      	movs	r2, #32
 8004680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2220      	movs	r2, #32
 8004688:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800468c:	2300      	movs	r3, #0
}
 800468e:	4618      	mov	r0, r3
 8004690:	3708      	adds	r7, #8
 8004692:	46bd      	mov	sp, r7
 8004694:	bd80      	pop	{r7, pc}

08004696 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004696:	b580      	push	{r7, lr}
 8004698:	b08a      	sub	sp, #40	; 0x28
 800469a:	af02      	add	r7, sp, #8
 800469c:	60f8      	str	r0, [r7, #12]
 800469e:	60b9      	str	r1, [r7, #8]
 80046a0:	603b      	str	r3, [r7, #0]
 80046a2:	4613      	mov	r3, r2
 80046a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046a6:	2300      	movs	r3, #0
 80046a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	2b20      	cmp	r3, #32
 80046b4:	d17c      	bne.n	80047b0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d002      	beq.n	80046c2 <HAL_UART_Transmit+0x2c>
 80046bc:	88fb      	ldrh	r3, [r7, #6]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d101      	bne.n	80046c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80046c2:	2301      	movs	r3, #1
 80046c4:	e075      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	d101      	bne.n	80046d4 <HAL_UART_Transmit+0x3e>
 80046d0:	2302      	movs	r3, #2
 80046d2:	e06e      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2221      	movs	r2, #33	; 0x21
 80046e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80046ea:	f7fd f8ad 	bl	8001848 <HAL_GetTick>
 80046ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	88fa      	ldrh	r2, [r7, #6]
 80046f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	88fa      	ldrh	r2, [r7, #6]
 80046fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004704:	d108      	bne.n	8004718 <HAL_UART_Transmit+0x82>
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d104      	bne.n	8004718 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	61bb      	str	r3, [r7, #24]
 8004716:	e003      	b.n	8004720 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800471c:	2300      	movs	r3, #0
 800471e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	2200      	movs	r2, #0
 8004724:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004728:	e02a      	b.n	8004780 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	9300      	str	r3, [sp, #0]
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2200      	movs	r2, #0
 8004732:	2180      	movs	r1, #128	; 0x80
 8004734:	68f8      	ldr	r0, [r7, #12]
 8004736:	f000 fb1f 	bl	8004d78 <UART_WaitOnFlagUntilTimeout>
 800473a:	4603      	mov	r3, r0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d001      	beq.n	8004744 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e036      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10b      	bne.n	8004762 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800474a:	69bb      	ldr	r3, [r7, #24]
 800474c:	881b      	ldrh	r3, [r3, #0]
 800474e:	461a      	mov	r2, r3
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004758:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	3302      	adds	r3, #2
 800475e:	61bb      	str	r3, [r7, #24]
 8004760:	e007      	b.n	8004772 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	781a      	ldrb	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800476c:	69fb      	ldr	r3, [r7, #28]
 800476e:	3301      	adds	r3, #1
 8004770:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004776:	b29b      	uxth	r3, r3
 8004778:	3b01      	subs	r3, #1
 800477a:	b29a      	uxth	r2, r3
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004784:	b29b      	uxth	r3, r3
 8004786:	2b00      	cmp	r3, #0
 8004788:	d1cf      	bne.n	800472a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	9300      	str	r3, [sp, #0]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	2200      	movs	r2, #0
 8004792:	2140      	movs	r1, #64	; 0x40
 8004794:	68f8      	ldr	r0, [r7, #12]
 8004796:	f000 faef 	bl	8004d78 <UART_WaitOnFlagUntilTimeout>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d001      	beq.n	80047a4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80047a0:	2303      	movs	r3, #3
 80047a2:	e006      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2220      	movs	r2, #32
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80047ac:	2300      	movs	r3, #0
 80047ae:	e000      	b.n	80047b2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80047b0:	2302      	movs	r3, #2
  }
}
 80047b2:	4618      	mov	r0, r3
 80047b4:	3720      	adds	r7, #32
 80047b6:	46bd      	mov	sp, r7
 80047b8:	bd80      	pop	{r7, pc}

080047ba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ba:	b580      	push	{r7, lr}
 80047bc:	b084      	sub	sp, #16
 80047be:	af00      	add	r7, sp, #0
 80047c0:	60f8      	str	r0, [r7, #12]
 80047c2:	60b9      	str	r1, [r7, #8]
 80047c4:	4613      	mov	r3, r2
 80047c6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047ce:	b2db      	uxtb	r3, r3
 80047d0:	2b20      	cmp	r3, #32
 80047d2:	d11d      	bne.n	8004810 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d002      	beq.n	80047e0 <HAL_UART_Receive_IT+0x26>
 80047da:	88fb      	ldrh	r3, [r7, #6]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e016      	b.n	8004812 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d101      	bne.n	80047f2 <HAL_UART_Receive_IT+0x38>
 80047ee:	2302      	movs	r3, #2
 80047f0:	e00f      	b.n	8004812 <HAL_UART_Receive_IT+0x58>
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	2201      	movs	r2, #1
 80047f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	2200      	movs	r2, #0
 80047fe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004800:	88fb      	ldrh	r3, [r7, #6]
 8004802:	461a      	mov	r2, r3
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 fb24 	bl	8004e54 <UART_Start_Receive_IT>
 800480c:	4603      	mov	r3, r0
 800480e:	e000      	b.n	8004812 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004810:	2302      	movs	r3, #2
  }
}
 8004812:	4618      	mov	r0, r3
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b0ba      	sub	sp, #232	; 0xe8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	695b      	ldr	r3, [r3, #20]
 800483e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004842:	2300      	movs	r3, #0
 8004844:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004848:	2300      	movs	r3, #0
 800484a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800484e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004852:	f003 030f 	and.w	r3, r3, #15
 8004856:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800485a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10f      	bne.n	8004882 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004862:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004866:	f003 0320 	and.w	r3, r3, #32
 800486a:	2b00      	cmp	r3, #0
 800486c:	d009      	beq.n	8004882 <HAL_UART_IRQHandler+0x66>
 800486e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004872:	f003 0320 	and.w	r3, r3, #32
 8004876:	2b00      	cmp	r3, #0
 8004878:	d003      	beq.n	8004882 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 fc03 	bl	8005086 <UART_Receive_IT>
      return;
 8004880:	e256      	b.n	8004d30 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004882:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 80de 	beq.w	8004a48 <HAL_UART_IRQHandler+0x22c>
 800488c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d106      	bne.n	80048a6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004898:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800489c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	f000 80d1 	beq.w	8004a48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048aa:	f003 0301 	and.w	r3, r3, #1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00b      	beq.n	80048ca <HAL_UART_IRQHandler+0xae>
 80048b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d005      	beq.n	80048ca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048c2:	f043 0201 	orr.w	r2, r3, #1
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d00b      	beq.n	80048ee <HAL_UART_IRQHandler+0xd2>
 80048d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048da:	f003 0301 	and.w	r3, r3, #1
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d005      	beq.n	80048ee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e6:	f043 0202 	orr.w	r2, r3, #2
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048f2:	f003 0302 	and.w	r3, r3, #2
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00b      	beq.n	8004912 <HAL_UART_IRQHandler+0xf6>
 80048fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048fe:	f003 0301 	and.w	r3, r3, #1
 8004902:	2b00      	cmp	r3, #0
 8004904:	d005      	beq.n	8004912 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800490a:	f043 0204 	orr.w	r2, r3, #4
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004916:	f003 0308 	and.w	r3, r3, #8
 800491a:	2b00      	cmp	r3, #0
 800491c:	d011      	beq.n	8004942 <HAL_UART_IRQHandler+0x126>
 800491e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004922:	f003 0320 	and.w	r3, r3, #32
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800492a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800492e:	f003 0301 	and.w	r3, r3, #1
 8004932:	2b00      	cmp	r3, #0
 8004934:	d005      	beq.n	8004942 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f043 0208 	orr.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	f000 81ed 	beq.w	8004d26 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800494c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004950:	f003 0320 	and.w	r3, r3, #32
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_UART_IRQHandler+0x14e>
 8004958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800495c:	f003 0320 	and.w	r3, r3, #32
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f000 fb8e 	bl	8005086 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004974:	2b40      	cmp	r3, #64	; 0x40
 8004976:	bf0c      	ite	eq
 8004978:	2301      	moveq	r3, #1
 800497a:	2300      	movne	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f003 0308 	and.w	r3, r3, #8
 800498a:	2b00      	cmp	r3, #0
 800498c:	d103      	bne.n	8004996 <HAL_UART_IRQHandler+0x17a>
 800498e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d04f      	beq.n	8004a36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f000 fa96 	bl	8004ec8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049a6:	2b40      	cmp	r3, #64	; 0x40
 80049a8:	d141      	bne.n	8004a2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	3314      	adds	r3, #20
 80049b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049b8:	e853 3f00 	ldrex	r3, [r3]
 80049bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049c8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	3314      	adds	r3, #20
 80049d2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80049d6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80049da:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049de:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80049e2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80049e6:	e841 2300 	strex	r3, r2, [r1]
 80049ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80049ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1d9      	bne.n	80049aa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d013      	beq.n	8004a26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a02:	4a7d      	ldr	r2, [pc, #500]	; (8004bf8 <HAL_UART_IRQHandler+0x3dc>)
 8004a04:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0a:	4618      	mov	r0, r3
 8004a0c:	f7fd f8a9 	bl	8001b62 <HAL_DMA_Abort_IT>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d016      	beq.n	8004a44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004a20:	4610      	mov	r0, r2
 8004a22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a24:	e00e      	b.n	8004a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a26:	6878      	ldr	r0, [r7, #4]
 8004a28:	f000 f990 	bl	8004d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	e00a      	b.n	8004a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f98c 	bl	8004d4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a34:	e006      	b.n	8004a44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f000 f988 	bl	8004d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2200      	movs	r2, #0
 8004a40:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004a42:	e170      	b.n	8004d26 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a44:	bf00      	nop
    return;
 8004a46:	e16e      	b.n	8004d26 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	f040 814a 	bne.w	8004ce6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a56:	f003 0310 	and.w	r3, r3, #16
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	f000 8143 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a64:	f003 0310 	and.w	r3, r3, #16
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 813c 	beq.w	8004ce6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a6e:	2300      	movs	r3, #0
 8004a70:	60bb      	str	r3, [r7, #8]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60bb      	str	r3, [r7, #8]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	60bb      	str	r3, [r7, #8]
 8004a82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8e:	2b40      	cmp	r3, #64	; 0x40
 8004a90:	f040 80b4 	bne.w	8004bfc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004aa0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	f000 8140 	beq.w	8004d2a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004aae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	f080 8139 	bcs.w	8004d2a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004abe:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac4:	69db      	ldr	r3, [r3, #28]
 8004ac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004aca:	f000 8088 	beq.w	8004bde <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	330c      	adds	r3, #12
 8004ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ad8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004adc:	e853 3f00 	ldrex	r3, [r3]
 8004ae0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ae4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ae8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004aec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	330c      	adds	r3, #12
 8004af6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004afa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004afe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1d9      	bne.n	8004ace <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	3314      	adds	r3, #20
 8004b20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b24:	e853 3f00 	ldrex	r3, [r3]
 8004b28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b2c:	f023 0301 	bic.w	r3, r3, #1
 8004b30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	3314      	adds	r3, #20
 8004b3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b4a:	e841 2300 	strex	r3, r2, [r1]
 8004b4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d1e1      	bne.n	8004b1a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	3314      	adds	r3, #20
 8004b5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b60:	e853 3f00 	ldrex	r3, [r3]
 8004b64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004b68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3314      	adds	r3, #20
 8004b76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004b7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004b7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004b80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004b88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e3      	bne.n	8004b56 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	330c      	adds	r3, #12
 8004ba2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ba6:	e853 3f00 	ldrex	r3, [r3]
 8004baa:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bae:	f023 0310 	bic.w	r3, r3, #16
 8004bb2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	330c      	adds	r3, #12
 8004bbc:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bc0:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bc2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bc6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004bc8:	e841 2300 	strex	r3, r2, [r1]
 8004bcc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004bce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1e3      	bne.n	8004b9c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f7fc ff52 	bl	8001a82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	1ad3      	subs	r3, r2, r3
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	4619      	mov	r1, r3
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f8b6 	bl	8004d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004bf4:	e099      	b.n	8004d2a <HAL_UART_IRQHandler+0x50e>
 8004bf6:	bf00      	nop
 8004bf8:	08004f8f 	.word	0x08004f8f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	1ad3      	subs	r3, r2, r3
 8004c08:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	f000 808b 	beq.w	8004d2e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004c18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	f000 8086 	beq.w	8004d2e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	330c      	adds	r3, #12
 8004c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c34:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c38:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	330c      	adds	r3, #12
 8004c42:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c46:	647a      	str	r2, [r7, #68]	; 0x44
 8004c48:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c4a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c4c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c4e:	e841 2300 	strex	r3, r2, [r1]
 8004c52:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1e3      	bne.n	8004c22 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c64:	e853 3f00 	ldrex	r3, [r3]
 8004c68:	623b      	str	r3, [r7, #32]
   return(result);
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f023 0301 	bic.w	r3, r3, #1
 8004c70:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	3314      	adds	r3, #20
 8004c7a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004c7e:	633a      	str	r2, [r7, #48]	; 0x30
 8004c80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c82:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c84:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c86:	e841 2300 	strex	r3, r2, [r1]
 8004c8a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d1e3      	bne.n	8004c5a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	2220      	movs	r2, #32
 8004c96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	330c      	adds	r3, #12
 8004ca6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	e853 3f00 	ldrex	r3, [r3]
 8004cae:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	f023 0310 	bic.w	r3, r3, #16
 8004cb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	330c      	adds	r3, #12
 8004cc0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004cc4:	61fa      	str	r2, [r7, #28]
 8004cc6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	69b9      	ldr	r1, [r7, #24]
 8004cca:	69fa      	ldr	r2, [r7, #28]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	617b      	str	r3, [r7, #20]
   return(result);
 8004cd2:	697b      	ldr	r3, [r7, #20]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e3      	bne.n	8004ca0 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cdc:	4619      	mov	r1, r3
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f83e 	bl	8004d60 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ce4:	e023      	b.n	8004d2e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d009      	beq.n	8004d06 <HAL_UART_IRQHandler+0x4ea>
 8004cf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d003      	beq.n	8004d06 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f000 f959 	bl	8004fb6 <UART_Transmit_IT>
    return;
 8004d04:	e014      	b.n	8004d30 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00e      	beq.n	8004d30 <HAL_UART_IRQHandler+0x514>
 8004d12:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d008      	beq.n	8004d30 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	f000 f999 	bl	8005056 <UART_EndTransmit_IT>
    return;
 8004d24:	e004      	b.n	8004d30 <HAL_UART_IRQHandler+0x514>
    return;
 8004d26:	bf00      	nop
 8004d28:	e002      	b.n	8004d30 <HAL_UART_IRQHandler+0x514>
      return;
 8004d2a:	bf00      	nop
 8004d2c:	e000      	b.n	8004d30 <HAL_UART_IRQHandler+0x514>
      return;
 8004d2e:	bf00      	nop
  }
}
 8004d30:	37e8      	adds	r7, #232	; 0xe8
 8004d32:	46bd      	mov	sp, r7
 8004d34:	bd80      	pop	{r7, pc}
 8004d36:	bf00      	nop

08004d38 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d38:	b480      	push	{r7}
 8004d3a:	b083      	sub	sp, #12
 8004d3c:	af00      	add	r7, sp, #0
 8004d3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d40:	bf00      	nop
 8004d42:	370c      	adds	r7, #12
 8004d44:	46bd      	mov	sp, r7
 8004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4a:	4770      	bx	lr

08004d4c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b083      	sub	sp, #12
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d54:	bf00      	nop
 8004d56:	370c      	adds	r7, #12
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	6078      	str	r0, [r7, #4]
 8004d68:	460b      	mov	r3, r1
 8004d6a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004d6c:	bf00      	nop
 8004d6e:	370c      	adds	r7, #12
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b090      	sub	sp, #64	; 0x40
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	60f8      	str	r0, [r7, #12]
 8004d80:	60b9      	str	r1, [r7, #8]
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	4613      	mov	r3, r2
 8004d86:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d88:	e050      	b.n	8004e2c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d90:	d04c      	beq.n	8004e2c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d007      	beq.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004d98:	f7fc fd56 	bl	8001848 <HAL_GetTick>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	1ad3      	subs	r3, r2, r3
 8004da2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d241      	bcs.n	8004e2c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	330c      	adds	r3, #12
 8004dae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004db0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004db2:	e853 3f00 	ldrex	r3, [r3]
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	330c      	adds	r3, #12
 8004dc6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004dc8:	637a      	str	r2, [r7, #52]	; 0x34
 8004dca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004dce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dd0:	e841 2300 	strex	r3, r2, [r1]
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e5      	bne.n	8004da8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	3314      	adds	r3, #20
 8004de2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	e853 3f00 	ldrex	r3, [r3]
 8004dea:	613b      	str	r3, [r7, #16]
   return(result);
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	f023 0301 	bic.w	r3, r3, #1
 8004df2:	63bb      	str	r3, [r7, #56]	; 0x38
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	3314      	adds	r3, #20
 8004dfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004dfc:	623a      	str	r2, [r7, #32]
 8004dfe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e00:	69f9      	ldr	r1, [r7, #28]
 8004e02:	6a3a      	ldr	r2, [r7, #32]
 8004e04:	e841 2300 	strex	r3, r2, [r1]
 8004e08:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d1e5      	bne.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	2220      	movs	r2, #32
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2220      	movs	r2, #32
 8004e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	2200      	movs	r2, #0
 8004e24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	e00f      	b.n	8004e4c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	68bb      	ldr	r3, [r7, #8]
 8004e34:	4013      	ands	r3, r2
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	bf0c      	ite	eq
 8004e3c:	2301      	moveq	r3, #1
 8004e3e:	2300      	movne	r3, #0
 8004e40:	b2db      	uxtb	r3, r3
 8004e42:	461a      	mov	r2, r3
 8004e44:	79fb      	ldrb	r3, [r7, #7]
 8004e46:	429a      	cmp	r2, r3
 8004e48:	d09f      	beq.n	8004d8a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004e4a:	2300      	movs	r3, #0
}
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	3740      	adds	r7, #64	; 0x40
 8004e50:	46bd      	mov	sp, r7
 8004e52:	bd80      	pop	{r7, pc}

08004e54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e54:	b480      	push	{r7}
 8004e56:	b085      	sub	sp, #20
 8004e58:	af00      	add	r7, sp, #0
 8004e5a:	60f8      	str	r0, [r7, #12]
 8004e5c:	60b9      	str	r1, [r7, #8]
 8004e5e:	4613      	mov	r3, r2
 8004e60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	68ba      	ldr	r2, [r7, #8]
 8004e66:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	88fa      	ldrh	r2, [r7, #6]
 8004e6c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	88fa      	ldrh	r2, [r7, #6]
 8004e72:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	2200      	movs	r2, #0
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2222      	movs	r2, #34	; 0x22
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68da      	ldr	r2, [r3, #12]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e98:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	695a      	ldr	r2, [r3, #20]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f042 0201 	orr.w	r2, r2, #1
 8004ea8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68da      	ldr	r2, [r3, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0220 	orr.w	r2, r2, #32
 8004eb8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004eba:	2300      	movs	r3, #0
}
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	3714      	adds	r7, #20
 8004ec0:	46bd      	mov	sp, r7
 8004ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec6:	4770      	bx	lr

08004ec8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ec8:	b480      	push	{r7}
 8004eca:	b095      	sub	sp, #84	; 0x54
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	330c      	adds	r3, #12
 8004ed6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eda:	e853 3f00 	ldrex	r3, [r3]
 8004ede:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	330c      	adds	r3, #12
 8004eee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ef0:	643a      	str	r2, [r7, #64]	; 0x40
 8004ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004ef6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ef8:	e841 2300 	strex	r3, r2, [r1]
 8004efc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d1e5      	bne.n	8004ed0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	3314      	adds	r3, #20
 8004f0a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	6a3b      	ldr	r3, [r7, #32]
 8004f0e:	e853 3f00 	ldrex	r3, [r3]
 8004f12:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f14:	69fb      	ldr	r3, [r7, #28]
 8004f16:	f023 0301 	bic.w	r3, r3, #1
 8004f1a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	3314      	adds	r3, #20
 8004f22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f24:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f26:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f28:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f2c:	e841 2300 	strex	r3, r2, [r1]
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d1e5      	bne.n	8004f04 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d119      	bne.n	8004f74 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	f023 0310 	bic.w	r3, r3, #16
 8004f56:	647b      	str	r3, [r7, #68]	; 0x44
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f60:	61ba      	str	r2, [r7, #24]
 8004f62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6979      	ldr	r1, [r7, #20]
 8004f66:	69ba      	ldr	r2, [r7, #24]
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2220      	movs	r2, #32
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f82:	bf00      	nop
 8004f84:	3754      	adds	r7, #84	; 0x54
 8004f86:	46bd      	mov	sp, r7
 8004f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8c:	4770      	bx	lr

08004f8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b084      	sub	sp, #16
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fa8:	68f8      	ldr	r0, [r7, #12]
 8004faa:	f7ff fecf 	bl	8004d4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fae:	bf00      	nop
 8004fb0:	3710      	adds	r7, #16
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fb6:	b480      	push	{r7}
 8004fb8:	b085      	sub	sp, #20
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b21      	cmp	r3, #33	; 0x21
 8004fc8:	d13e      	bne.n	8005048 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fd2:	d114      	bne.n	8004ffe <UART_Transmit_IT+0x48>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d110      	bne.n	8004ffe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a1b      	ldr	r3, [r3, #32]
 8004fe0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	881b      	ldrh	r3, [r3, #0]
 8004fe6:	461a      	mov	r2, r3
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004ff0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a1b      	ldr	r3, [r3, #32]
 8004ff6:	1c9a      	adds	r2, r3, #2
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	621a      	str	r2, [r3, #32]
 8004ffc:	e008      	b.n	8005010 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	6a1b      	ldr	r3, [r3, #32]
 8005002:	1c59      	adds	r1, r3, #1
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6211      	str	r1, [r2, #32]
 8005008:	781a      	ldrb	r2, [r3, #0]
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29b      	uxth	r3, r3
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	4619      	mov	r1, r3
 800501e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005020:	2b00      	cmp	r3, #0
 8005022:	d10f      	bne.n	8005044 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68da      	ldr	r2, [r3, #12]
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005032:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	68da      	ldr	r2, [r3, #12]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005042:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005044:	2300      	movs	r3, #0
 8005046:	e000      	b.n	800504a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005048:	2302      	movs	r3, #2
  }
}
 800504a:	4618      	mov	r0, r3
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr

08005056 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005056:	b580      	push	{r7, lr}
 8005058:	b082      	sub	sp, #8
 800505a:	af00      	add	r7, sp, #0
 800505c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	68da      	ldr	r2, [r3, #12]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800506c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2220      	movs	r2, #32
 8005072:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f7ff fe5e 	bl	8004d38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800507c:	2300      	movs	r3, #0
}
 800507e:	4618      	mov	r0, r3
 8005080:	3708      	adds	r7, #8
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b08c      	sub	sp, #48	; 0x30
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005094:	b2db      	uxtb	r3, r3
 8005096:	2b22      	cmp	r3, #34	; 0x22
 8005098:	f040 80ab 	bne.w	80051f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050a4:	d117      	bne.n	80050d6 <UART_Receive_IT+0x50>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	691b      	ldr	r3, [r3, #16]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d113      	bne.n	80050d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050ae:	2300      	movs	r3, #0
 80050b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	b29b      	uxth	r3, r3
 80050c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050c4:	b29a      	uxth	r2, r3
 80050c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ce:	1c9a      	adds	r2, r3, #2
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	629a      	str	r2, [r3, #40]	; 0x28
 80050d4:	e026      	b.n	8005124 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050dc:	2300      	movs	r3, #0
 80050de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e8:	d007      	beq.n	80050fa <UART_Receive_IT+0x74>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	689b      	ldr	r3, [r3, #8]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d10a      	bne.n	8005108 <UART_Receive_IT+0x82>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	691b      	ldr	r3, [r3, #16]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	701a      	strb	r2, [r3, #0]
 8005106:	e008      	b.n	800511a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	b2db      	uxtb	r3, r3
 8005110:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005114:	b2da      	uxtb	r2, r3
 8005116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005118:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005128:	b29b      	uxth	r3, r3
 800512a:	3b01      	subs	r3, #1
 800512c:	b29b      	uxth	r3, r3
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	4619      	mov	r1, r3
 8005132:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005134:	2b00      	cmp	r3, #0
 8005136:	d15a      	bne.n	80051ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	68da      	ldr	r2, [r3, #12]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f022 0220 	bic.w	r2, r2, #32
 8005146:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	68da      	ldr	r2, [r3, #12]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005156:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	695a      	ldr	r2, [r3, #20]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0201 	bic.w	r2, r2, #1
 8005166:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2220      	movs	r2, #32
 800516c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005174:	2b01      	cmp	r3, #1
 8005176:	d135      	bne.n	80051e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	2200      	movs	r2, #0
 800517c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	613b      	str	r3, [r7, #16]
   return(result);
 800518e:	693b      	ldr	r3, [r7, #16]
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	627b      	str	r3, [r7, #36]	; 0x24
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	330c      	adds	r3, #12
 800519c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800519e:	623a      	str	r2, [r7, #32]
 80051a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	69f9      	ldr	r1, [r7, #28]
 80051a4:	6a3a      	ldr	r2, [r7, #32]
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ac:	69bb      	ldr	r3, [r7, #24]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e5      	bne.n	800517e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d10a      	bne.n	80051d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051c0:	2300      	movs	r3, #0
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	685b      	ldr	r3, [r3, #4]
 80051d2:	60fb      	str	r3, [r7, #12]
 80051d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051da:	4619      	mov	r1, r3
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fdbf 	bl	8004d60 <HAL_UARTEx_RxEventCallback>
 80051e2:	e002      	b.n	80051ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f7fb fd2b 	bl	8000c40 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051ea:	2300      	movs	r3, #0
 80051ec:	e002      	b.n	80051f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051ee:	2300      	movs	r3, #0
 80051f0:	e000      	b.n	80051f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051f2:	2302      	movs	r3, #2
  }
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3730      	adds	r7, #48	; 0x30
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}

080051fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005200:	b09f      	sub	sp, #124	; 0x7c
 8005202:	af00      	add	r7, sp, #0
 8005204:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005206:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005210:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005212:	68d9      	ldr	r1, [r3, #12]
 8005214:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	ea40 0301 	orr.w	r3, r0, r1
 800521c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800521e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005220:	689a      	ldr	r2, [r3, #8]
 8005222:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005224:	691b      	ldr	r3, [r3, #16]
 8005226:	431a      	orrs	r2, r3
 8005228:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	431a      	orrs	r2, r3
 800522e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005230:	69db      	ldr	r3, [r3, #28]
 8005232:	4313      	orrs	r3, r2
 8005234:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005236:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	68db      	ldr	r3, [r3, #12]
 800523c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005240:	f021 010c 	bic.w	r1, r1, #12
 8005244:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800524a:	430b      	orrs	r3, r1
 800524c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800524e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	695b      	ldr	r3, [r3, #20]
 8005254:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005258:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525a:	6999      	ldr	r1, [r3, #24]
 800525c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800525e:	681a      	ldr	r2, [r3, #0]
 8005260:	ea40 0301 	orr.w	r3, r0, r1
 8005264:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005266:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005268:	681a      	ldr	r2, [r3, #0]
 800526a:	4bc5      	ldr	r3, [pc, #788]	; (8005580 <UART_SetConfig+0x384>)
 800526c:	429a      	cmp	r2, r3
 800526e:	d004      	beq.n	800527a <UART_SetConfig+0x7e>
 8005270:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	4bc3      	ldr	r3, [pc, #780]	; (8005584 <UART_SetConfig+0x388>)
 8005276:	429a      	cmp	r2, r3
 8005278:	d103      	bne.n	8005282 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800527a:	f7fd fd83 	bl	8002d84 <HAL_RCC_GetPCLK2Freq>
 800527e:	6778      	str	r0, [r7, #116]	; 0x74
 8005280:	e002      	b.n	8005288 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005282:	f7fd fd6b 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8005286:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005288:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800528a:	69db      	ldr	r3, [r3, #28]
 800528c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005290:	f040 80b6 	bne.w	8005400 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005294:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005296:	461c      	mov	r4, r3
 8005298:	f04f 0500 	mov.w	r5, #0
 800529c:	4622      	mov	r2, r4
 800529e:	462b      	mov	r3, r5
 80052a0:	1891      	adds	r1, r2, r2
 80052a2:	6439      	str	r1, [r7, #64]	; 0x40
 80052a4:	415b      	adcs	r3, r3
 80052a6:	647b      	str	r3, [r7, #68]	; 0x44
 80052a8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80052ac:	1912      	adds	r2, r2, r4
 80052ae:	eb45 0303 	adc.w	r3, r5, r3
 80052b2:	f04f 0000 	mov.w	r0, #0
 80052b6:	f04f 0100 	mov.w	r1, #0
 80052ba:	00d9      	lsls	r1, r3, #3
 80052bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80052c0:	00d0      	lsls	r0, r2, #3
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	1911      	adds	r1, r2, r4
 80052c8:	6639      	str	r1, [r7, #96]	; 0x60
 80052ca:	416b      	adcs	r3, r5
 80052cc:	667b      	str	r3, [r7, #100]	; 0x64
 80052ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	461a      	mov	r2, r3
 80052d4:	f04f 0300 	mov.w	r3, #0
 80052d8:	1891      	adds	r1, r2, r2
 80052da:	63b9      	str	r1, [r7, #56]	; 0x38
 80052dc:	415b      	adcs	r3, r3
 80052de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80052e4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80052e8:	f7fa ff74 	bl	80001d4 <__aeabi_uldivmod>
 80052ec:	4602      	mov	r2, r0
 80052ee:	460b      	mov	r3, r1
 80052f0:	4ba5      	ldr	r3, [pc, #660]	; (8005588 <UART_SetConfig+0x38c>)
 80052f2:	fba3 2302 	umull	r2, r3, r3, r2
 80052f6:	095b      	lsrs	r3, r3, #5
 80052f8:	011e      	lsls	r6, r3, #4
 80052fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80052fc:	461c      	mov	r4, r3
 80052fe:	f04f 0500 	mov.w	r5, #0
 8005302:	4622      	mov	r2, r4
 8005304:	462b      	mov	r3, r5
 8005306:	1891      	adds	r1, r2, r2
 8005308:	6339      	str	r1, [r7, #48]	; 0x30
 800530a:	415b      	adcs	r3, r3
 800530c:	637b      	str	r3, [r7, #52]	; 0x34
 800530e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005312:	1912      	adds	r2, r2, r4
 8005314:	eb45 0303 	adc.w	r3, r5, r3
 8005318:	f04f 0000 	mov.w	r0, #0
 800531c:	f04f 0100 	mov.w	r1, #0
 8005320:	00d9      	lsls	r1, r3, #3
 8005322:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005326:	00d0      	lsls	r0, r2, #3
 8005328:	4602      	mov	r2, r0
 800532a:	460b      	mov	r3, r1
 800532c:	1911      	adds	r1, r2, r4
 800532e:	65b9      	str	r1, [r7, #88]	; 0x58
 8005330:	416b      	adcs	r3, r5
 8005332:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005334:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	461a      	mov	r2, r3
 800533a:	f04f 0300 	mov.w	r3, #0
 800533e:	1891      	adds	r1, r2, r2
 8005340:	62b9      	str	r1, [r7, #40]	; 0x28
 8005342:	415b      	adcs	r3, r3
 8005344:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005346:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800534a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800534e:	f7fa ff41 	bl	80001d4 <__aeabi_uldivmod>
 8005352:	4602      	mov	r2, r0
 8005354:	460b      	mov	r3, r1
 8005356:	4b8c      	ldr	r3, [pc, #560]	; (8005588 <UART_SetConfig+0x38c>)
 8005358:	fba3 1302 	umull	r1, r3, r3, r2
 800535c:	095b      	lsrs	r3, r3, #5
 800535e:	2164      	movs	r1, #100	; 0x64
 8005360:	fb01 f303 	mul.w	r3, r1, r3
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	3332      	adds	r3, #50	; 0x32
 800536a:	4a87      	ldr	r2, [pc, #540]	; (8005588 <UART_SetConfig+0x38c>)
 800536c:	fba2 2303 	umull	r2, r3, r2, r3
 8005370:	095b      	lsrs	r3, r3, #5
 8005372:	005b      	lsls	r3, r3, #1
 8005374:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005378:	441e      	add	r6, r3
 800537a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800537c:	4618      	mov	r0, r3
 800537e:	f04f 0100 	mov.w	r1, #0
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	1894      	adds	r4, r2, r2
 8005388:	623c      	str	r4, [r7, #32]
 800538a:	415b      	adcs	r3, r3
 800538c:	627b      	str	r3, [r7, #36]	; 0x24
 800538e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005392:	1812      	adds	r2, r2, r0
 8005394:	eb41 0303 	adc.w	r3, r1, r3
 8005398:	f04f 0400 	mov.w	r4, #0
 800539c:	f04f 0500 	mov.w	r5, #0
 80053a0:	00dd      	lsls	r5, r3, #3
 80053a2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80053a6:	00d4      	lsls	r4, r2, #3
 80053a8:	4622      	mov	r2, r4
 80053aa:	462b      	mov	r3, r5
 80053ac:	1814      	adds	r4, r2, r0
 80053ae:	653c      	str	r4, [r7, #80]	; 0x50
 80053b0:	414b      	adcs	r3, r1
 80053b2:	657b      	str	r3, [r7, #84]	; 0x54
 80053b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053b6:	685b      	ldr	r3, [r3, #4]
 80053b8:	461a      	mov	r2, r3
 80053ba:	f04f 0300 	mov.w	r3, #0
 80053be:	1891      	adds	r1, r2, r2
 80053c0:	61b9      	str	r1, [r7, #24]
 80053c2:	415b      	adcs	r3, r3
 80053c4:	61fb      	str	r3, [r7, #28]
 80053c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053ca:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80053ce:	f7fa ff01 	bl	80001d4 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4b6c      	ldr	r3, [pc, #432]	; (8005588 <UART_SetConfig+0x38c>)
 80053d8:	fba3 1302 	umull	r1, r3, r3, r2
 80053dc:	095b      	lsrs	r3, r3, #5
 80053de:	2164      	movs	r1, #100	; 0x64
 80053e0:	fb01 f303 	mul.w	r3, r1, r3
 80053e4:	1ad3      	subs	r3, r2, r3
 80053e6:	00db      	lsls	r3, r3, #3
 80053e8:	3332      	adds	r3, #50	; 0x32
 80053ea:	4a67      	ldr	r2, [pc, #412]	; (8005588 <UART_SetConfig+0x38c>)
 80053ec:	fba2 2303 	umull	r2, r3, r2, r3
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	f003 0207 	and.w	r2, r3, #7
 80053f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4432      	add	r2, r6
 80053fc:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053fe:	e0b9      	b.n	8005574 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005400:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005402:	461c      	mov	r4, r3
 8005404:	f04f 0500 	mov.w	r5, #0
 8005408:	4622      	mov	r2, r4
 800540a:	462b      	mov	r3, r5
 800540c:	1891      	adds	r1, r2, r2
 800540e:	6139      	str	r1, [r7, #16]
 8005410:	415b      	adcs	r3, r3
 8005412:	617b      	str	r3, [r7, #20]
 8005414:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005418:	1912      	adds	r2, r2, r4
 800541a:	eb45 0303 	adc.w	r3, r5, r3
 800541e:	f04f 0000 	mov.w	r0, #0
 8005422:	f04f 0100 	mov.w	r1, #0
 8005426:	00d9      	lsls	r1, r3, #3
 8005428:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800542c:	00d0      	lsls	r0, r2, #3
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	eb12 0804 	adds.w	r8, r2, r4
 8005436:	eb43 0905 	adc.w	r9, r3, r5
 800543a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	4618      	mov	r0, r3
 8005440:	f04f 0100 	mov.w	r1, #0
 8005444:	f04f 0200 	mov.w	r2, #0
 8005448:	f04f 0300 	mov.w	r3, #0
 800544c:	008b      	lsls	r3, r1, #2
 800544e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005452:	0082      	lsls	r2, r0, #2
 8005454:	4640      	mov	r0, r8
 8005456:	4649      	mov	r1, r9
 8005458:	f7fa febc 	bl	80001d4 <__aeabi_uldivmod>
 800545c:	4602      	mov	r2, r0
 800545e:	460b      	mov	r3, r1
 8005460:	4b49      	ldr	r3, [pc, #292]	; (8005588 <UART_SetConfig+0x38c>)
 8005462:	fba3 2302 	umull	r2, r3, r3, r2
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	011e      	lsls	r6, r3, #4
 800546a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800546c:	4618      	mov	r0, r3
 800546e:	f04f 0100 	mov.w	r1, #0
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	1894      	adds	r4, r2, r2
 8005478:	60bc      	str	r4, [r7, #8]
 800547a:	415b      	adcs	r3, r3
 800547c:	60fb      	str	r3, [r7, #12]
 800547e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005482:	1812      	adds	r2, r2, r0
 8005484:	eb41 0303 	adc.w	r3, r1, r3
 8005488:	f04f 0400 	mov.w	r4, #0
 800548c:	f04f 0500 	mov.w	r5, #0
 8005490:	00dd      	lsls	r5, r3, #3
 8005492:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005496:	00d4      	lsls	r4, r2, #3
 8005498:	4622      	mov	r2, r4
 800549a:	462b      	mov	r3, r5
 800549c:	1814      	adds	r4, r2, r0
 800549e:	64bc      	str	r4, [r7, #72]	; 0x48
 80054a0:	414b      	adcs	r3, r1
 80054a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80054a6:	685b      	ldr	r3, [r3, #4]
 80054a8:	4618      	mov	r0, r3
 80054aa:	f04f 0100 	mov.w	r1, #0
 80054ae:	f04f 0200 	mov.w	r2, #0
 80054b2:	f04f 0300 	mov.w	r3, #0
 80054b6:	008b      	lsls	r3, r1, #2
 80054b8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80054bc:	0082      	lsls	r2, r0, #2
 80054be:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80054c2:	f7fa fe87 	bl	80001d4 <__aeabi_uldivmod>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4b2f      	ldr	r3, [pc, #188]	; (8005588 <UART_SetConfig+0x38c>)
 80054cc:	fba3 1302 	umull	r1, r3, r3, r2
 80054d0:	095b      	lsrs	r3, r3, #5
 80054d2:	2164      	movs	r1, #100	; 0x64
 80054d4:	fb01 f303 	mul.w	r3, r1, r3
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	3332      	adds	r3, #50	; 0x32
 80054de:	4a2a      	ldr	r2, [pc, #168]	; (8005588 <UART_SetConfig+0x38c>)
 80054e0:	fba2 2303 	umull	r2, r3, r2, r3
 80054e4:	095b      	lsrs	r3, r3, #5
 80054e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80054ea:	441e      	add	r6, r3
 80054ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80054ee:	4618      	mov	r0, r3
 80054f0:	f04f 0100 	mov.w	r1, #0
 80054f4:	4602      	mov	r2, r0
 80054f6:	460b      	mov	r3, r1
 80054f8:	1894      	adds	r4, r2, r2
 80054fa:	603c      	str	r4, [r7, #0]
 80054fc:	415b      	adcs	r3, r3
 80054fe:	607b      	str	r3, [r7, #4]
 8005500:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005504:	1812      	adds	r2, r2, r0
 8005506:	eb41 0303 	adc.w	r3, r1, r3
 800550a:	f04f 0400 	mov.w	r4, #0
 800550e:	f04f 0500 	mov.w	r5, #0
 8005512:	00dd      	lsls	r5, r3, #3
 8005514:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005518:	00d4      	lsls	r4, r2, #3
 800551a:	4622      	mov	r2, r4
 800551c:	462b      	mov	r3, r5
 800551e:	eb12 0a00 	adds.w	sl, r2, r0
 8005522:	eb43 0b01 	adc.w	fp, r3, r1
 8005526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	4618      	mov	r0, r3
 800552c:	f04f 0100 	mov.w	r1, #0
 8005530:	f04f 0200 	mov.w	r2, #0
 8005534:	f04f 0300 	mov.w	r3, #0
 8005538:	008b      	lsls	r3, r1, #2
 800553a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800553e:	0082      	lsls	r2, r0, #2
 8005540:	4650      	mov	r0, sl
 8005542:	4659      	mov	r1, fp
 8005544:	f7fa fe46 	bl	80001d4 <__aeabi_uldivmod>
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4b0e      	ldr	r3, [pc, #56]	; (8005588 <UART_SetConfig+0x38c>)
 800554e:	fba3 1302 	umull	r1, r3, r3, r2
 8005552:	095b      	lsrs	r3, r3, #5
 8005554:	2164      	movs	r1, #100	; 0x64
 8005556:	fb01 f303 	mul.w	r3, r1, r3
 800555a:	1ad3      	subs	r3, r2, r3
 800555c:	011b      	lsls	r3, r3, #4
 800555e:	3332      	adds	r3, #50	; 0x32
 8005560:	4a09      	ldr	r2, [pc, #36]	; (8005588 <UART_SetConfig+0x38c>)
 8005562:	fba2 2303 	umull	r2, r3, r2, r3
 8005566:	095b      	lsrs	r3, r3, #5
 8005568:	f003 020f 	and.w	r2, r3, #15
 800556c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4432      	add	r2, r6
 8005572:	609a      	str	r2, [r3, #8]
}
 8005574:	bf00      	nop
 8005576:	377c      	adds	r7, #124	; 0x7c
 8005578:	46bd      	mov	sp, r7
 800557a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800557e:	bf00      	nop
 8005580:	40011000 	.word	0x40011000
 8005584:	40011400 	.word	0x40011400
 8005588:	51eb851f 	.word	0x51eb851f

0800558c <__libc_init_array>:
 800558c:	b570      	push	{r4, r5, r6, lr}
 800558e:	4d0d      	ldr	r5, [pc, #52]	; (80055c4 <__libc_init_array+0x38>)
 8005590:	4c0d      	ldr	r4, [pc, #52]	; (80055c8 <__libc_init_array+0x3c>)
 8005592:	1b64      	subs	r4, r4, r5
 8005594:	10a4      	asrs	r4, r4, #2
 8005596:	2600      	movs	r6, #0
 8005598:	42a6      	cmp	r6, r4
 800559a:	d109      	bne.n	80055b0 <__libc_init_array+0x24>
 800559c:	4d0b      	ldr	r5, [pc, #44]	; (80055cc <__libc_init_array+0x40>)
 800559e:	4c0c      	ldr	r4, [pc, #48]	; (80055d0 <__libc_init_array+0x44>)
 80055a0:	f000 f820 	bl	80055e4 <_init>
 80055a4:	1b64      	subs	r4, r4, r5
 80055a6:	10a4      	asrs	r4, r4, #2
 80055a8:	2600      	movs	r6, #0
 80055aa:	42a6      	cmp	r6, r4
 80055ac:	d105      	bne.n	80055ba <__libc_init_array+0x2e>
 80055ae:	bd70      	pop	{r4, r5, r6, pc}
 80055b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80055b4:	4798      	blx	r3
 80055b6:	3601      	adds	r6, #1
 80055b8:	e7ee      	b.n	8005598 <__libc_init_array+0xc>
 80055ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80055be:	4798      	blx	r3
 80055c0:	3601      	adds	r6, #1
 80055c2:	e7f2      	b.n	80055aa <__libc_init_array+0x1e>
 80055c4:	0800561c 	.word	0x0800561c
 80055c8:	0800561c 	.word	0x0800561c
 80055cc:	0800561c 	.word	0x0800561c
 80055d0:	08005620 	.word	0x08005620

080055d4 <memset>:
 80055d4:	4402      	add	r2, r0
 80055d6:	4603      	mov	r3, r0
 80055d8:	4293      	cmp	r3, r2
 80055da:	d100      	bne.n	80055de <memset+0xa>
 80055dc:	4770      	bx	lr
 80055de:	f803 1b01 	strb.w	r1, [r3], #1
 80055e2:	e7f9      	b.n	80055d8 <memset+0x4>

080055e4 <_init>:
 80055e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055e6:	bf00      	nop
 80055e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055ea:	bc08      	pop	{r3}
 80055ec:	469e      	mov	lr, r3
 80055ee:	4770      	bx	lr

080055f0 <_fini>:
 80055f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055f2:	bf00      	nop
 80055f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f6:	bc08      	pop	{r3}
 80055f8:	469e      	mov	lr, r3
 80055fa:	4770      	bx	lr
